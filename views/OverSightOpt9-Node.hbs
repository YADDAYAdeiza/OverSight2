<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="generator" content="CoffeeCup HTML Editor (www.coffeecup.com)" />
	<meta name="dcterms.created" content="Sun, 24 Nov 2013 16:01:58 GMT" />
	<meta name="viewport" content="width=device-width,initial-scale=1.0">
	<meta name="description" content="" />
	<meta name="keywords" content="" />

	<meta http-equiv="cache-control" content="max-age=0" />
	<meta http-equiv="cache-control" content="no-cache" />
	<meta http-equiv="expires" content="0" />
	<meta http-equiv="expires" content="Tuesday, 01 Jan 1980 1:00:00 GMT" />
	<meta http-equiv="pragma" content="no-cache" />

	<title>OverSight(R)</title>

	<style type="text/css">
		html {
			margin: 0;
			height: 100%;
			font-family: Arial;
		}

		body {
			margin: 0;
			height: 100%;
			font-family: Arial;
		}

		body {
			background: #ececec;
			//text-align:center;
		}

		.tablink {
			float: left;
			cursor: pointer;
			outline: none;
			border: none;
			width: 20%;
			padding: 20px;
			font-size: 12px;
			//color:white;
		}

		.inspectorChart {
			overflow: scroll;
		}

		.divCheckInspection {
			display: inline-block;
			background-color: green;
			width: 20%;
		}

		.container {
			display: grid;
			grid-template-column: 1fr 1fr 1fr; //200px auto 200px;  //repeat(3, 1fr);
			grid-template-rows: 100px 1000px 100px; //repeat (3,100px);
			//grid-template:repeat (3,100px)/repeat(3, 1fr);
			grid-gap: 3px;
		}

		.inspectionMap {
			height: 20%;
			width: 50%
		}

		.inspectorChart {
			width: 100%;
			height: 100%;
			border: 2px solid yellow;
		}

		.inspRepCancelClass {
			float: right;
		}

		.InspReportDivCancelClass {
			background-color: gray;
			width: 100%;
			height: 20%;
		}

		.InspReportDivClass {
			position: absolute;
			background-color: white;
			top: 100px;
			left: 500px;
			width: 20%;
			height: 20%;
			overflow: auto;
		}

		.trackedRowChart {
			background-color: blue;
		}

		.repTabNewRowClassMouseOverList {
			background-color: yellow;
			//font-size:120%;
			color: blue;
		}

		.axis {
			font: 6px sans-serif;
		}

		.checkOutlierDiv {
			position: absolute;
		}

		.wrapperDivClass {
			display: inline-block;
			margin-right: 20px;
		}

		.wrapperCancelClass {
			float: right;
		}

		.wrapperDivCancelClass {
			display: block;
			height: 0px;
			opacity: 0;
			transition: all 0.2s;
		}

		.wrapperDivCancelClass2 {
			display: block;
			opacity: 1;
			height: 20px;
			background-color: orange;
		}



		.wrapperDivCheckClass {
			height: 100%;
			width: 2%;
			float: left;
			position: relative;
		}

		.wrapperDivD3ChartClass {
			height: 100%;
			width: 20%;
			background-color: yellowgreen;
			display: inline-block;
			margin-right: 20px;
		}

		.grandMiniD3ContainerDivClass {
			margin-top: 400px;
			width: 100%;
			height: 100%;
			transition: all 0.2s;
		}

		.grandMiniD3ContainerDivBodyClass {
			width: 100%;
			height: 60%;
			background-color: skyblue;
			transition: all 0.2s;
		}


		.grandMiniD3ContainerDivBodyClassList {
			width: 100%;
			height: 10%;
			background-color: rgb(205 224 220); //light green
		}

		.grandMiniD3ContainerDivBodyClassListDivDisplay+div {
			opacity: 0;
		}


		.grandMiniD3ContainerDivDropDownClass {
			background-color: #808080b0; //gray
		}

		.d3ChartClassDivCancelClass {
			width: 100%;
			height: 20%;
			margin-top: 10px;
			background-color: green;
		}

		.grandD3ChartClassDivCancelClass {
			background-color: gray;
			width: 100%;
			height: 5%;
		}

		.grandD3ChartDivClass {
			position: absolute;
			background-color: DarkOrchid;
			position: absolute;
			width: 100%;
			height: 60%;
		}

		.minid3ChartClassDiv {
			width: 20%;
			height: 20%;
			margin: 10px;
			margin-top: 20px;
			float: left;
			//background-color:AntiqueWhite;
		}

		.minid3ChartBackGroundColorClassDiv {
			background-color: AntiqueWhite;
			margin-bottom: 100px;
		}

		//.minid3ChartClassDivImages

		.grandD3ChartClassDivImgExpandClassList {
			width: 100%;
			height: 100%;
			background-color: cyan;
		}

		.d3ChartClassDivImgExpandClassList {
			width: 100%;
			height: 100%;
			background-color: yellow;
		}

		.grandD3ChartClass {
			background-color: skyblue;
			width: 100%;
			height: 60%;
		}

		.d3ChartClass {
			position: relative;
			background-color: skyblue;
			width: 100%;
			height: 60%;
			//background-color:;
		}

		.d3ChartClass img {
			float: right;
			//height:20px;
			//width:20px;
		}

		.isStackedImgClass {
			float: left;
		}

		.isStackedImgClass:hover {
			-webkit-filter: invert(100%);
		}

		.isStackedImgClass:active {
			transform: scale(1.1);
		}

		.reportDivExpandNow {
			animation-name: ExpandDiv;
			animation-duration: 0.1s;
			transform: translate();
			animation-fill-mode: forwards;
		}

		@keyframes ExpandDiv {
			from {
				height: 50%;
			}

			to {
				height: 100%;
			}

			from {
				width: 60%;
			}

			to {
				width: 100%;
			}

		}


		input[type="color"] {
			//-webkit-appearance: none;
			border: none;
			width: 32px;
			height: 16px;
		}

		/*
		input[type="color"]::-webkit-color-swatch-wrapper {
			padding: 0;
		}
		input[type="color"]::-webkit-color-swatch {
			border: none;
		}
		*/
		.tabReportDivMenuClass {
			background-color: yellow;
			//opacity:0.2;
		}

		.menuIconContainerDivClass {
			background-color: rgba(255, 255, 255, 0.1);
		}

		.menuIconContainer {
			background: rgba(255, 255, 255, 0.1);
		}



		.colNone {
			display: none;
		}

		.menuIconContainer {
			display: inline-block;
			cursor: pointer;
		}

		.line1,
		.line2,
		.line3 {
			width: 35px;
			height: 2px;
			background-color: #333;
			margin: 6px 0;
			transition: 0.4s;
		}

		.bring .line1 {
			-webkit-transform: rotate(-45deg) translate(-9px, 6px);
			transform: rotate(-45deg) translate(-9px, 6px);
		}

		.bring .line2 {
			opacity: 0;
		}

		.bring .line3 {
			-webkit-transform: rotate(45deg) translate(-8px, -8px);
			transform: rotate(45deg) translate(-8px, -8px);
		}

		.tableCellDivContainerClass {
			display: none;
		}

		.tableCellDivContainerAppearClass {
			display: inline-block;
			animation-name: DropDown;
			animation-duration: 0.1s;
			transform: translate();
			animation-fill-mode: forwards;
		}

		@keyframes DropDown {
			from {
				height: 0;
			}

			to {
				height: 50%;
			}

			from {
				opacity: 0.0;
			}

			to {
				opacity: 1.0;
			}

		}


		.tabReportDivMenuClass {
			position: absolute;
			width: 0;
			height: 50%;
			background-color: GhostWhite;
			opacity: 1;
			//display:none;
		}

		.tabReportDivMenuExpandClass {
			position: absolute;
			width: 40%;
			//height:50%;
			//background-color:GhostWhite;
			opacity: 1;
			//display:none;
		}


		.tabReportDivMenuClassMoveIn {
			animation-name: MoveIn;
			animation-duration: 0.1s;
			transform: translate();
			animation-fill-mode: forwards;
		}


		@keyframes MoveIn {
			from {
				width: 0;
			}

			to {
				width: 50%;
			}

			from {
				background: rgba(255, 255, 255, 0.1);
			}

			to {
				background: rgba(255, 255, 255, 0.6);
			}

		}


		.pullInBtnClass {
			display: none;
		}

		.pullInBtnAppearClass {
			display: inline-block;
			zIndex: 1;
		}

		.imgBlowClass {
			float: right;
		}

		.reportTabClass {
			border-collapse: collapse;
		}

		.tabReportDivClass {
			margin: auto;
			border: 1px solid black;
			border-collapse: collapse;
			padding: 20px;
			overflow: scroll;
		}




		.tabReportDivClass td {
			border: 1px solid black;
		}

		.reportDivClass {
			width: 60%;
			height: 50%;
			background-color: blue;
			overflow: scroll;
		}

		.cancelReportClass,
		.blowReportClass {
			float: right;
		}

		.cancelReportClass:hover {
			transform: scale(1.1);
		}

		.imgRemReportDivClass {
			display: none;
		}


		.divContContainerClass:hover .imgRemReportDivClass {
			background-color: WhiteSmoke;
			display: block;
			width: 100%;
			height: 12%;
			border-size: 0;
		}


		.combiDiv2Class {
			//background-color:yellow;
			//top:2px;
			position: relative;
			height: 25%;
			width: 22%;
			border: magenta solid 2px;
			float: left;
			margin: 4px;
			-webkit-transition: transform 0.2s ease-out;
			-moz-transition: transform 0.2s ease-out;
		}

		.combiDivContClass {
			position: relative;
			//background-color:red;
			height: 91%;
			width: 100%;
			display: block;
		}


		.combiDivMenuClass {
			//top:60px;
			background-color: MistyRose;
			position: absolute;
			width: 100%;
			height: 10%;
			z-index: 10;
		}

		.combiDivClass {
			position: absolute;
			padding-top: 30px;
			padding-bottom: 30px;
			background-color: orange;
			height: 68%;
			width: 100%;
			border: 0;
			display: block;
		}

		.checkCombiClass {
			float: right;
		}

		.dashFltRt {
			float: right;
		}


		.imgPinClass:hover {
			//background-color:black;

		}

		.imgPinClass {
			animation-name: appear;
			animation-duration: 1s;
			-webkit-animation-name: appear;
			-webkit-animation-duration: 0.4s;
			animation-timing-function: ease-in;
			-webkit-animation-timing-function: ease-in;
		}

		.imgPin2Class {
			animation-name: appear;
			animation-duration: 1s;
			-webkit-animation-name: appear;
			-webkit-animation-duration: 0.4s;
			animation-timing-function: ease-in;
			-webkit-animation-timing-function: ease-in;
		}

		.filtDivClass,
		.filtDivClassGraph {
			position: absolute;
			margin-top: 20px;
			background-color: cyan;
			text-align: center;
			opacity: 0.1;
			width: 100%;
			height: 1%;
			z-index: 0;
			-webkit-transition: all 0.2s;
		}

		.filtDivClass2 {
			position: absolute;
			background-color: cyan;
			//text-align:center;
			opacity: 0.9;
			width: 100%;
			height: 100%;
			-webkit-transition: height 0.2s;
			z-index: 1;
		}


		.customDivClass,
		.customDivClassGraph {
			position: absolute;
			margin-top: 20px;
			background-color: aquamarine;
			text-align: center;
			opacity: 0.1;
			width: 100%;
			height: 1%;
			z-index: 0;
			-webkit-transition: all 0.2s;
		}

		.customDivClass2 {
			position: absolute;
			background-color: aquamarine;
			//text-align:center;
			opacity: 0.9;
			width: 100%;
			height: 100%;
			-webkit-transition: height 0.2s;
			z-index: 1;
		}


		.customDivClassGraphIcon {
			padding: 20px;
			transition: all .1s ease-in-out;
		}

		.customDivClassGraphIcon:active {
			transform: scale(1.1);
		}

		.customDivClassGraphIcon:hover {
			-webkit-filter: invert(100%);
		}

		@keyframes appear {
			from {
				opacity: 0.6;
			}

			to {
				opacity: 1.0;
			}

			z-index:1;
		}


		.sendReqClass {
			display: inline-block;
			width: 50%;
			text-align: center;
		}

		.customDivARInputClass {
			display: block;
			width: 50%;
			margin: auto;
			margin-top: 10px;
		}


		#newDivIdGrab {
			background-color: orange;
		}

		.searchCompClass {
			width: 60%;
			height: 5px;
			margin-left: 20px;
			padding: 5px;
			position: relative;
			animation-name: elongate;
			animation-duration: 0.2s;
			-webkit-animation-name: elongate;
			-webkit-animation-duration: 0.2s
		}

		@keyframes elongate {
			from {
				width: 10%;
			}

			to {
				width: 60%;
			}
		}

		.searchCompClass:not(:focus) {
			background-color: yellow;
			width: 50%,
				animation-name:shrink;
			animation-duration: 0.2s;
			-webkit-animation-name: shrink;
			-webkit-animation-duration: 0.2s
		}

		@keyframes shrink {
			from {
				width: 60%;
			}

			to {
				width: 10%;
			}
		}

		.tablink {
			float: left;
			cursor: pointer;
			outline: none;
			border: none;
			width: 20%;
			padding: 20px;
			font-size: 17px;
			//color:white;
		}

		.tablink:hover {
			background-color: whitesmoke;
		}

		.tabProfilelink {
			float: left;
			cursor: pointer;
			outline: none;
			border: none;
			width: 50%;
			padding: 10px;
			font-size: 14px;
		}

		.tabProfilelink:hover {
			background-color: whitesmoke;
		}

		.tabcontent {
			height: 100%;
		}

		.tabsubcontent {
			height: 100%;
		}

		.dashboarda {
			height: 100%;
		}


		.dashChartComplianceClass {
			margin-top: 20px;
			//padding-bottom:30px;
			background-color: blue;
			position: absolute;
			//height:60%;
			//width:100%;
			//border: 0;
			display: block;
		}

		.newDiv {
			position: absolute;
			padding-top: 30px;
			padding-bottom: 30px;
			background-color: orange;
			height: 68%;
			width: 100%;
			border: 0;
			display: block;
		}

		.newDivCont {
			position: relative;
			//background-color:red;
			height: 91%;
			width: 100%;
			display: block;
		}


		.imgContainerClass {
			background-color: MistyRose;
			position: absolute;
			width: 22%;
			display: none;
			z-index: 10;
			//height:40px;
			//transition:height 0.7s, opacity 0.7s;
		}

		.newDivGrab2Class {
			//background-color:yellow;
			height: 25%;
			width: 22%;
			//border: magenta solid 2px;
			float: left;
			margin: 4px;
		}

		.sendReqDivClass {
			background-color: MistyRose;
			position: relative;
			//float:left;
			opacity: 1;
			transition: opacity 0.1s;
			text-align: center;
			display: none;
			//margin-top:20px;
		}



		#newDivGrab2Id:hover #imgContainerId {
			display: block;
			animation-name: descend;
			animation-duration: 2s;
			-webkit-animation-name: descend;
			-webkit-animation-duration: 0.1s;
			animation-timing-function: ease-in;
			-webkit-animation-timing-function: ease-in;
		}

		@keyframes descend {
			from {
				height: 2px;
			}

			to {
				height: 6px;
			}
		}

		#newDivGrab2Id:hover #sendReqDivId {
			display: block;
			text-align: center;
			//animation-name:descenda;
			//animation-duration:0.1s;
			-webkit-animation-name: descenda;
			-webkit-animation-duration: 0.1s;
			//animation-timing-function: ease-in;
			-webkit-animation-timing-function: ease-in;
		}

		@keyframes descenda {
			from {
				margin-top: 20px;
			}

			to {
				margin-top: 0;
			}
		}

		/*
		 #newDivGrab2Id:hover #sendReqDivId{
			display:block;
			width:100%;
			opacity:1;
		}
		*/

		@keyframes descend2 {
			from {
				height: 60px;
			}

			to {
				height: -20px;
			}
		}


		.newDiv2 {
			background-color: cyan;
			height: 25%;
			width: 22%;
			//border: magenta solid 2px;
			float: left;
			margin: 4px;
		}




		#profDiv {
			border: 1px solid magenta;
			width: 20%;
			height: 250px;
		}

		#profUploadBut {
			//padding:5px;
		}

		.editBut {
			display: none;
		}

		.backy2A {
			background-color: silver;
			width: 1000px;
			margin: 0 auto;
		}

		.regFormACl .tabPres {
			background-color: silver;
			width: 800px;
			margin: 0 auto;
		}

		.formInpt {
			width: 100%;
			padding: 12px 20px;
			margin: 8px 0;
			box-sizing: border-box;
			border-radius: 4px;
		}

		.openNavClass {
			display: none;
		}

		#mapOver {
			top: 55px;
			height: 400px;
			width: 100%;
			border: 1px solid #000;
		}

		.divButs {
			//top:
		}

		#establishmentHistory {
			height: 250px;
			width: 90%;
			margin-left: auto;
			margin-right: auto;
			background-color: #FFFFFF;
			border: solid;
			border-color: #000000;
		}

		#establishmentHistory2 {
			height: 1000px;
			width: 20%;
			float: left;
			background-color: #FFFACD;
			border: solid;
			border-color: #006400;
		}

		.tabPres {
			background-color: white;
			//background:hsla(180,100%,90%,0.5);
			border: none;
		}

		.backy {
			background: hsla(60, 100%, 50%, 0.3);
			text-align: center;

		}

		.backy2 {
			height: 340px;
			width: 200%;
			color: white;
		}

		.lab {
			font-weight: bold;
		}

		.lab2 {
			display: inline-block;
			width: 30px;
		}

		.labDer {
			display: inline-block;
			width: 90px;
			font-weight: bold;
		}



		#queryForm2 {
			background: hsla(60, 100%, 50%, 0.3);
			position: relative;
		}



		.selParamStyle {
			position: absolute;

		}

		.inptParamStyle {
			position: absolute;
			left: 110px;
		}

		.radParamStyle {
			position: relative;
			left: 230px;
		}


		#queryTabDispId {
			border: 1px solid #000;

		}


		#queryTabDispId tr,
		#queryTabDispId td {
			border: 1px solid;

		}

		#queryTabDispId thead {
			color: #008000;
			background-color: #FFFF00;
			border: 1px solid #000;
		}

		#queryTabDispId tr.alt td {
			background-color: #FFFFFF;
		}

		#queryTabDispId tr.alt2 td {
			background-color: #FFFFE0;
		}


		.expandRow {
			height: 700px;
		}

		.FindingsBackGround {
			background: hsla(40, 100%, 50%, 0.3);
			border-collapse: collapse;
			border-color: #FFFF00;
		}

		.noValues {
			background: pink;
			border-color: black;
			border-style: solid;
		}

		.statusLabStyle {
			color: green;
			margin: Auto;
		}

		/*
	.arrange {
		float:left;
	}
	*/

		//Search -PC Version
		.searchSelClass {
			width: 230px;
		}


		.searchSelClass option {
			//options in select box
			width: 230px;
			background-color: AliceBlue;
		}

		.searchInptClass {
			//position:absolute;
			//padding-left:35px;
			//padding-right:15px;
			margin-left: 180px;
			margin-right: 10px;
			background-color: MistyRose;
			border-radius: 1px;
			color: green;
			width: 90px;
		}


		.searchInptClass:focus {
			//color:green;
			width: 235px;
			//padding-left:80px;
			margin-left: 35px;
		}

		.searchInptClass {
			transition: all 0.2s ease 0s;
		}


		.searchContainerClass2 {
			//position:absolute;
			background-color: orange;
			//border: 3px solid green;
			//width:50%;
			//height:220px;
			//margin: auto;

		}

		.header {
			width: 100%;
			height: 40px;
			color: #FFF;
			background: #3F51B5;
			position: fixed;
			font-size: 20px;
			box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 2px 9px 1px rgba(0, 0, 0, 0.12), 0 4px 2px -2px rgba(0, 0, 0, 0.2);
			padding: 16px 16px 0 16px;
			will-change: transform;
			display: -webkit-box;
			display: -webkit-flex;
			display: -ms-flexbox;
			display: flex;
			-webkit-box-orient: horizontal;
			-webkit-box-direction: normal;
			-webkit-flex-direction: row;
			-ms-flex-direction: row;
			flex-direction: row;
			-webkit-flex-wrap: nowrap;
			-ms-flex-wrap: nowrap;
			flex-wrap: nowrap;
			-webkit-box-pack: start;
			-webkit-justify-content: flex-start;
			-ms-flex-pack: start;
			justify-content: flex-start;
			-webkit-box-align: stretch;
			-webkit-align-items: stretch;
			-ms-flex-align: stretch;
			align-items: stretch;
			-webkit-align-content: center;
			-ms-flex-line-pack: center;
			align-content: center;
			-webkit-transition: -webkit-transform 0.233s cubic-bezier(0, 0, 0.21, 1) 0.1s;
			transition: -webkit-transform 0.233s cubic-bezier(0, 0, 0.21, 1) 0.1s;
			transition: transform 0.233s cubic-bezier(0, 0, 0.21, 1) 0.1s;
			transition: transform 0.233s cubic-bezier(0, 0, 0.21, 1) 0.1s, -webkit-transform 0.233s cubic-bezier(0, 0, 0.21, 1) 0.1s;
			z-index: 1000;
		}


		.loader {
			left: 50%;
			top: 40%;
			position: fixed;
			-webkit-transform: translate(-50%, -50%);
			transform: translate(-50%, -50%);
		}

		.loader #spinner {
			box-sizing: border-box;
			stroke: #673AB7;
			stroke-width: 3px;
			-webkit-transform-origin: 50%;
			transform-origin: 50%;
			-webkit-animation: line 1.6s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate 1.6s linear infinite;
			animation: line 1.6s cubic-bezier(0.4, 0, 0.2, 1) infinite, rotate 1.6s linear infinite;
		}

		@-webkit-keyframes rotate {
			from {
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			to {
				-webkit-transform: rotate(450deg);
				transform: rotate(450deg);
			}
		}

		@keyframes rotate {
			from {
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			to {
				-webkit-transform: rotate(450deg);
				transform: rotate(450deg);
			}
		}

		@-webkit-keyframes line {
			0% {
				stroke-dasharray: 2, 85.964;
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			50% {
				stroke-dasharray: 65.973, 21.9911;
				stroke-dashoffset: 0;
			}

			100% {
				stroke-dasharray: 2, 85.964;
				stroke-dashoffset: -65.973;
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}
		}

		@keyframes line {
			0% {
				stroke-dasharray: 2, 85.964;
				-webkit-transform: rotate(0);
				transform: rotate(0);
			}

			50% {
				stroke-dasharray: 65.973, 21.9911;
				stroke-dashoffset: 0;
			}

			100% {
				stroke-dasharray: 2, 85.964;
				stroke-dashoffset: -65.973;
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}
		}

		.stateScanParentClass {
			overflow-x: auto;
			overflow-y: auto;
		}

		//Graphs
		.chartDivClass {
			background-color: yellow;
			width: 30px;
			z-index: 1;
			overflow-x: scroll;
			overflow-y: scroll;
		}

		.panelRenderContainerClass {
			//height:80px;
			overflow-x: auto;
			overflow-y: auto;
		}

		@media screen and (max-width: 250px and Orientation:landscape) {
			#regForm {
				background-color: purple;
				width: 100vw;
				height: 100vh;
			}
		}

		@media screen and (max-width: 650px) {
			#regForm {
				background-color: yellow;
				width: 100vw;
				height: 100vh;
			}

			.openNavClass {
				display: inline;
			}

			#mapOver {
				height: 70%;
				width: 100%;
				border: 1px solid #000;
				position: fixed;
			}


			.geolocateBut {
				background-color: GoldenRod;
				color: white;
				width: 100%;
				height: 7%;
				font-size: 18px;

			}

			.scanBut {
				background-color: Green;
				color: white;
				width: 100%;
				height: 7%;
				font-size: 18px;

			}

			.weeklyReportBut {
				background-color: aquamarine;
				color: white;
				width: 100%;
				height: 7%;
				font-size: 18px;

			}

			.geolocateBut:hover {
				opacity: 0.5;

			}

			.scanBut:hover {
				opacity: 0.5;

			}

			.weeklyReportBut:hover {
				opacity: 0.5;

			}

			.geolocateNav {
				height: 100%;
				/* 100% Full-height */
				width: 0;
				/* 0 width - change this with JavaScript */
				position: fixed;
				/* Stay in place */
				z-index: 1;
				/* Stay on top */
				//opacity:0.9;
				top: 0;
				left: 0;
				background-color: Gainsboro;
				/* #DCDCDC*/
				overflow-x: scroll;
				padding-top: 20px;
				/* Place content 60px from the top */
				transition: 0.5s;
				/* 0.5 second transition effect to slide in the sidenav */
			}

			.weeklyNav {
				//Latest to work with
				height: 70%;
				/* 100% Full-height */
				width: 0;
				/* 0 width - change this with JavaScript */
				position: fixed;
				/* Stay in place */
				z-index: 1;
				/* Stay on top */
				//opacity:0.9;
				top: 0;
				margin: auto;
				background-color: Gainsboro;
				/* #DCDCDC*/
				overflow-x: scroll;
				padding-top: 20px;
				/* Place content 60px from the top */
				transition: 0.5s;
				/* 0.5 second transition effect to slide in the sidenav */
			}




			/*
			.geolocateNav .closeNavForm {
				padding: 8px 8px 8px 32px;
				text-decoration: none;
				color: #818181;
				display: block;
				transition: 0.3s
			}
			*/
			.navFormTrans {
				background-color: white;
				margin: 0px auto;
				padding: 30px 40px;
				font-size: 13px;
				font-style: Verdana, Tahoma, sans-serif;
				height: 90%;
			}

			.navFormTrans input {
				padding: 10px;
				margin-left: 10px;
				border: 1px solid #E5E5E5;
				width: 200px;
				color: #999999;
				box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px;
				border-radius: 3px;
			}

			.searchInptClass,
			.inptSearch {
				padding: 10px;
				font-size: 13px;
				font-style: Verdana, Tahoma, sans-serif;
				box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px;
			}

			.navFormTrans,
			input:focus {
				border-color: 1px solid #C9C9C9;
				rgba(0, 0, 0, 0.2) 0px 0px 8px;
			}

			.navFormTrans,
			label {
				color: #999999;
			}


			.formButs,
			.navFormTrans {
				width: 100px;
				border-radius: 3px;
			}

			.submitBut {
				width: 100px;
				height: 40px;
				border-radius: 3px;
				color: #FFF;
			}

			.geolocateNav .closeNavForm {
				position: absolute;
				top: 0;
				right: 240px;
				font-size: 36px;
				margin-left: 50px;
				text-decoration: none;
				display: block;
				color: #818181;
			}

			.geolocateNav .navFormTrans {
				background-color: white;
				width: 100%;
				//height:100%;
				overflow-x: scroll;
			}

			.geolocateNav a:hover {
				color: #f1f1f1;
			}

			.geolocateNav .tabPres {
				//background-color:blue;
				height: 100%;
				width: 40%;
				margin-left: 20px;
				//opacity:1.0;
				//z-index: 1;
			}



			//Graphs
			.chartDivClass {
				//background-color:yellow;
				width: 500px;
				z-index: 1;
				overflow-x: scroll;
				overflow-y: scroll;
			}

			.uiFormParentNav {
				position: fixed;
				/* Stay in place */
				width: 350px;
				margin-left: 25px;
				margin-right: 25px;
				//background:#ececec;
				background: white;
				height: 0;
				/* 0 change this with JavaScript */
				z-index: 0;
				/* Stay on top */
				//opacity:0.9;
				top: 20px;
				overflow-x: scroll;
				padding-top: 30px;
				/* Place content 60px from the top */
				//animation: gradual 2s;
			}

			uiFormParentNav,
			.closeNavFormUI {
				display: block;
				position: fixed;
				/* Stay in place */
				top: 0;
				margin-left: 50px;
				font-size: 36px;
				right: 25px;
				padding-top: 30px;
				/* Place content 60px from the top */
				text-decoration: none;

			}

			.uiFormNav {
				position: relative;
				/* Stay in place */
				width: 300px;
				margin-top: 5%;
				margin-bottom: 20%;
				margin-left: 25px;
				margin-right: 25px;
				background: #ececec;
				//background:white;
				height: 35%;
				/* 0 change this with JavaScript */
				z-index: 0;
				/* Stay on top */
				//opacity:0.9;
				overflow-x: scroll;
				padding-top: 30px;
				/* Place content 60px from the top */
				animation: gradual 2s;
				//transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
				box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px;
				border-radius: 3px;

			}

			@keyframes gradual {
				from {
					background-color: Gainsboro;
				}

				to {
					background-color: white;
				}
			}


			.uiDivInpectionsNav {
				position: relative;
				/* Stay in place */
				width: 300px;
				margin-top: 20%;
				margin-bottom: 5%;
				margin-left: 25px;
				margin-right: 25px;
				background: #ececec;
				//background:white;
				height: 35%;
				/* 0 change this with JavaScript */
				z-index: 0;
				/* Stay on top */
				//opacity:0.9;
				overflow-x: scroll;
				padding-top: 30px;
				/* Place content 60px from the top */
				animation: gradual 2s;
				//transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */
				box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px;
				border-radius: 3px;
			}

			//Search
			.searchContainerClass {
				//position:absolute;
				background-color: orange;
			}

			.searchContainerClass2 {
				//position:absolute;
				background-color: orange;
				//border: 3px solid green;
				//width:50%;
				//height:220px;
				//margin: auto;

			}

			.searchInptClass .searchSelClass {
				width: 200px;
				box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 8px;
				z-index: 4;
			}

			.manu {}

			.panelRenderContainerClass {
				//height:10px;
				overflow-x: scroll;
				overflow-y: scroll;
			}
	</style>

	<script type="text/javascript"
		src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBFOxL6Hk9-663NJRQBv97tqdaImqFPbWU&sensor=false&libraries=geometry,places"></script>

	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

	<script src="http://d3js.org/d3.v3.min.js"></script>


	<script type="text/javascript">


		var statusLabGrab;

		var mapOverDisp; // i.e. the map

		var staffStr; //for sending query string for staff
		var regTLGrab;
		var regTLAGrab;
		//var regPLButAGrab;

		var numInpts = 0, numInpts2 = 0; //for creating index for unknown number of inputs in data capture form.
		var numInptsFinds = 0;
		//google.load('visualization', '1.0', {'packages': ['corechart', 'controls', 'charteditor']});
		google.charts.load('current', { packages: ['corechart'] });

		var chartEditor = null;
		var editorWrapper = null;
		var changeDataSource = null;
		var chartDataOpts = ['Insp. Type', 'Company Name', 'Findings', 'State', 'Product Class', 'Product Name', 'Sub-Class', 'Generic', 'Dosage Form', 'Strength', 'Team Lead'];
		var chartDataVals = ['InspType', 'NoC', 'Finds', 'Place', 'ProductClass', 'ProductName', 'SubClass', 'Gen', 'DosageForm', 'Strength', 'TeamLead'];


		//hsla(40,100%,50%, 0.3);

		//Global variables

		//'info' variables are data array 'get' from the xmlDocument that was returned by responseXml	
		var infoArrayLat, infoArrayLong, infoArrayPlac, infoArrayCompAdd, infoArrayContPers, infoArrayEmail, infoArrayInspType, infoArrayIcon, infoArrayIdNo, infoArrayPC, infoArraySC, infoArrayPN, infoArrayDF, infoArrayS, infoInspDate;
		var infoArrayPlacDat; //for states

		var infoArrayDet2, infoArrayIdNo2, infoArrayAuditD, infoArrayPers, infoArrayFinds, infoArrayFindsImg, infoArrayRecs, infoArrayIPs, infoArrayCDs;
		var currentIdNo; // to pass value for use in history (HistoryGenerator);

		//For querying of query xml document returned.
		var queryXMLPlac, queryXMLPC, queryXMLSC, queryXMLDF, queryXMLInspType, queryXMLFinds;
		var queryXMLLat, queryXMLLong;
		var queryXML; //the xml from query

		//Variable to prevent duplication of markers on geolocation
		var geoMarkerOver;

		//Variables for use for inputing data in geolocated icon;
		var regLatGrab, regLngGrab, regLatAGrab, regLngAGrab, regCompAddressGrab, regCompAddressAGrab, newAddGrab, regPlaceDiv, regContPersDiv, regEmailDiv, regPNDiv, regDFGrab, regStGrab, regPCDiv, regSCDiv, regGenDiv, regIconDiv;
		var regNoCDiv;
		var regNoCADiv;
		var nocSelNameDiv; // select box for choosing company, thereby ensuring company name integrity
		var nocSelNameADiv; //counterpart for Archive - select box for choosing company, thereby ensuring company name integrity
		var nocSelAddGrab; //selectbox address
		var selNoC;
		var autoArrAdd, autoArrAdd2;
		var pNSelNameDiv; //same for products

		var aniVar // for determining bounce or  null;


		var listDiv, fileDiv; //for uploading photo

		var imgDiv; // created to append image
		var transDiv; //created to append 'imgDiv'
		var cdsArray = []; //for storing cd photo filenames

		//Name references for company input and selectbox

		//Should these be initialized here
		var mapOverBounds = new google.maps.LatLngBounds();
		var mapOverBounds2 = new google.maps.LatLngBounds(new google.maps.LatLng(37.09, -95.71)); //orienting this Bounds object? You can pull this out, but if first query yields one result, user may have to zoom all the way back, or else -you'll be so close it'll seem you're in Siberia!

		var mapOverMarkerArr = []; //Keeps track of all markers on screen before specifying begins
		var mapOverMarkerArrBounce = [];

		var mapOverSpecArr = []; //keeps track of 'Det's matching the specified attributes
		var mapOverSpecArrLat = [], mapOverSpecArrLong = []; //keeps track of 'Lats' and 'Longs' within the Det[i]; used for plotting Marker

		// select boxes References
		var selOverDiv, selOverDiv2;
		var selOver2Arr = ['Misc']; //for keeping track of Inspection Type selectbox, to prevent recurrence of Options (e.g., 2 mop-ups,etc).
		var selOver2Bool = false; // boolean. If it becomes 'true', it'll allow population of selectbox.
		var selOver2BoolCheck = true;

		//CHANGES
		var trackArrSpec = [];
		var trackInspTypeNos = [];

		var boolArr = [];

		//boolArr['Mop-up'] = 0;
		var toggleBool = false;
		var inspCounter = 0;

		var arrUnsort = [];
		var arrUnsort2 = [];
		var arrUnsort3 = [];
		var arrSortProdFinds = [];
		var arrSortStates = []
		var arrSortClipped = [];
		var arrStatesClipped = [];
		var arrSortClippedDate = [];
		var arrSortClippedDate2 = [];


		//End of CHANGES

		// UI ELements for Inspection types filter
		var uiForm;
		var uiFormStates, uiDivStates;
		var uiFormScan, uiDivScan; //ui for scanned estabs;
		var stateScanForm, stateScanDiv; // for use with ternary operator in determining which ui is being plotted: states,or scan
		var radioCheckText; //for use with ternary operator to determine checkboxes for scan marker ui, and radio for states ui
		var placesBool = new Object();//for determining which icons will be visible, and which will be hidden
		var boolUiDiv = false;
		var mapOverMarkerDyn = new Object(); //for pulling out markers from the map

		// for Company Options
		var nocDataXMLDetAttr
		var nocArr = [];
		var nocArr2 = []; //for holding items that qualify for selectbox
		var nocArrClip = [];

		//for Product Name
		var pNArray = [];
		var pNArray2 = [];
		var pNArrayClip = [];
		var pNArrClip = [];

		var latArr = []; //for holding lat of selected company, and validating it against geolocated position

		//for directions
		var mapOverMarkerDirection; // for setting directions
		var mapOverBoundsDirections;
		//var txtDirectionsDiv;
		var panelRenderGrab;
		var panelRenderContainerGrab;
		var navFormDivVar;
		var navFormDivCloseVar; //if chart is closed in mobile view, it should not be reflected in PC view on expansion

		var mapOverRender;
		var markerComplexArr = [] //for keeping track of complex directions markers
		var stepInfo; //infoWindow to guide complex directions
		var renderArr = [];
		var directionsMarkerRemovalArr = []; // array for keeping track of markers for use in removing rendered directions 
		var mappableArr = [];

		//And associated counter
		var contentArrObj = new Object();
		var contentArrObjcounter = 0;
		var recentHistory2;

		var mapOverInfo //infowindow.
		var contCycle;
		var lengthStore;

		var inspTypeArr = ['Initial', 'GMP Reassessment', 'Investigation', 'Pre-Production', 'Pre-Registration', 'Production', 'Renewal', 'Routine', 'Sanction', 'Surveillance', 'Warehouse', 'Application', 'Vetted'];
		var inspTypeArrNewLine = ['Initial', 'Investigation', 'Pre-Production', 'Pre-Registration', 'Production', 'Sanction', 'Surveillance', 'Warehouse', 'Application', 'Vetted'];
		var regulatedProductsArr = ['Food', 'Drug', 'Chemical', 'Water', 'Detergent', 'Medical Device', 'Cosmetic'];
		regulatedProductsArr.sort();
		var DERSCArr = ['Antimalarial', 'Antihistamine', 'Antibiotic', 'Analgesic', 'Antipyretic', 'Antitusive', 'Multivitamin', 'Antihypertensive'];
		DERSCArr.sort();
		var DERDFArr = ['Tablet', 'Capsule', 'Vial', 'Caplet', 'Ampoule', 'Suppository', 'Syrup', 'Suspension', 'Powder', 'Liquid', 'Bolus', 'Bottle(Glass)', 'Bottle(PET)', 'Tincture', 'Sachet', 'Jelly', 'Ointment', 'Cream', 'Lotion'];
		DERDFArr.sort();
		var FSANSCArr = ['Nuts', 'Cereal', 'Grains', 'Juices', 'Drinks', 'Water', 'Tubers', 'Roots'];
		FSANSCArr.sort();
		var DERGenArr = ['Paracetamol', 'Chloroquine', 'Artemisinin', 'Codeine', 'Diazepam', 'Oxytetracycline', 'Ampicillin', 'Tetracycline', 'Ampiclox', 'Amoxicillin', 'Penicillin'];
		DERGenArr.sort();
		var FSANGenArr = ['Chips', 'Biscuits', 'Soda'];
		FSANGenArr.sort();

		var dosageDrug = ['Ampoule', 'Vial', 'Bottle(Glass)', 'Bottle (PET)'];

		var statesArr = ['Abia', 'Adamawa', 'Anambra', 'Akwa Ibom', 'Bauchi', 'Bayelsa', 'Benue', 'Borno', 'Cross River', 'Delta', 'Ebonyi', 'Enugu', 'Edo', 'Ekiti', 'FCT', 'Gombe', 'Imo', 'Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Kogi', 'Kwara', 'Lagos', 'Nasarawa', 'Niger', 'Ogun', 'Ondo', 'Osun', 'Oyo', 'Plateau', 'Rivers', 'Sokoto', 'Taraba', 'Yobe', 'Zamafara'];

		var scanRadius; //for setting radius of request object for placesService
		var scanCirc; // the circle for scan
		var scanCircArr = [];
		var scanMarkersArr = [];
		var resultsArr = [], resultsArr2 = []; //used to collate types of scanned markers, for use in ArrayFix GUI formation
		var geoPositionArr = [];
		var geoFreedom; //for circling area of allowable resetting of marker by human, based on position.coords.accuracy


		var DirectDoneGrab; //buttons in infowindows used to end remote scan
		var remoteScanGrab;//button in infowindow used to activate remote scan
		var watchId; //for clearing watchPosition with clearWatch()

		var queryForm2Grab;
		var radioParamOr, radioParamAnd;
		var radioCounter = 0;
		var tableRowCounter = 0;
		var queryTable; //for holding elements of queryForm
		var queryButton;
		var queryTabOverGrab;
		var queryTabOverSubGrab;
		var queryTab;

		var regPLButGrab;// grabs add product line button
		var regPLButAGrab; //counterpart to above:grabs add product line button

		var regFormGrab; // Grabs form for use in capturing data at point of geolocation
		var regRecomm;
		var regRecommGrab; // for use to insertBefore()

		var regPlaceGrab; // for populating states.
		var regPlaceAGrab;// counterpart to above: for populating states.

		var regFormTabGrab, regFormTabAGrab, regPLRowGrab, regRowPNGrab, regCellPLGrab, regCellPNGrab, regCellPNSelGrab, regCellSCGrab, regCellStGrab, tempNameNewProdLine, inptProdlineChangeBool = true, regFormTabRowAGrab, regFormTabRowAGrab, FindsRow, divAddPL, newRegPLGrab, newRegPLGrabBool = true, newRegPNGrab, newRegPNGrabBool = true, newRegPNGrabBool2 = true, newRegPNGrabBool2Another = true;
		var geoDivGrab;
		var geoDivAGrab;//counterpart to above (the parent div for holding the input form for Archive)

		var recentHistoryDivGrab; //for appending FindsImg div in setContent of infoWindow

		var surveySelGrab;
		var survFormGrab;
		var survDivGrab;
		var radSurvSCGrab;
		var radSurvGenGrab;

		var surveyDualSel;

		var surveyInfo;
		var surveyArray = ['Water', 'Food', 'Drug', 'Chemical', 'Detergents', 'Nacortic'];
		var survRadioDivs; //div for holding survey radios
		var surveyTADiv;

		var resultQuery;
		var sortedResultQuery;
		var MEInfo // infoWindow for M&E



		var data;//for dataTable

		var sCW;

		var inptBreak10;// for testing the existence of break in DER menu

		var DERCounter = 0, FSANCounter = 0;
		var regRegProdGrab;
		//var regDFGrab;

		var MEDashboardGrab;

		//var transitName; // for temporarily storing name of PL to compare whether or not to reboot
		var numInptsArr = [];

		var pLNodefunc;
		var pLNodefunc2;
		var pLName;
		var pRName;
		//var PRObject;
		var divAddProduct;

		var partialName;
		var pLNodeNamePrefix; //used in for renaming nested findings in products

		var xmlDoc;
		var XMLHttpRequestObj = false;
		var XMLHttpRequestObj2 = false;
		var xmlAuto, xmlAuto2Det;
		var getProduct;
		var enumerateFindingsCounter = 0;

		if (window.XMLHttpRequest) {
			XMLHttpRequestObj = new XMLHttpRequest();
			XMLHttpRequestObj2 = new XMLHttpRequest();
			// alert ('Using Mozilla stuff; Okay, we are on a roll!');
		} else {
			XMLHttpRequestObj = new ActiveXObject('Microsoft.XMLHTTP');
			XMLHttpRequestObj2 = new ActiveXObject('Microsoft.XMLHTTP');
			alert('Using Explorer Stuff');
		}

		var polyObj;

		var XMLHttpRequestObj5;
		var productLineArr, productLineArr2, productArr, productArr2, productArrWhole, productArrWhole2, productArrWhole2, productArrWhole2NRN, productArrWholeAlt3, productArrWholeAlt2, productArrWholeAlt3NRN, prodArr, prodArr2, c, strengthArr, strengthArr2, nrnArr, nrnArr2, retFindsGMPArr2, productLineFindsArr; //findsGMPArr, findsGMPArr2,
		var regPLGrab;
		var companyAddy, companyLat, companyLng, emailAddy, contactPersVal, stateVal; //for getting address for use in autofill
		var regEmailGrab, regContPersGrab;
		var regEmailAGrab; //counterpart to regEmailGrab;
		var PLStoredName, PNStoredName, StStoredName;
		var FindsTable;
		var FindsTableDiv;
		var ReconcileProdAndFindsBool = true;
		var navFormDiv;
		var navFormDivTrans;


		//For searching
		var searchInptGrab;
		var searchSelGrab;
		var XMLHttpRequestObj6;

		var exaGrab;
		var dixaGrab;

		var xmlAutoSearchComp;
		var searchCompanyArr; //for storing company that qualify in main search
		var searchCompanyArr2;
		var searchCompanyArr3;
		var arrSortClippedDateSearch;
		var arrSortClippedDateSearch2;
		var arrSortClippedSearch;

		var reconcileButGrab;
		var scanButGrab;
		var XMLHttpRequestObj7;
		var barChartsGrab;
		var pieChartsGrab;
		var FindPlacesAcceptableArr;

		var navUIFormGrab; //Div to hold States UI
		var uiDivInspGrab; //Div to hold inspections UI
		var navUIFormParentGrab;

		var searchContainerGrab;
		var searchContainerGrab2;

		var timesSymbolUI;

		var inputStyle;

		var mapOverDiv;

		var inptsSearchGrab;

		var headerBarGrab;

		var bottomNumber;
		var heightNumber;

		var stateScanParentGrab;
		//var chartDivGeneral;
		//var chartCellGeneral;
		//var chartDivGrab;
		//var chartDiv2Grab;
		var inspScanParentGrab;

		var chartCellGrab;
		var timesSymbol;
		var panelCellGrab;

		var geoMarkerOverInfo;

		//var chartDivGrabBut; //for use in closing Charts when done viewing
		var panelRenderContainerGrabBut;

		var chartCellClassGroupCounter = 0; //counter for use in re-integrating charts into table of body in PC view
		var chartBarStates;
		var chartPieStates;

		var chartDivClassGroup;
		var chartCellClassGrab1;
		var chartCellClassGrab2;

		var chartDisplayArr = []; //for pushing in displayed arrays and calling clearChart() on each to remove them.
		var chartDisplayButArr = []; //for pushing in and removing 'Done' buttons.

		var phoneSize = false;

		var dashWeeklyGrab;
		var objDoc;
		var objDoc2;
		var dashBoardDiv; //for UI creation holding State radios
		var stateDiv;
		var inspectionDiv;
		var checkboxArr = [];
		var checkboxArr2 = [];
		var markerCollection = [];
		var markerCollection2 = []; //carrying qualified markers
		var markerWatch; //for clearing Tracker marker in New Tracker Function (end of code);
		var watchIdNew;
		var renderArrNew = []; //for collecting new renders
		var markerCurrentPositionNewArr = []; //for collecting and removing geolocation marker
		var circlePolyArr = []; //for removing poly, particularly the one used for Scan;
		var scanArr = []; //for removing scan result markers
		var regCompAddressBool = true; //boolean used with new button (for new address)
		var regCompAddressBoolA = true; //counterpart for Archive -boolean used with new button (for new address)

		var loaderContainerGrab; //css loader
		var complianceChartGrab;
		var compFilterGrab; compFilterGrab
		var adjustWeeklyVar; // for POSTing in retrieving weekly and more than weekly report
		var histChart;
		var infoObj = {}; //for storing marker CompanName and Address info (for use in compliance Charting)
		var dashboardaGrab;
		var newDivIdGrab;

		//google.charts.load('current', {packages: ['bar', 'controls', 'charteditor']});									

		//var chartBar;
		//var chartPie;

		//var inptProdLine, inptProdLineDF;
		var defaultSubTabGrab;
		var newDivIdGrab;
		var editPass;

		var newDivGrab;
		var selectTypeChildValsIdGrab;

		var combinateGrab;
		var complianArr = ['Critical', 'Major', 'Minor', 'Other', 'Resolve'];
		var nrnArr = ['Reg', 'UnReg'];

		var dispInspectorGrab;
		var dispInspectionGrab;
		var dispInspectorInspnAllGrab;
		var dispInspectorInspnPendGrab;
		var dispInspectorInspnNowGrab;
		var dispInspectorInspnPendGrab;
		var assignHistoryGrab;
		var dispPLGrab;
		var dispAddressGrab;

		var inspectionMapGrab;
		var inspectionMapDisp;
		//var inspectionMarker
		var inspectionMarkersArr;
		var checkInspectionGrab;
		var inspectionTypeGrab;
		var toInspectionTypeGrab;

		var allInspectionsGrab;

		var assignResult; //an array
		var deAssignResult;

		var objDoc2Filtered;

		var dispPLGrab;

		var objDoc2Again;
		var inspectorObject = {};

		var prodCatGrab;
		var nowInspectionsGrab;

		var staTypeGrab;
		var fromDateLimitGrab;
		var toDateLimitGrab;

		var objInspectionsPending = {};

		var assignButGrab;
		var inspIDArr = {};

		var objPending;
		var objDoc2Scheduler;

		var deCommitGrab;


		function StartOver() {
			console.log('We have started');
			newDivIdGrab = document.getElementById('newDivId');
			var defaultTabGrab = document.getElementById('defaultTab');
			defaultTabGrab.click();

			defaultSubTabGrab = document.getElementById('defaultSubTab');
			defaultSubTabGrab.click();

			/*
			if (navigator.serviceWorker){
				navigator.serviceWorker.register('overSightSW.js');
			}
			*/

			uiForm = document.createElement('form');
			uiFormStates = document.createElement('form');
			uiFormScan = document.createElement('form');


			//Setting up the map
			navFormDiv = document.getElementById("navForm");
			//searchContainerGrab = document.getElementById('searchContainer');
			exaGrab = document.getElementById('exa');
			dixaGrab = document.getElementById('dixa');
			//navFormDiv.innerHTML = "<input type = 'text' value ='There is nothing' id = 'navFormInpt'/>";
			mapOverDiv = document.getElementById('mapOver');
			var mapOverOpts = {
				center: new google.maps.LatLng(9, 9),
				zoom: 7,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			}
			mapOverDisp = new google.maps.Map(mapOverDiv, mapOverOpts);


			//Adding query event
			var infoQuery = new google.maps.InfoWindow();
			google.maps.event.addListener(mapOverDisp, 'click', function (e) {

				//alert('Clicked me!');
				if (infoQuery) {

					infoQuery.setPosition(new google.maps.LatLng(e.latLng.lat(), e.latLng.lng()));
					infoQuery.open(mapOverDisp);
					alert(queryForm);
					alert(queryForm.elements.length);
					if (!queryForm.elements.length) {
						alert('Running query...');
						HalfQuery();
					}
					infoQuery.setContent(queryForm);
					mapOverDisp.setCenter();
				}
			});


			google.maps.event.addListener(mapOverDisp, 'rightclick', function (e) {
				console.log('Creating survey infowindow...');
				if (!surveyInfo) {
					surveyInfo = new google.maps.InfoWindow();
				}
				surveyInfo.setContent('<form id = "survForm"><div id="survDiv"><select name="surveySel" id="surveySel"></select></div></form>');
				surveyInfo.setPosition(new google.maps.LatLng(e.latLng.lat(), e.latLng.lng()));
				surveyInfo.open(mapOverDisp);
				survFormGrab = document.getElementById('survForm');
				survDivGrab = document.getElementById('survDiv');
				surveySelGrab = document.getElementById('surveySel');
				surveySelGrab.addEventListener('change', function () { SendSurvery(); });
				for (var a = 0; a < surveyArray.length; a++) {
					surveySelGrab.options[a] = new Option(surveyArray[a]);
					surveySelGrab.options[a].value = surveyArray[a];
				}

				//surveyInfo.open(mapOverDisp, new google.maps.LatLng(e.latLng.lat(), e.latLng.lng()));
			});

			//var polyPoints = [new google.maps.LatLng(9,9), new google.maps.LatLng(10,11), new google.maps.LatLng(12,13), new google.maps.LatLng(9,9)];
			polyObj = new google.maps.Polygon({ strokeColor: '#FF0000', fillColor: '#FF0000', draggable: true });
			//polyObj.setMap(mapOverDisp);
			//Names, not ids, so they are arrays actually


			//for alternative select box 'CompanyOptions2'
			//var s =document.createElement('select');
			//s.setAttribute('size','4');
			//document.getElementsByTagName('body')[0].appendChild(s);

			//for uploading photo
			fileDiv = document.getElementById('file');
			listDiv = document.getElementById('list');

			//Directions
			//txtDirectionsDiv=document.getElementById('txtDirections');
			stepInfo = new google.maps.InfoWindow();
			mapOverBoundsDirections = new google.maps.LatLngBounds();


			queryTabOverGrab = document.getElementById('queryTabOver');



			//survDivGrab = document.getElementById('survDiv');
			radSurvSCGrab = document.getElementById('radSurvSC');
			radSurvGenGrab = document.getElementById('radSurvGen');
			surveyTADiv = document.createElement('div');
			MEDashboardGrab = document.getElementById('MEDashboard');

			//var geoDivGrab = document.getElementById('geoDiv');
			//document.body.appendChild(geoDivGrab);


			navFormDivTrans = document.createElement('div');
			navFormDivTrans.setAttribute('class', 'navFormTrans');


			scanButGrab = document.getElementById('scanBut');
			scanButGrab.addEventListener('click', function () {
				GeolocateOver('gmpScan');
			});


			//barChartsGrab = document.getElementById('Charts');
			//pieCharts2Grab = document.getElementById('Charts2');

			//Creating UI Div (States, inspections) for mobile

			navUIFormParentGrab = document.createElement('div');
			navUIFormParentGrab.setAttribute('class', 'uiFormParentNav');

			navUIFormGrab = document.createElement('div');
			navUIFormGrab.setAttribute('class', 'uiFormNav');

			uiDivInspGrab = document.createElement('div');
			uiDivInspGrab.setAttribute('class', 'uiDivInpectionsNav');


			//Search
			searchContainerGrab = document.createElement('div');
			searchContainerGrab.setAttribute('id', 'searchContainer');
			searchContainerGrab.setAttribute('class', 'searchContainerClass');

			searchContainerGrab2 = document.createElement('div');
			searchContainerGrab2.setAttribute('id', 'searchContainer2');
			searchContainerGrab2.setAttribute('class', 'searchContainerClass2');

			searchInptGrab = document.createElement('input');
			searchInptGrab.setAttribute('id', 'searchInpt');
			searchInptGrab.setAttribute('name', 'searchInpt');
			searchInptGrab.setAttribute('class', 'searchInptClass');
			searchInptGrab.setAttribute('placeholder', 'Search...');
			searchInptGrab.style.zIndex = '1';


			//searchSelGrab = document.createElement('select');
			//searchSelGrab.setAttribute('id', 'searchSel');
			//searchSelGrab.setAttribute('class', 'searchSelClass');

			searchContainerBrk = document.createElement('br');


			searchContainerGrab.appendChild(searchInptGrab);
			searchContainerGrab.appendChild(searchContainerBrk);
			//searchContainerGrab.appendChild(searchSelGrab);
			searchContainerGrab.appendChild(searchContainerGrab2);


			//<span style="font-size:30px;cursor:pointer" onclick="openNav()">&#9776; open</span>

			//var navOpen = document.createElement('span');
			//navOpen.setAttribute('id', 'navOpenId');

			//document.body.insertBefore(searchContainerGrab, mapOverDiv);
			//document.body.insertBefore(searchContainerGrab, mapOverDiv);

			searchInptGrab.onblur = function () {
				while (inptsSearchGrab.length) {
					console.log('REMOVING INPUT');
					document.body.removeChild(inptsSearchGrab[0]);
				}
			}

			searchInptGrab.onkeyup = function () {
				console.log('Clicked2 the Search...');
				console.log(this);
				SearchFunc(this);
			}

			headerBarGrab = document.getElementById("headerBar");
			headerBarGrab.appendChild(searchContainerGrab);// or do I just use searchInptGrab

			stateScanParentGrab = document.getElementById('stateScanParent');

			//chartDivGrab = document.getElementById('chartDiv');
			//chartDiv2Grab = document.getElementById('chartDiv2');

			inspScanParentGrab = document.getElementById('inspScanParent');

			chartCellGrab = document.getElementById('chartCell');
			chartCell2Grab = document.getElementById('chartCell2');
			panelCellGrab = document.getElementById('panelCell')
			/*
			searchSelGrab.onchange = function () {
			
				console.log ('Length of Marker Array: '+mapOverMarkerArr.length);
				
				
				//for (var a=0; a<mapOverMarkerArr.length;a++) { //if there are none, length=0, and it won't run
					//console.log('REMOVING...!');
					//mapOverMarkerArr[a].setMap(null);
				//}
				
				
				console.log('Changing...');
				console.log(searchSelGrab.options[searchSelGrab.options.selectedIndex].text);
				
				var xmlAutoSearchCompSel = xmlAutoSearchComp.getElementsByTagName('Det');
				console.log(xmlAutoSearchCompSel);
				FilterCompany(xmlAutoSearchCompSel, searchSelGrab.options[searchSelGrab.options.selectedIndex].text);
			}
			
		*/

			dashWeeklyGrab = document.getElementById('dashWeekly');
			geoDivGrab = document.getElementById('geoDiv');
			loaderContainerGrab = document.getElementById('loaderContainer');
			alert(loaderContainerGrab);
			dashboardaGrab = document.getElementById('dashboarda');
			newDivIdGrab = document.getElementById('newDivId');
			InspectionProfile();
			Dashboards();
			combinateGrab = document.getElementById('combinate');
			combinateGrab.addEventListener('click', combinate);

			staTypeGrab = document.getElementById('staType');
			statesArr.forEach((a, b) => {
				staTypeGrab.options[b] = new Option(a);
			});
			staTypeGrab.value = 'Ogun';

			staTypeGrab.addEventListener('change', function () {
				console.log(dispInspectorGrab.options);
				dispInspectorGrab.options = []; //resetting size of the select.
				while (dispInspectorGrab.options.length) {
					dispInspectorGrab.remove(0);
				}

				while (dispInspectionGrab.options.length) {
					dispInspectionGrab.remove(0);
				}

				while (dispPLGrab.options.length) { //clearing productionLine list
					dispPLGrab.remove(0);
				}
				InspectorsBring(staTypeGrab.value, inspectionTypeGrab.value, fromDateLimitInspectorGrab.value, toDateLimitInspectorGrab.value);
				InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value, false); //the false is objDecommit
			});

			console.log(inspectionTypeGrab);
			inspectionTypeGrab = document.getElementById('inspectionType');
			toInspectionTypeGrab = document.getElementById('toInspectionType');
			/*
			inspTypeArr.forEach((a, b)=>{
				inspectionTypeGrab.options[b] = new Option(a);
			});
			*/
			dispInspectorGrab = document.getElementById('dispInspector');
			dispInspectionGrab = document.getElementById('dispInspection');
			dispInspectorInspnAllGrab = document.getElementById('dispInspectorInspnAll');
			dispInspectorInspnPendGrab = document.getElementById('dispInspectorInspnPend');
			dispInspectorInspnNowGrab = document.getElementById('dispInspectorInspnNow');
			dispInspectorInspnPendGrab = document.getElementById('dispInspectorInspnPend');
			assignHistoryGrab = document.getElementById('assignHistory');
			dispPLGrab = document.getElementById('dispPL');
			dispAddressGrab = document.getElementById('dispAddress');

			fromDateLimitGrab = document.getElementById('fromDateLimit');
			console.log('Adding date...');
			var day = String(new Date().getDate()).padStart(2, 0);
			var month = String(new Date().getMonth() + 1).padStart(2, 0);
			var year = new Date().getFullYear();
			var date = year + '-' + month + '-' + day;
			console.log(date);
			console.log(fromDateLimitGrab);
			//fromDateLimitGrab.value = date;
			//fromDateLimitGrab.

			toDateLimitGrab = document.getElementById('toDateLimit');
			toDateLimitGrab.value = date;

			var fromDateLimitInspectorGrab = document.getElementById('fromDateLimitInspector');
			fromDateLimitInspectorGrab.value = date;
			var toDateLimitInspectorGrab = document.getElementById('toDateLimitInspector');
			toDateLimitInspectorGrab.value = date;

			inspectionTypeGrab.addEventListener('change', function () {
				InspectionBring(inspectionTypeGrab.value, fromDateLimit.value, toDateLimitGrab.value, staTypeGrab.value, false, false);
			});

			fromDateLimitGrab.addEventListener('change', function () {
				alert('Change_-------------------- event fired!');
				//Initializing inspectorObject to wipe out assigned inspections
				Object.keys(inspectorObject).forEach(objProperty => {
					inspectorObject[objProperty] = [];
				});

				Object.keys(objInspectionsPending).forEach(objProperty => {
					objInspectionsPending[objProperty] = [];
				});


				dispInspectorGrab.options[0].click();
				console.log(dispInspectorGrab);
				console.log(dispInspectorGrab.options[0]);



				//disabling assigned companies
				//var disabledOptions = grabDisabledOptions(dispInspectionGrab);

				alert('Changed from');
				while (dispInspectionGrab.options.length) {
					dispInspectionGrab.remove(0);
				}

				while (dispPLGrab.options.length) {
					dispPLGrab.remove(0);
				}
				InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value, false);

			});

			fromDateLimitGrab.value = "2018-09-17";
			/*
						function grabDisabledOptions(dispInspectionGrab2) {
							var optionsGrab = Array.from(dispInspectionGrab2.options);
							var disabledOptions = optionsGrab.filter(arrItem => {
								return arrItem.disabled;
							});
							return disabledOptions;
						}
			
						function disableOptions(dispInspectionGrab2, disabledOptions2) {
							alert('Inside the func');
							console.log(dispInspectionGrab2);
							console.log(disabledOptions2);
							Array.from(dispInspectionGrab2.options).forEach((arrItem, i) => {
								disabledOptions2.forEach(disabledOption => {
									if (arrItem.innerHTML == disabledOption.innerHTML) {
										console.log(arrItem.innerHTML, disabledOption.innerHTML);
										arrItem.disabled = true;
										dispInspectionGrab2.options[i].disabled = true;
										console.log(arrItem);
									}
									console.log(arrItem.innerHTML, disabledOption.innerHTML);
			
								});
								console.log('Outside disabledOptions2');
			
							})
							console.log('Outside dispInspectionGrab2');
						}
						*/

			toDateLimitGrab.addEventListener('change', function () {
				console.log('Changed to...');
				while (dispInspectionGrab.options.length) {
					dispInspectionGrab.remove(0);
				}

				while (dispPLGrab.options.length) {
					dispPLGrab.remove(0);
				}
				InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value);
			});

			//empty the select
			InspectorsBring(staTypeGrab.value, inspectionTypeGrab.value, fromDateLimitInspectorGrab.value, toDateLimitInspectorGrab.value);

			//InpsectorChartD3([20, 30, 40, 60, 90]);


			inspectionMapGrab = document.getElementById('inspectionMap');
			inspectionMapOpts = {
				center: new google.maps.LatLng(9, 9),
				zoom: 2,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			}
			inspectionMapDisp = new google.maps.Map(inspectionMapGrab, inspectionMapOpts);
			/*
			checkInspectionGrab = document.getElementsByClassName('checkInspection');
			
			console.log(checkInspectionGrab);
			Array.from(checkInspectionGrab).forEach(cb=>{
				console.log('Clicked check...');
				cb.addEventListener('click', function (){
					Array.from(checkInspectionGrab).forEach(cb2 =>{
						console.log('Deactivating check...');
						cb2.checked = false;
					});
					this.checked = true;
					console.log('Calling bringingInspections...');
					console.log(this);
					console.log(this.value);
					console.log(dispInspectorGrab.value);
					bringingInspections(dispInspectorGrab.value, this.value);
				});
			});
			*/
			allInspectionsGrab = document.getElementById('allInspections');
			allInspectionsGrab.click();

			dispPLGrab = document.getElementById('dispPL');

			//populating toInspectionType select item.
			inspTypeArr.forEach((arrItem, i) => {
				toInspectionTypeGrab.options[i] = new Option(arrItem);
			});

			prodCatGrab = document.getElementById('prodCat');

			//nowInspections.click();
			pendingInspections.addEventListener('click', function () {
				var dispInspectorGrabArr = Array.from(dispInspectorGrab.options).map((arr, i) => {
					return arr.innerHTML;
				});
				pendingInspectorsBring(staTypeGrab.value, dispInspectorGrabArr, fromDateLimitGrab.value, toDateLimitGrab.value);
			});

			//pendingInspections.click();

			console.log(dispInspectorGrab);
			console.log(dispInspectorGrab.value);
			console.log(dispInspector.value);
			//console.log(dispInspectorGrab.options[0].innerHTML);

			console.log(fromDateLimitGrab.value);

			assignButGrab = document.getElementById('assignBut');

			deCommitGrab = document.getElementById('deCommit');
			deCommitGrab.addEventListener('click', DeCommitInspection);
			InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value, false);

		}//end of StartOver



		function popOver(filteredInsp) {

			//Clearing directions markers if any

			for (var a = 0; a < renderArr.length; a++) { //removing all rendering of directions, if any.  If none, length will be zero, so it won't even run,as in enter the loop.
				renderArr[a].setMap(null);
			}


			//Pulling from database
			if (XMLHttpRequestObj) {
				selOverDiv = document.getElementById('selOver');
				XMLHttpRequestObj.open('GET', 'SearchAjaxRandRInterfaceNoC3', true);
				XMLHttpRequestObj.responseType = 'json';
				XMLHttpRequestObj.send();

				//XMLHttpRequestObj.open('POST', 'SearchAjaxRandRInterfaceNoC3', true);
				//XMLHttpRequestObj.setRequestHeader('Content-Type','application/x-www-form-urlencoded');

				XMLHttpRequestObj.onreadystatechange = function () {
					if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {
						objDoc = XMLHttpRequestObj.response;
						console.log('This is returned to the client ' + xmlDoc)
						console.log(objDoc);

						DashBoardUI(objDoc);

						UIDashboard(objDoc);

						var xmlDocArr = [];
						//xmlDocStreamLine(xmlDoc);

						/*
						infoArrayNoC = xmlDoc.getElementsByTagName('Det');
						infoArrayLat = xmlDoc.getElementsByTagName('Latitude');
						infoArrayLong = xmlDoc.getElementsByTagName('Longitude');
						infoArrayPlac = xmlDoc.getElementsByTagName('State');
						infoInspDate = xmlDoc.getElementsByTagName('InspDate')
						infoArrayIcon = xmlDoc.getElementsByTagName('Icon');
						infoArrayCompAdd = xmlDoc.getElementsByTagName('CompanyAddress');
						infoArrayInspType = xmlDoc.getElementsByTagName('InspType');
						
						infoArrayPN = xmlDoc.getElementsByTagName('ProductName');
						infoArrayPC= xmlDoc.getElementsByTagName('ProductClass');
						infoArraySC= xmlDoc.getElementsByTagName('SubClass');
						infoArrayGen= xmlDoc.getElementsByTagName('Gen');
						infoArrayFinds = xmlDoc.getElementsByTagName('Finds');
						infoArrayFindsImg = xmlDoc.getElementsByTagName('FindsImg');
						
						
						infoArrayDF = xmlDoc.getElementsByTagName('DosageForm');
						infoArrayS = xmlDoc.getElementsByTagName('Strength');
						infoArrayContPers = xmlDoc.getElementsByTagName('ContactPerson');
						infoArrayEmail = xmlDoc.getElementsByTagName('ContactEmail');
						infoArrayIdNo = xmlDoc.getElementsByTagName('Det');
						
						
						arrSortClipped = [];//to avoid duplication of inspection type inspection interface
						LoadsUIStates();
		
						if (mapOverMarkerArr.length) {
							ClearMarkers(trackArrSpec);
						}
		//
						
						//Assigning name of companies into Array nocArr
			
						for (var a=0; a<infoArrayNoC.length; a++) {
							var nocDataXMLDetAttr = infoArrayNoC[a].getAttribute('NoC');
							nocArr.push(nocDataXMLDetAttr);
						}
						nocArr.sort(); //sorting same in alphabetical order
						
						console.log('This is nocArr: ' + nocArr);
						
						nocArrClip = NoCClip(nocArr);
						
					
						for (var a=0;a<infoArrayNoC.length;a++) {
							for (var b=0;b<nocArrClip.length;b++) {
								if (nocArrClip[b] ==infoArrayNoC[a].getAttribute('NoC')) {
									pNArray.push(infoArrayPN[a].firstChild.data);
									console.log('Entered here.');
								}
								console.log('This prints how many times?'); //should be 72
							}
							
						}
						
						console.log('Product array contains ' + pNArray);
						console.log('Length is ' + pNArray.length );
						
						pNArrayClip = NoCClip(pNArray);
						console.log('Products array after clip ' + pNArrayClip);
						
						console.log('This is nocArrClip: ' + nocArrClip);
						*/
					} else {
						//alert (XMLHttpRequestObj.readyState + ',' + XMLHttpRequestObj.status);
					}

				}//end of anonymous function


			}

		}//End of popOver



		function AdjustWeekly(this2) {
			console.log('Calling', this2.value);
			adjustWeeklyVar = this2.name + '=' + this2.value;
			var adustWeeklyXmlObj = new XMLHttpRequest();
			console.log(adjustWeeklyVar);

			//Clearing directions markers if any

			for (var a = 0; a < renderArr.length; a++) { //removing all rendering of directions, if any.  If none, length will be zero, so it won't even run,as in enter the loop.
				renderArr[a].setMap(null);
			}


			//Pulling from database

			selOverDiv = document.getElementById('selOver');
			adustWeeklyXmlObj.open('GET', 'SearchAjaxRandRInterfaceNoC3' + '?' + adjustWeeklyVar, true);
			adustWeeklyXmlObj.responseType = 'json';
			adustWeeklyXmlObj.send(null);

			adustWeeklyXmlObj.onreadystatechange = function () {
				if (adustWeeklyXmlObj.readyState == 4 && adustWeeklyXmlObj.status == 200) {
					objDoc = adustWeeklyXmlObj.response;
					console.log('This is returned to the client ' + xmlDoc)
					console.log(objDoc);

					DashBoardUI(objDoc);

					UIDashboard(objDoc);

					var xmlDocArr = [];

				} else {
					//alert (XMLHttpRequestObj.readyState + ',' + XMLHttpRequestObj.status);
				}

			}//end of anonymous function

		}//End of popOver


		function DashBoardUI(objDoc2) {
			var arrSort = [];
			var arrSort2 = [];
			console.log('Outlying...');
			console.log(objDoc2);

			for (var a = 0; a < objDoc2.length; a++) {
				for (var b in objDoc2[a]) {
					if (objDoc2[a].hasOwnProperty(b)) {
						for (var c in objDoc2[a][b]) {
							if (objDoc2[a][b].hasOwnProperty(c)) {
								arrSort.push((objDoc2[a][b][c].State));
							}
						}
						//arrSort.push((objDoc2[a][b].State));

					}
				}

			}

			arrSort2 = ArrayFix(arrSort);
			console.log('Objectivised1 array: ');
			console.log(arrSort2);
			DashBoardUIForm(arrSort2);
		}

		function DashBoardUI2(objDoc2, statePara, paraStr) {
			console.log('Value of statePara: ' + statePara);
			var arrSort = [];
			var arrSort2 = [];
			console.log('Outlying...');
			console.log(objDoc2);
			for (var u = 0; u < markerCollection.length; u++) { //clearing map in preparation for new markers
				markerCollection[u].setMap(null);
			}
			markerCollection = [];


			console.log('Bringing out inspections...!');
			for (var a = 0; a < objDoc2.length; a++) {
				for (var b in objDoc2[a]) {
					if (objDoc2[a].hasOwnProperty(b)) {
						for (var bc in objDoc2[a][b]) {
							if (objDoc2[a][b].hasOwnProperty(bc)) {
								if (objDoc2[a][b][bc].State == statePara) {
									for (var c in objDoc2[a][b][bc]) {
										if (objDoc2[a][b][bc].hasOwnProperty(c)) {
											if (typeof objDoc2[a][b][bc][c] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c]))) { //Locating ProductLines
												for (var d in objDoc2[a][b][bc][c]) {
													if (objDoc2[a][b][bc][c].hasOwnProperty(d)) {
														if (typeof objDoc2[a][b][bc][c][d] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c][d]))) { //Locating dates
															for (var e in objDoc2[a][b][bc][c][d]) {
																if (objDoc2[a][b][bc][c][d].hasOwnProperty(e)) {
																	if (typeof objDoc2[a][b][bc][c][d][e] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c][d][e]))) {//locating inspections
																		console.log('Pushing: ' + e);
																		arrSort.push(e);
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

			}

			arrSort2 = ArrayFix(arrSort);
			console.log('Objectivised array: ');
			console.log(arrSort2);
			DashBoardUIForm2(arrSort2, statePara, paraStr);
		}


		function DashBoardUIForm(arrSort2Passed) {
			console.log(dashBoardDiv);

			if (dashBoardDiv) {
				dashWeeklyGrab.removeChild(dashBoardDiv);
			}
			dashBoardDiv = document.createElement('div');

			if (dashBoardDiv.children.length) { //if it contains stateDiv; assuming stateDiv is the only node added
				//dashWeeklyGrab.removeChild(dashBoardDiv);
				dashBoardDiv.removeChild(stateDiv);
			}

			stateDiv = document.createElement('div');
			stateDiv.setAttribute('id', 'StateDiv');
			for (var a = 0; a < arrSort2Passed.length; a++) {
				var stateInput = document.createElement('input');
				stateInput.setAttribute('type', 'radio');
				stateInput.setAttribute('id', arrSort2Passed[a]); //using state for the id
				stateInput.setAttribute('name', 'stateRadio');
				stateInput.addEventListener('click', function () {
					console.log(this.id);
					DashBoardUI2(objDoc, this.id, 'InspectionType');
				});
				var stateLab = document.createElement('label');
				stateLab.innerHTML = (arrSort2Passed[a] + "(" + arrSort2Passed[arrSort2Passed[a]] + ")");

				stateDiv.appendChild(stateLab);
				stateDiv.appendChild(stateInput);

				dashBoardDiv.appendChild(stateDiv);

				//stateInput.setAttribute();

			}

			dashWeeklyGrab.appendChild(dashBoardDiv);//append to document
		}

		function DashBoardUIForm2(arrSort2Passed, statePara, paraStr2) {
			console.log(dashBoardDiv);
			console.log(statePara);

			if (inspectionDiv) {
				dashBoardDiv.removeChild(inspectionDiv);
			}

			console.log('Forming something...');
			console.log(statePara);
			inspectionDiv = document.createElement('div');
			inspectionDiv.setAttribute('id', 'Inspection Div')
			for (var a = 0; a < arrSort2Passed.length; a++) {
				var inspectionInput = document.createElement('input');
				inspectionInput.setAttribute('type', 'checkbox');
				inspectionInput.setAttribute('id', arrSort2Passed[a]); //using inspection for the id
				inspectionInput.setAttribute('name', 'inspectionRadio');
				inspectionInput.addEventListener('click', function () {
					checkboxArr2 = [];
					console.log(this.id);
					checkboxArr2 = CheckChecked(this.parentNode);
					Plot(objDoc, statePara, this.id, checkboxArr2); //DashBoardUI and DashBoardUIForm almost call themselves recursively
				});
				var inspectionLab = document.createElement('label');
				inspectionLab.innerHTML = (arrSort2Passed[a] + "(" + arrSort2Passed[arrSort2Passed[a]] + ")");

				inspectionDiv.appendChild(inspectionLab);
				inspectionDiv.appendChild(inspectionInput);

				//stateInput.setAttribute();

			}
			dashBoardDiv.appendChild(inspectionDiv);

			//dashWeeklyGrab.appendChild(dashBoardDiv);//append to document
		}

		function CheckChecked(parentDiv) {
			checkboxArr = [];
			console.log(parentDiv);
			for (var a = 0; a < parentDiv.children.length; a++) {
				if (parentDiv.children[a].checked) {
					console.log(parentDiv.children[a].id);
					checkboxArr.push(parentDiv.children[a].id);
				}
			}

			return checkboxArr;
		}

		function Plot(objDoc2, ParaStr3, inspectionName, checkboxArr2) {
			console.log('Plot object...');
			console.log(checkboxArr2);
			console.log('Length of markerCollection: ' + markerCollection.length);
			var objPlot = []; //
			for (var a = 0; a < objDoc2.length; a++) {
				for (var b in objDoc2[a]) {
					if (objDoc2[a].hasOwnProperty(b)) {
						console.log('Entered company');
						//console.log(objDoc2[a][b].State, ParaStr3);
						for (var bc in objDoc2[a][b]) {
							if (objDoc2[a][b].hasOwnProperty(bc)) { //entered address
								if (typeof objDoc2[a][b][bc] == 'object' && (!Array.isArray(objDoc2[a][b][bc]))) {
									if (objDoc2[a][b][bc].State == ParaStr3) {
										for (var c in objDoc2[a][b][bc]) {
											if (objDoc2[a][b][bc].hasOwnProperty(c)) { //entering dates
												console.log('Dates');
												console.log(c);
												if (typeof objDoc2[a][b][bc][c] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c]))) { //Locating ProductLines
													//console.log('Entered ProductLines');
													for (var d in objDoc2[a][b][bc][c]) {
														if (objDoc2[a][b][bc][c].hasOwnProperty(d)) { //entering product lines
															console.log('Entered PL');
															if (typeof objDoc2[a][b][bc][c][d] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c][d]))) { //Locating dates
																for (var e in objDoc2[a][b][bc][c][d]) {
																	if (objDoc2[a][b][bc][c][d].hasOwnProperty(e)) {//entering inspections
																		console.log('Entering inspections: ', e);
																		for (var j = 0; j < checkboxArr2.length; j++) {
																			if (e == checkboxArr2[j]) {
																				if (typeof objDoc2[a][b][bc][c][d][e] == 'object' && (!Array.isArray(objDoc2[a][b][bc][c][d][e]))) {//locating inspections
																					console.log('Pushing: ' + e);
																					//objPlot['CompanyName'] =b;
																					//objPlot['Lat'] = objDoc2[a][b].Lat;
																					//objPlot['Lng'] = objDoc2[a][b].Lng;
																					objPlot.push(objDoc2[a]);
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								} //if
							} //hasOwnProperty
						} //for address
					}
				}

			}
			console.log(objPlot);

			PlotMap(objPlot);
		} //end of function

		function PlotMap(objPlot2) {
			var arrSortCompliance = [];
			var arrSortComplianceFinds = [];
			var w = 0; //counter for infoWindowNew
			//var infoWindowNew;
			var recentHistory;
			var recentHistory3;
			var recentHistory4;
			var recentHistoryDivGrab;
			var markerCollectionFinal = [];

			for (var u = 0; u < markerCollection2.length; u++) { //clearing map in preparation for new markers
				markerCollection2[u].setMap(null);
			}

			markerCollection = [];
			markerCollection2 = [];
			console.log('Analysing objPlot2...');
			console.log(objPlot2);
			for (var a = 0; a < objPlot2.length; a++) {

				var mapOverMarker = new google.maps.Marker({
					map: mapOverDisp,
					draggable: true
				});
				mapOverMarker['arr'] = [];
				//mapOverMarker['arrDate'] = [];
				console.log(mapOverMarker);
				for (var b in objPlot2[a]) {
					if (objPlot2[a].hasOwnProperty(b)) {
						console.log('Entered company');
						for (var bc in objPlot2[a][b]) {
							if (objPlot2[a][b].hasOwnProperty(bc)) { //for address
								console.log('Entered address');
								mapOverMarker.setPosition(new google.maps.LatLng(objPlot2[a][b][bc].Lat, objPlot2[a][b][bc].Lng)); //set position of all markers regardless; we'll remove duplicates later

								for (var c in objPlot2[a][b][bc]) {
									if (objPlot2[a][b][bc].hasOwnProperty(c)) {
										if (typeof objPlot2[a][b][bc][c] == 'object' && (!Array.isArray(objPlot2[a][b][bc][c]))) { //Locating ProductLines
											console.log('Entered Dates... ', c);
											for (var d in objPlot2[a][b][bc][c]) {
												if (objPlot2[a][b][bc][c].hasOwnProperty(d)) {
													console.log('Entered PLines...');
													if (typeof objPlot2[a][b][bc][c][d] == 'object' && (!Array.isArray(objPlot2[a][b][bc][c][d]))) { //Locating dates
														for (var e in objPlot2[a][b][bc][c][d]) {
															if (objPlot2[a][b][bc][c][d].hasOwnProperty(e)) {
																console.log('Entered inspection...');
																if (typeof objPlot2[a][b][bc][c][d][e] == 'object' && (!Array.isArray(objPlot2[a][b][bc][c][d][e]))) {//locating inspections
																	mapOverMarker.setTitle(b + ' , ' + objPlot2[a][b][bc].CompAdd); //b is company name, ...[bc].CompAdd is company address

																	infoObj.noC = b;
																	infoObj.noCAdd = objPlot2[a][b][bc].CompAdd;
																	mapOverMarker.infoObj = infoObj;

																	var prod = ""; // to accumulate product info if more that one
																	for (var f in objPlot2[a][b][bc][c][d][e]) {
																		if (objPlot2[a][b][bc][c][d][e].hasOwnProperty(f)) {
																			console.log('Entered products: ', f);
																			if (typeof objPlot2[a][b][bc][c][d][e][f] == 'object' && (!Array.isArray(objPlot2[a][b][bc][c][d][e][f]))) { //locating products
																				console.log(f);
																				prod += f + '(' + objPlot2[a][b][bc][c][d][e][f].ProdStr + 'mg,' + objPlot2[a][b][bc][c][d][e][f].DosFormsType + ')' + ' , Brand of ' + objPlot2[a][b][bc][c][d][e][f].Gen + ', ' + objPlot2[a][b][bc][c][d][e][f].SubClassName + '<br/><strong>Findings:</strong><br/>' + '(';
																				var findsArr = objPlot2[a][b][bc][c][d][e][f]['Finds'];
																				for (var x = 0; x < objPlot2[a][b][bc][c][d][e][f]['Finds'].length; x++) {
																					prod += '<em>' + objPlot2[a][b][bc][c][d][e][f]['Finds'][x] + ',';
																				}
																				prod += '</em>)' + '<br>';
																			}
																		}
																	} //end of product


																}

															}
														}

													}


												}
											}
										}
									}
								}
							} //hasOwn address
						} //for address

					}
				}
				var infoWindowNew;
				infoWindowNew = new google.maps.InfoWindow({
					//enableEventPropagation: true
				});


				recentHistory = '<div id = "recentHistoryDiv" ><table><tr><td><label id = "labBut"></label></td></tr>' +
					'<tr><td><u>Name of Company: </u></td>' + '<td class = "nameNoC">' + b + '</td></tr>' +
					'<tr><td><u>State: </u></td>' + '<td>' + objPlot2[a][b][bc].State + '</td></tr>' +
					'<tr><td><u>Address: </u></td>' + '<td>' + objPlot2[a][b][bc].CompAdd + '</td></tr>' +
					'<tr><td><u>Type of Inspection: </u></td>' + '<td>' + e + '</td></tr>' +
					'<tr><td><u>Production Line: </u></td>' + '<td>' + d + '</td></tr>' +
					'<tr><td><u>Product Names: </u></td>' + '<td>' + prod + ' </td></tr>' +
					'<tr><td><u>Date of Inspection: </u></td>' + '<td>' + c + '</td><td><input id ="reconcileBut" type ="button" value ="View Findings" /></td></tr>' + '</table><div><div>Sort by Filter: <select id = "compFilter"><option value = "3">Critical, Major, Other</option><option value = "2">MM, ME, QE</option></select><input type="button" id = "histCompBut" value = "Historical" /></div><div id = "complianceChart" value = "CompChart"></div></div></div>'; //onclick = "ReconcileProdAndFinds(\''+specificNoC+'\', \''+mappableArr[d].getElementsByTagName('InspID')[0].firstChild.data+'\', \''+mappableArr[d].getElementsByTagName('ProductName')[0].firstChild.data+'\', \''+mappableArr+'\')"


				recentHistory4 = '<div id = "buts"><input id = "prevBut" name = "prevBut" type = "button" value = "Previous"></input><input id = "nextBut" type = "button" value = "Next"></input><input id = "tabBut" type = "button" value = "Tabulate"></input></div><br/>';


				recentHistory3 = '<br/><div class = "recentHistory3"><input type ="button" value = "Direction" onclick = "GeolocateOver(\'simple\'\'simple\')"/>' +
					'<input type = "button" id = "directionsBut" value = "Directions(Detailed)" />' +
					'<input type = "button" id = "DirectDone" value = "Done" onclick = "DirectionsNewDone()">' +
					'<input type = "button" id = "Track" value = "Track" onclick = "GeolocateOverTrackerNew()">' +
					'<input type = "button" id = "EndTrack" value = " End Track" onclick = "GeolocateOverTrackerNewTerminate()">' +
					'<input type = "button" id = "remoteScanNew" value = "Scan"/>' +
					'<input type = "button" id = "remoteScanNewDone" value ="End Scan"/>' +
					'<input type = "button" id = "trackCompliance" value ="Track Compliance"/></div>';


				mapOverMarker['arr'].push(recentHistory);
				//mapOverMarker['arrDate'].push(c); //used later for sorting recentHistory
				mapOverMarker.noC = b;
				mapOverMarker.noCAdd = objPlot2[a][b][bc].CompAdd;
				mapOverMarker.noCAddDate = c; //c is the date, look above in for and if block
				markerCollection.push(mapOverMarker); //collecting markers to help clearing of map
				console.log(mapOverMarker);
				console.log('Content of Marker Collection Array: ');
				console.log(markerCollection);



				/*
				console.log('Content of Accrued Marker: ');
				console.log(markerCollection[markerCollection.length-1]);
				*/
				console.log('How array looks: ');
				console.log(markerCollection);


			}//end of plotObj array


			markerCollection.sort(function (a, b) {
				return a.noC.localeCompare(b.noC);
			});
			//performing next sort, by Address
			var tempMarker;

			for (var a = 0; a < markerCollection.length; a++) {
				if (markerCollection[a].noC == (markerCollection[a + 1] ? markerCollection[a + 1].noC : undefined)) {
					if (!markerCollection[a].noCAdd.localeCompare(markerCollection[a + 1])) {
						//switch places
						tempMarker = markerCollection[a];
						markerCollection[a] = markerCollection[a + 1];
						markerCollection[a + 1] = tempMarker;
					}
				}
			}

			console.log('Sorted');
			console.log(markerCollection);


			for (var s = 0; s < markerCollection.length; s++) {
				if (markerCollection[s].noC != (markerCollection[s + 1] ? markerCollection[s + 1].noC : undefined)) {
					console.log(s);
					console.log('Doing nothing');
					//Do nothing
				} else {
					if (markerCollection[s].noCAdd == (markerCollection[s + 1] ? markerCollection[s + 1].noCAdd : undefined)) {
						console.log(s);
						console.log('Collecting...');
						console.log('----');
						console.log('Collector...');
						for (var b = 0; b < markerCollection[s]['arr'].length; b++) {
							markerCollection[s + 1]['arr'].push(markerCollection[s]['arr'][b]); //collect history of former. Loop is necessary, if it is more than one.
							//markerCollection[s+1]['arrDate']
						}
						console.log('Collected...', markerCollection.noCAdd);
						//console.log(markerCollection[s+1]['arr']);

						markerCollection[s].setMap(null); //...discard map position of former
						delete markerCollection[s];
					}
				}
			}




			console.log('After collecting:');
			console.log(markerCollection);

			for (var a = 0; a < markerCollection.length; a++) {
				if (markerCollection[a] != undefined) {
					markerCollection2.push(markerCollection[a]);
				}
			}
			console.log('This is marker collection2:');
			console.log(markerCollection2);


			console.log('This is marker collection2 Again:');
			console.log(markerCollection2);



			for (var v = 0; v < markerCollection2.length; v++) {
				(function (v, recentHistory4) {

					google.maps.event.addListener(markerCollection2[v], 'click', function () {
						//var infoObj= {};
						alert(markerCollection2[v].getTitle());
						var presentMarker = markerCollection2[v];
						infoObj.noC = mapOverMarker.noC;
						infoObj.nocAdd = mapOverMarker.noCAdd;
						console.log(markerCollection2[v]['arr']);
						console.log(typeof (markerCollection2[v]));
						console.log(markerCollection2[v]);
						console.log(markerCollection2);
						console.log('Calling me twice');
						console.log(markerCollection2[v]['arr']);
						console.log('Length of Collection :' + markerCollection2[v]['arr'].length);
						var markerCollectionLength = markerCollection2[v]['arr'].length;
						var markerCollectionLengthCorrected = markerCollection2[v]['arr'].length - 1; //corrected for zero-based indexing
						console.log('Value of markerCollectionLengthCorrected: ' + markerCollectionLengthCorrected);
						if (markerCollection2[v]['arr'].length > 1) { //markerCollection[v]['arr']
							console.log('markerCollectionLengthCorrected on clicking marker: ' + markerCollectionLengthCorrected)
							infoWindowNew.setContent(markerCollection2[v]['arr'][(markerCollectionLengthCorrected)] + recentHistory3 + recentHistory4); //((markerCollection2[v]['arr'].length -1) - w)
						} else {
							infoWindowNew.setContent(markerCollection2[v]['arr'][markerCollectionLengthCorrected] + recentHistory3);
						}
						infoWindowNew.open(mapOverDisp, markerCollection2[v]);
						(function (presentMarker) {
							google.maps.event.addListenerOnce(infoWindowNew, 'domready', Popa);
						})(presentMarker);
						function Popa() {
							//alert ('DOM loaded!');
							//Directions
							var directionsButGrab = document.getElementById('directionsBut');
							console.log('This is the directions BUTTON:');
							console.log(directionsButGrab);
							directionsButGrab.addEventListener('click', function () {
								alert('This one here clicked--.');
								GeolocateOverDirectionsNew(markerCollection2[v].getPosition());
							});

							var remoteScanNewGrab = document.getElementById('remoteScanNew');
							remoteScanNewGrab.addEventListener('click', function () {
								FindPlacesNew(markerCollection2[v].getPosition());
							});
							var remoteScanNewDoneGrab = document.getElementById('remoteScanNewDone');
							remoteScanNewDoneGrab.addEventListener('click', function () {
								FindPlacesNewDone();
							});
							if (markerCollection2[v]['arr'].length > 1) { //markerCollection2[v]['arr'].length
								var prevButGrab = document.getElementById('prevBut');
								var nextButGrab = document.getElementById('nextBut');
								nextButGrab.addEventListener('click', loadNext);
								nextButGrab.style.display = 'none';


								prevButGrab.addEventListener('click', loadPrevious);

								function loadPrevious() {
									console.log('Now: ' + markerCollectionLengthCorrected);
									console.log(markerCollection2[v]['arr'][markerCollectionLengthCorrected]);
									console.log(markerCollection2[v]['arr']);
									//infoWindowNew.close();
									infoWindowNew.setContent(null);
									infoWindowNew.setContent(markerCollection2[v]['arr'][(--markerCollectionLengthCorrected)] + recentHistory3 + recentHistory4);
									console.log('After: ' + markerCollectionLengthCorrected);
									//infoWindowNew.open(mapOverDisp,markerCollection2[v]);
									var prevButGrab = document.getElementById('prevBut');
									prevButGrab.addEventListener('click', loadPrevious);
									var directionsButGrab = document.getElementById('directionsBut');
									directionsButGrab.addEventListener('click', function () {
										GeolocateOverDirectionsNew(markerCollection2[v].getPosition());
									});

									var nextButGrab = document.getElementById('nextBut');
									console.log('This is nextBut:');
									console.log(nextButGrab);
									nextButGrab.addEventListener('click', loadNext);
									nextButGrab.style.display = 'inline';


									if (markerCollectionLengthCorrected == 0) {
										console.log('markerCollectionLengthCorrected Array equals zero.');
										console.log(markerCollectionLengthCorrected);
										prevButGrab.style.display = 'none';
										nextButGrab.style.display = 'inline';
										var nextButGrab = document.getElementById('nextBut');
										nextButGrab.addEventListener('click', loadNext);
									} else {
										//--markerCollectionLengthCorrected;
									}


								}


								function loadNext() {

									console.log('Now: ' + markerCollectionLengthCorrected);
									console.log(markerCollection2[v]['arr'][markerCollectionLengthCorrected]);
									console.log(markerCollection2[v]['arr']);
									//infoWindowNew.close();
									infoWindowNew.setContent(markerCollection2[v]['arr'][(++markerCollectionLengthCorrected)] + recentHistory3 + recentHistory4);
									console.log('After: ' + markerCollectionLengthCorrected);
									//infoWindowNew.open(mapOverDisp,markerCollection2[v]);
									var nextButGrab = document.getElementById('nextBut');
									nextButGrab.addEventListener('click', loadNext);
									var directionsButGrab = document.getElementById('directionsBut');
									directionsButGrab.addEventListener('click', function () {
										GeolocateOverDirectionsNew(markerCollection2[v].getPosition());
									});

									var prevButGrab = document.getElementById('prevBut');
									prevButGrab.addEventListener('click', loadPrevious);
									if (markerCollectionLengthCorrected == markerCollection2[v]['arr'].length - 1) {
										console.log('Equality');
										nextButGrab.style.display = 'none';
										var prevButGrab = document.getElementById('prevBut');
										prevButGrab.addEventListener('click', loadPrevious);
									} else {
										--w;
									}


								}


							}
							var trackComplianceGrab = document.getElementById('trackCompliance');
							(function (presentMarker) {
								trackComplianceGrab.addEventListener('click', ComplianceCharting);
							})(presentMarker);

							function ComplianceCharting(objDoc3) {
								alert(arguments[0]);
								alert('objDoc3 is: ')
								if (this == trackComplianceGrab) {
									alert('true');
									objDoc3 = objDoc;
								}
								console.log(objDoc3);
								console.log(this.value);
								arrSortCompliance = [];
								arrSortComplianceFinds = [];
								console.log(this.value);
								google.charts.load('current', { packages: ['bar', 'controls', 'charteditor'] });
								google.charts.setOnLoadCallback(function () {
									alert('loaded');
									console.log(presentMarker.noC);
									console.log();

									console.log('Bringing out inspections...!');
									for (var a = 0; a < objDoc3.length; a++) {
										for (var b in objDoc3[a]) {
											console.log(objDoc3[a]);
											if (objDoc3[a].hasOwnProperty(b)) { //entering company
												console.log(b);
												if (presentMarker.noC == b) {
													for (var bc in objDoc3[a][b]) {
														if (objDoc3[a][b].hasOwnProperty(bc)) { //entering address
															if (presentMarker.noCAdd == bc) {
																console.log('Address', bc);
																for (var c in objDoc3[a][b][bc]) {
																	if (objDoc3[a][b][bc].hasOwnProperty(c)) {
																		if (typeof objDoc3[a][b][bc][c] == 'object' && (!Array.isArray(objDoc3[a][b][bc][c]))) { //Locating ProductLines
																			for (var d in objDoc3[a][b][bc][c]) {
																				if (objDoc3[a][b][bc][c].hasOwnProperty(d)) {
																					if (typeof objDoc3[a][b][bc][c][d] == 'object' && (!Array.isArray(objDoc3[a][b][bc][c][d]))) { //Locating dates
																						for (var e in objDoc3[a][b][bc][c][d]) {
																							if (objDoc3[a][b][bc][c][d].hasOwnProperty(e)) {
																								if (typeof objDoc3[a][b][bc][c][d][e] == 'object' && (!Array.isArray(objDoc3[a][b][bc][c][d][e]))) {//locating inspections
																									for (var f in objDoc3[a][b][bc][c][d][e]) {
																										console.log(b);
																										console.log(objDoc3[a][b]);
																										console.log(objDoc3[a][b][bc]);
																										console.log('Product: ', f);
																										console.log(objDoc3[a][b][bc][c][d][e]);
																										if (objDoc3[a][b][bc][c][d][e].hasOwnProperty(f)) {
																											if (typeof objDoc3[a][b][bc][c][d][e][f] == 'object' && (!Array.isArray(objDoc3[a][b][bc][c][d][e][f]))) {//locating inspections
																												console.log(objDoc3[a][b][bc][c][d][e][f]['Finds'])

																												//for (var g = 0; g<objDoc3[a][b][bc][c][d][e][f]//console.log('Pushing: '+b);
																												arrSortCompliance.push(objDoc3[a]);
																												//var compFilter = ?(=='Level')2:3;
																												console.log('Type of compFilterGrab.value is', typeof (compFilterGrab.value));
																												console.log('Type of compFilterGrab.value is', typeof (parseInt(compFilterGrab.value)));
																												for (var h = 0; h < objDoc3[a][b][bc][c][d][e][f]['Finds'].length; h++) {
																													arrSortComplianceFinds.push(objDoc3[a][b][bc][c][d][e][f]['Finds'][h]);
																												}

																												console.log(arrSortComplianceFinds);
																												console.log(arrSortCompliance);
																												alert('Declaring data!');
																												var data = new google.visualization.DataTable();
																												data.addColumn('string', 'Compliance');
																												data.addColumn('number', 'Number');

																												for (var t = 0; t < arrSortComplianceFinds.length; t++) {
																													if (arrSortComplianceFinds[t] != null) {
																														console.log('Value of Compliance Array: ' + arrSortComplianceFinds[t]);
																														arrSortComplianceFinds[arrSortComplianceFinds[t]] = 0;
																													}
																												}
																												console.log(arrSortComplianceFinds);
																												arrSortComplianceFinds.sort();

																												for (var t = 0; t < arrSortComplianceFinds.length; t++) {
																													if (arrSortComplianceFinds[t] != null) {
																														++arrSortComplianceFinds[arrSortComplianceFinds[t]];
																													}
																												}

																												console.log('This is object');
																												console.log(arrSortComplianceFinds);


																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}//if company 'pass'
											}
										}

									}
									if (compFilterGrab.value == '2') {
										console.log('Doing MM, QE Stuff...');
										console.log('Value ', compFilterGrab.value);
										data.addRows([
											['MM', arrSortComplianceFinds['MM']],
											['QM', arrSortComplianceFinds['QM']],
											['QE', arrSortComplianceFinds['QE']],
											['Prod', arrSortComplianceFinds['PROD']],
											['PL', arrSortComplianceFinds['PL']],
											['QC', arrSortComplianceFinds['QC']],
											['Other', arrSortComplianceFinds['Other']],
											['None', arrSortComplianceFinds['null']]
										]);

									} else if (compFilterGrab.value == '3') {
										console.log('Doing Major, Critical, Other...');
										console.log('Value ', compFilterGrab.value);
										data.addRows([
											['Major', arrSortComplianceFinds['Major']],
											['Critical', arrSortComplianceFinds['Critical']],
											['Other', arrSortComplianceFinds['Other']],
											['None', arrSortComplianceFinds['null']]
										]);

									}


									var options = {
										'title': 'GMP Profile',
										'width': 400,
										'height': 300
									};

									var chart = new google.visualization.ColumnChart(complianceChartGrab);
									chart.draw(data, options);
									//console.log('This is name of Company: ', infoObj.noC);

									//console.log(objDoc2);
									//CompChartPlot
									//var companyName = document.getElementsByClassName('recentHistoryDiv')[0].getElementsByClassName('nameNoC').innerHTML;



								});
								alert('Charting Compliance...!');
								alert(presentMarker.noCAdd);
							}



							function historicalProfile() {
								console.log('Going for history');
								console.log(infoObj.noC);
								console.log(infoObj.noCAdd);
								//console.log('Calling', this2.value);
								histChart = 'histComp=' + infoObj.noC + '&histAdd=' + infoObj.noCAdd;
								var histChartXmlObj = new XMLHttpRequest();
								console.log(histChart);
								console.log(adjustWeeklyVar);
								//infoObj.noC= mapOverMarker.noC;
								//infoObj.nocAdd;

								histChartXmlObj.open('GET', 'SearchAjaxRandRInterfaceNoC3' + '?' + histChart, true);
								histChartXmlObj.responseType = 'json';
								histChartXmlObj.send();

								histChartXmlObj.onreadystatechange = function () {
									if (histChartXmlObj.readyState == 4 && histChartXmlObj.status == 200) {
										objDoc2 = histChartXmlObj.response;
										console.log(objDoc);
										ComplianceCharting(objDoc2);

									} else {
										//alert (XMLHttpRequestObj.readyState + ',' + XMLHttpRequestObj.status);
									}

								}//end of anonymous function
							}
							//alert('trackComplianceGrab');
							//alert(trackComplianceGrab);
							complianceChartGrab = document.getElementById('complianceChart');
							compFilterGrab = document.getElementById('compFilter');
							histCompButGrab = document.getElementById('histCompBut');
							histCompButGrab.addEventListener('click', historicalProfile);
							compFilterGrab.addEventListener('change', ComplianceCharting);
							//alert('This is compliance chart tracker:');
							console.log(complianceChartGrab);
						}


					});


				})(v, recentHistory4);
			}



			//console.log('Final markerCollection: ');
			//console.log(markerCollection);
		} //End of PlotMap function

		function UIDashboard(objDoc) {
			var compArr = [];
			var dateArr = [];
			var stateArr = [];
			for (var a = 0; a < objDoc.length; a++) {
				for (b in objDoc[a]) {
					if (objDoc[a].hasOwnProperty(b)) {
						compArr.push(b);
						//console.log(compArr);
						for (c in objDoc[a][b]) {
							if (objDoc[a][b].hasOwnProperty(c)) {
								dateArr.push(objDoc[a][b][c]);
							}
						}
					}
				}
			}
			console.log(compArr);
			console.log(dateArr);
		}// End of UIDashboard

		function xmlDocStreamLine(xmlDoc2) {
			var xmlDocArr = [];
			console.log('Length of xmlDoc2: ' + xmlDoc2.getElementsByTagName('Det').length);
			console.log('Length of xmlDoc2: ' + xmlDoc2.length);
			for (var a = 0; a < xmlDoc2.getElementsByTagName('Det').length; a++) {
				/*
				if (equal) {
					a.newCompany.push(); 
				 } else {
					 var a.newCompany = [];
					 a.newCompany.push();
				 }
				 */
			}
		}


		function NoCClip(nocArrInterim) { //used to trim both companies and products. Works only after sort
			var nocArrInterim2 = [];
			nocArrInterim.sort();
			for (var a = 0; a < nocArrInterim.length; a++) { //last checks against undefined
				if (nocArrInterim[a] != nocArrInterim[a + 1]) {
					nocArrInterim2.push(nocArrInterim[a]);
				}
			}
			return nocArrInterim2;
		}


		function LoadsUIStates() {

			arrSortStates = [];
			console.log('Length of an initialized arrSortStates ' + arrSortStates.length);
			console.log(' arrSortStates Initialized to zero');
			infoArrayPlac = xmlDoc.getElementsByTagName('State');


			console.log('length of infoArraPlac ' + infoArrayPlac.length);

			for (var a = 0; a < infoArrayNoC.length; a++) {
				//infoArrayPlacDat = infoArrayPlac[a].firstChild.data
				arrSortStates.push(infoArrayNoC[a]);
			}

			arrStatesClipped = []; //initializing to zero, to prevent duplication of ui

			console.log('This is Det: ');
			console.log(infoArrayNoC);
			arrStatesClipped = ArrayFixStates(arrSortStates);
			console.log('This is the final product ');
			console.log(arrStatesClipped);

			UIMaker(arrStatesClipped);
		}


		function ArrayFix(arr) {

			arrUnsort = [];
			console.log('UnSort initialized');
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			var arr2 = [];
			//Sorting, alphabetical order
			arr.sort();
			console.log('This is an array of states after sorting ' + arr);

			//Creating the properties
			for (var a = 0; a < arr.length; a++) {
				if (arr[a] != arr[a + 1]) {
					arr2[arr[a]] = 1;
					console.log('Values: ' + arr2[arr[a]]);
				}
			}

			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length; a++) {
				if (arr[a] == arr[a + 1]) {
					(arr2[arr[a]])++;
					//put the label counter here
					delete arr[a];
				}
			}
			console.log('This is the array after deleting ' + arr);

			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}

			console.log('This is the array after clipping ' + arr2);

			return arr2;

		}



		function ArrayFixStates(arr) {

			console.log('UnSort initialized for InspectionDate and PL');
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			var arr2 = [];
			var arr3 = [];

			//DATE IS PRIMARY SORT ORDER in PHP, so we JUST BOTHER ABOUT PL

			//arr.sort(function (a, b) {return (a.getElementsByTagName('State')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('State')[0].firstChild.nodeValue); });
			console.log('***************');
			console.log(arr);

			//Creating the properties

			//arr.sort(function (a, b) {return (a.getElementsByTagName('PL')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('PL')[0].firstChild.nodeValue); });
			//Assigning the number on the property and deleting

			for (var a = 0; a < arr.length - 1; a++) { //This trims into unique inspections.  For case arr.length =1, it won't enter the For loop; not to worry though: it already is a unique inspection
				console.log('Pass: ' + a);
				if (arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('PL')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspDate')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue && arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue) {
					//(arr2[arr[a].getElementsByTagName('State')[0].firstChild.nodeValue])++; // Should this be State?  This should count unique inspections.  Array coming in was sorted by PL.  I think it is better deleted.
					console.log('State Object: ');
					console.log(arr2);
					//regPLL[0][PL][ProdLineCat]
					//arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue] = new Object();
					delete arr[a];  // PL will equal where InspDate is equal, so this line can be here. If it is in InspDate 'if' we will not have the chance to count it
				}
			}

			console.log('This is the array after deleting ' + arr);
			console.log(arr);
			console.log('Yeah');


			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}
			console.log('This is the array after clipped deleting: ' + arr);
			console.log('This is the array2');
			console.log(arr2);
			console.log(arr2[3]);
			console.log(arr2[2]);

			arr2.sort(function (a, b) { return (a.getElementsByTagName('State')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('State')[0].firstChild.nodeValue); });

			for (var a = 0; a < arr2.length; a++) {
				if (a < arr2.length - 1) {
					console.log('Index a: ' + a);
					console.log('Value at a: ' + arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue);
					if (arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue != arr2[a + 1].getElementsByTagName('State')[0].firstChild.nodeValue) {
						arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue] = 1;
						console.log('Values: ' + arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue]);
					}

				} else {
					console.log('Value of a: ' + a);
					arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue] = 1;
					console.log('Values: ' + arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue]);

				}
			}


			if (arr2.length == 1) {
				console.log('Array Length Case of 1');
				arr2[arr2[0].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr2[arr2[0].getElementsByTagName('InspType')[0].firstChild.nodeValue];
			}

			for (var a = 0; a < arr2.length - 1; a++) { //Case arr.length =1 won't enter this loop, which is just as well
				console.log('Pass: ' + a);
				//this still gat to be PL, InspDate, etc., 
				if (arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue == arr2[a + 1].getElementsByTagName('State')[0].firstChild.nodeValue) {
					(arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue])++;
					console.log('Property value at: ');
					console.log((arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue]));
					//This next line appears to be necessary; remove if having problems.
					arr3[arr2[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr2[arr2[a].getElementsByTagName('InspType')[0].firstChild.nodeValue];
					delete arr2[a];  // PL will equal where InspDate is equal, so this line can be here. If it is in InspDate 'if' we will not have the chance to count it
				}

				//The last item does not need to be evaluated; if it is the same with previous,
				//it already has been incremented.  If it is different, it already has value of 1
				//This commented code is not necessary, but should do no harm in uncomented anyways.

				if (a == arr2.length - 2) { //either replaces (if the same), or creates new object property (if last item is different)
					arr3[arr2[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr2[arr2[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];
				}



			}
			console.log('States Array:');
			console.log(arr2);

			for (var a = 0; a < arr2.length; a++) {
				if (arr2[a]) { //if it is not = to undefined, or null.
					arr3.push(arr2[a]);
					arr3[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue] = arr2[arr2[a].getElementsByTagName('State')[0].firstChild.nodeValue];
				}

				console.log('LENGTH of arr3 ' + arr3.length);
				//console.log((arr3[arr3[0].getElementsByTagName('State')[0].firstChild.nodeValue]));
			}
			console.log('This is the array after clipped deleting: ' + arr3);

			//clipping


			console.log('This is the array after clipping');
			console.log(arr3);
			console.log(arr3.length);
			console.log("2nd Item in array:");
			console.log(arr3[1]);
			return arr3;

		}



		function ArrayFixProductsAndFinds(arr) {

			console.log('UnSort initialized for InspectionDate and PL');
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			console.log(arr[0]);
			console.log(arr[1]);
			console.log(arr[2]);
			console.log(arr[3]);
			var arr2 = [];

			//DATE IS PRIMARY SORT ORDER in PHP, so we JUST BOTHER ABOUT PL

			//arr.sort(function (a, b) {return (a.getElementsByTagName('State')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('State')[0].firstChild.nodeValue); });
			console.log('***************');
			console.log(arr);

			//Assigning the number on the property and deleting

			arr.sort(function (a, b) { return (a.getElementsByTagName('ProductName')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('ProductName')[0].firstChild.nodeValue); });
			console.log('Having sorted arr: ');
			console.log(arr);
			for (var a = 0; a < arr.length; a++) {
				if (a < (arr.length - 1)) {
					console.log('Index a: ' + a);
					console.log('No if, Value at a: ' + arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
					//console.log('Value at a+1: '+ arr[a+1].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
					//if (arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue != arr[a+1].getElementsByTagName('ProductName')[0].firstChild.nodeValue) {
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue] = new Object();
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate'] = [];
					console.log('Values: ' + arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
					//} 

				} else {
					console.log('Value of a: ' + a);
					//arr2[arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue] =1;
					console.log('Values: ' + arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue] = new Object(); //you sure about this one?
					console.log('You sure about this one?');
					console.log(arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'] = [];
					arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate'] = [];
					console.log('You sure about this one2?');
					console.log(arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
				}
			}

			console.log('PRODUcT1 OBJECT:');
			console.log(arr);

			if (arr.length == 1) { //getting findings for the last item value in the array
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'].push(arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'].push(arr[0].getElementsByTagName('FindDets')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'].push(arr[0].getElementsByTagName('FindCat')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'].push(arr[0].getElementsByTagName('FindImg')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'].push(arr[0].getElementsByTagName('FindObs')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'].push(arr[0].getElementsByTagName('InspID')[0].firstChild.nodeValue);
				arr[arr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate'].push(arr[0].getElementsByTagName('InspDate')[0].firstChild.nodeValue);
			}
			for (var a = 0; a < arr.length - 1; a++) {
				console.log('Pass: ' + a);
				//this still gat to be PL, InspDate, etc., 
				//if (arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue == arr[a+1].getElementsByTagName('ProductName')[0].firstChild.nodeValue) {
				console.log('This is product name: ' + arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
				console.log(arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
				console.log(arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName']);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'].push(arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'].push(arr[a].getElementsByTagName('FindDets')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'].push(arr[a].getElementsByTagName('FindCat')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'].push(arr[a].getElementsByTagName('FindImg')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'].push(arr[a].getElementsByTagName('FindObs')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'].push(arr[a].getElementsByTagName('InspID')[0].firstChild.nodeValue);
				arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate'].push(arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue);
				console.log('Property value at: ');
				console.log((arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue]));
				//delete arr[a];  // PL will equal where InspDate is equal, so this line can be here. If it is in InspDate 'if' we will not have the chance to count it
				//} 
				if (a == arr.length - 2) {
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'].push(arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'].push(arr[a + 1].getElementsByTagName('FindDets')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'].push(arr[a + 1].getElementsByTagName('FindCat')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'].push(arr[a + 1].getElementsByTagName('FindImg')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'].push(arr[a + 1].getElementsByTagName('FindObs')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'].push(arr[a + 1].getElementsByTagName('InspID')[0].firstChild.nodeValue);
					arr[arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate'].push(arr[a + 1].getElementsByTagName('InspDate')[0].firstChild.nodeValue);
				}

			}




			console.log('PRODUcT2 OBJECT:');
			console.log(arr);

			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not == to undefined, or null.
					arr2.push(arr[a]);
					arr2[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue] = arr[arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue];
				}

				console.log('LENGTH of arr2 ' + arr2.length);
				//console.log((arr2[arr2[0].getElementsByTagName('State')[0].firstChild.nodeValue]));
			}
			console.log('This is the array after clipped deleting: ' + arr2);

			//clipping


			console.log('This is the array after clipping');
			console.log(arr2);

			return arr2;

		}



		function ArrayFixInspDateAndPL(arr) {

			console.log('UnSort initialized for InspectionDate and PL');
			console.log('Length of arr ' + arr.length);
			console.log(arr);

			var arr2 = [];

			//DATE IS PRIMARY SORT ORDER in PHP, so we JUST BOTHER ABOUT PL
			// No need for sorting, it is already Ordered By PL
			//arr.sort(function (a, b) {return (a.getElementsByTagName('PL')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('PL')[0].firstChild.nodeValue); });
			console.log('***************');
			console.log(arr);

			//Creating the properties
			for (var a = 0; a < arr.length; a++) {
				if (a < arr.length - 1) {
					console.log('Index a: ' + a);
					console.log('Value at a: ' + arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue);
					if (arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue != arr[a + 1].getElementsByTagName('PL')[0].firstChild.nodeValue) {
						arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = 1;
						console.log('Values: ' + arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue]);
					}

				} else {
					console.log('Value of a: ' + a);
					//arr2[arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue] =1;
					console.log('Values: ' + arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue]);
					arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = 1; //you sure about this one?

				}
			}

			console.log('ArrayFixInspDateAndPL arr: ');
			console.log(arr);
			console.log(arr[0]);
			console.log(arr[1]);
			console.log(arr[2]);
			console.log(arr[3]);


			if (arr.length == 1) {
				console.log('Array Length Case of 1');
				arr2[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue];
			}
			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length - 1; a++) {// for case arr.length=0, no need for this loop: single item is already a unique inspection
				console.log('Pass: ' + a);
				if (arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('PL')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspDate')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue && arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue) {
					(arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue])++;

					arr2[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];// is this line sane at all? What is this?
					delete arr[a];  // PL will equal where InspDate is equal, so this line can be here. If it is in InspDate 'if' we will not have the chance to count it
				}
				if (a == arr.length - 2) { //either replaces (if the same), or creates new object property (if last item is different)
					arr2[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];
				}

			}

			console.log('This is the array after deleting ' + arr);
			console.log(arr);


			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
					arr2[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue];

				}

				console.log('LENGTH of InspDateAndPL arr2 ' + arr2.length);
			}

			console.log('This is the array InspDateAndPL after clipping');
			console.log(arr2);
			/*
			console.log('Investigation Nos: '+arr2['Investigation']);
			console.log(arr2.length);
				for (var a=0;a<arr2.length;a++) {
					console.log(arr2[a]);
				}
			*/
			return arr2;

		}



		function ArrayFixInspType(arr) {

			arrUnsort = [];
			console.log('UnSort initialized for InspType');
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			var arr2 = [];
			//Sorting, alphabetical order
			//arr.sort(function (a, b) {return a.getElementsByTagName('InspType')[0].firstChild.nodeValue - b.getElementsByTagName('InspType')[0].firstChild.nodeValue; });
			arr.sort(function (a, b) { return (a.getElementsByTagName('InspType')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('InspType')[0].firstChild.nodeValue); });
			console.log('***************');
			console.log(arr);

			//Creating the properties
			for (var a = 0; a < arr.length; a++) {
				if (a < arr.length - 1) {
					console.log('Index a: ' + a);
					console.log('Value at a: ' + arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					if (arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue != arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue) {
						arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] = 1;
						console.log('Values: ' + arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue]);
						console.log('Inspection Type: ' + arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					}
				} else {
					console.log('Value of a: ' + a);
					arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] = 1;
					console.log('Values: ' + arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue]);
					console.log('Inspection Type: ' + arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue);
				}
			}

			//Assigning the number on the property
			if (arr.length == 1) {
				console.log('Array Length Case of 1');
				arr2[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue];
			}
			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length - 1; a++) {// won't handle case arr.length =1, which is just as well. No need to increment. It already has a value of 1
				if (arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue) {
					(arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue])++;
					//put the label counter here
					arr2[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue];
					delete arr[a];
				}
				if (a == arr.length - 2) { //either replaces (if the same), or creates new object property (if last item is different)
					arr2[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];
				}
			}
			console.log('This is the array after deleting ' + arr);
			console.log(arr);
			console.log(arr2);

			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
					arr2[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue]; //is this needed? Yes.  To catch properties that cannot be referenced because they were deleted in arr
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}

			console.log('This is the array after clipping');
			console.log(arr2);

			return arr2;

		}

		function ArrayFix3(arr) {
			//YOU KNOW WHAT, CHANGE MAPPABLE TO just name of companies, not the entire 'Det'
			arrUnsort = [];
			console.log('Length of passed array ' + arr.length);
			var arr2 = [], arr3 = [];
			//Sorting, alphabetical order
			arr.sort();

			console.log('THIS IS ARR.SORT ' + arr);
			//console.log ('This is an array of states after sorting ' + arr);

			//Creating the properties
			for (var a = 0; a < arr.length; a++) {
				if (arr[a] != arr[a + 1]) {
					arr2[arr[a]] = 1;
					console.log('Values: ' + arr2[arr[a]]);
					//console.log('Company' + arr[a] + ':' + Values: ' + arr2[arr[a]]);
				}
			}

			//Incrementing property and deleting
			for (var a = 0; a < arr.length; a++) { //holds NUMBER of unique companies
				if (arr[a] == arr[a + 1]) {
					(arr2[arr[a]])++;
					//put the label counter here
					delete arr[a];
				}
			}
			console.log('This is the mappablearray after deleting ' + arr);

			//clipping

			for (var a = 0; a < arr.length; a++) { //holds UNIQUE companies
				if (arr[a]) { //if it is not = to undefined, or null.
					arr3.push(arr[a]);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}


			console.log('This is the mappable array after clipping ' + arr2);


			return [arr2, arr3]; //arr2 contains objects, arr3 contains items

		}

		function ArrayFix2(arr) {

			arrUnsort = [];
			console.log('Length of passed mappable array ' + arr.length);
			console.log('This is mappable array ' + arr);
			var arr2 = [];
			//Sorting, alphabetical order
			//arr.sort(); already sorted

			//Creating the properties; We may not need to use this
			for (var a = 0; a < arr.length; a++) {
				if (arr[a].getAttribute('NoC') != ((a < arr.length - 1) ? arr[a + 1].getAttribute('NoC') : 123456)) {

					arr2[arr[a].getAttribute('NoC')] = 1;
					console.log('Values of mappable: ' + arr[a].getAttribute('NoC') + ' : ' + arr2[arr[a].getAttribute('NoC')]);
					//console.log('Company' + arr[a] + ':' + Values: ' + arr2[arr[a]]);
				}
			}

			//Incrementing property and deleting
			for (var a = 0; a < arr.length; a++) {
				if (arr[a].getAttribute('NoC') == ((a < arr.length - 1) ? arr[a + 1].getAttribute('NoC') : 123456)) { //Assuming no companies name can be 123
					(arr2[arr[a].getAttribute('NoC')])++;
					console.log('Property value: ' + arr[a].getAttribute('NoC') + '=' + arr2[arr[a].getAttribute('NoC')]);
					//put the label counter here
					delete arr[a];
				}
			}
			//console.log('This is the mappablearray after deleting ' + arr);

			//clipping

			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}


			console.log('This is the mappable array after clipping ' + arr2);


			return arr2;
		}



		function UIMaker(arrUI, scan) { //for making States UI
			console.log('This is arrUI ' + arrUI);
			//alert ('This is the length ' + arrUI.length);
			console.log('Length of uiFormStates ' + uiFormStates.children.length);

			stateScanForm = (scan) ? uiFormScan : uiFormStates;
			stateScanDiv = (scan) ? uiDivScan : uiDivStates;
			radioCheckText = (scan) ? 'checkbox' : 'radio';
			//stateScanForm, stateScanDiv
			//uiFormScan, uiDivScan; //ui for scanned estabs;

			if (stateScanForm.children.length) {
				console.log('Length of stateScanForm: ' + stateScanForm.children.length);
				console.log(typeof (uiDivScan));
				console.log(uiDivScan);
				stateScanForm.removeChild(uiDivScan);
			}



			uiDivScan = document.createElement('div');

			for (var a = 0; a < arrUI.length; a++) {
				//arrUI[arrUI[a]].boolVal = 0; //assigning another property to it
				var uiLabel = document.createElement('label');
				var uiBrk = document.createElement('br');
				var uiInpt = document.createElement('input');
				console.log(arrUI);
				console.log(arrUI[a]);
				if (scan) {
					uiLabel.innerHTML = arrUI[a] + ' (' + arrUI[arrUI[a]] + ')';
				} else {
					uiLabel.innerHTML = arrUI[a].getElementsByTagName('State')[0].firstChild.nodeValue + ' (' + arrUI[arrUI[a].getElementsByTagName('State')[0].firstChild.nodeValue] + ')';
				}

				uiInpt.setAttribute('type', radioCheckText);
				if (scan) {
					uiInpt.checked = true;
				}
				console.log('Has been changed to radio!');
				uiInpt.setAttribute('name', 'statesUI');
				(function (a, uiLabel) {
					uiInpt.addEventListener('click', function () {
						if (scan) {
							console.log(this.checked);
							console.log('Activating scan interface');
							placesBool.arrUIValue != placesBool.arrUIValue;
							RemoveScanMarkers(arrUI[a], scanMarkersArr, this.checked);
						} else {
							SurvMarkersDirectionsRemoval();
							if (this.checked) {

								console.log('NUMBER OF FORM CHILDREN ' + uiForm.children.length);
								if (uiForm.children.length) {
									UnLoads(null, arrUI[a]);
								}
								LoadsUI(arrUI[a].getElementsByTagName('State')[0].firstChild.nodeValue);
							}
						}
					});
				})(a, uiLabel);
				uiDivScan.appendChild(uiLabel);
				uiDivScan.appendChild(uiInpt);
				uiDivScan.appendChild(uiBrk);

			}

			var sChart = document.createElement('input');
			sChart.setAttribute('type', 'button');
			sChart.setAttribute('value', 'Chart States');
			sChart.addEventListener('click', function () {
				navFormDivCloseVar = true;
				navFormDivVar = 'chartDivGrab';
				console.log('Clicked me!');
				if (scan) {
					google.setOnLoadCallback(DrawChart(arrUI, null, 'scan')); //Charting Bakeries, etc
				} else {
					google.setOnLoadCallback(DrawChart(arrUI, null)); //charting States
				}

				console.log('Emptying for Charts');
				console.log(navFormDiv);
				for (var a = 0; a < navFormDiv.children.length; a++) {
					navFormDiv.removeChild(navFormDiv.children[a]);
				}
				//document.getElementsByTagName('body')[0].removeChild(barChartsGrab);
				//document.getElementsByTagName('body')[0].removeChild(pieCharts2Grab);
				console.log('Creating ChartDiv');

				//var chartDiv = document.createElement('div');
				//chartDiv.setAttribute('class', 'chartDivClass');

				//chartDivGrab.appendChild(barChartsGrab);
				//chartDivGrab.appendChild(pieCharts2Grab);


				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					navFormDivVar = 'chartDivGrab';
					navFormDivCloseVar = true;
					navFormDiv.appendChild(chartDivGrab);
					navFormDiv.style.width = "100%";

					timesSymbol = document.createElement('a');
					timesSymbol.setAttribute('href', 'javascript:void(0)');
					timesSymbol.setAttribute('class', 'closeNavForm');
					timesSymbol.setAttribute('id', 'closeNavForm');
					timesSymbol.addEventListener('click', closeNavForm);
					timesSymbol.innerHTML = '&times';


					navFormDiv.appendChild(timesSymbol);
				}
			});

			if (scan) {
				var radiusLabel = document.createElement('label');
				radiusLabel.innerHTML = "Radius Scanned: " + Math.round(scanRadius / 1000 * 10) / 10 + "Km";
				radiusLabel.className = 'lab';
				uiDivScan.appendChild(radiusLabel);
			}
			uiDivScan.appendChild(sChart);

			console.log('Length of Divs ' + uiDivScan.children.length);
			if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {

				//Attempt to empty document.body of laptop view of States
				for (var b = 0; stateScanForm.children.length; b++) {
					stateScanForm.removeChild(stateScanForm.children[b]);
				}

				//Emptying parent div of States
				/*
				for (var b=0; navUIFormParentGrab.children.length;b++) {
					navUIFormParentGrab.removeChild(navUIFormParentGrab.children[b]);
				}
				*/
				while (navUIFormParentGrab.children.length) {
					navUIFormParentGrab.removeChild(navUIFormParentGrab.children[0]);
				}

				//Emptying States div of labels and radios
				for (var b = 0; navUIFormGrab.children.length; b++) {
					navUIFormGrab.removeChild(navUIFormGrab.children[b]);
				}

				timesSymbolUI = document.createElement('a');
				timesSymbolUI.setAttribute('href', 'javascript:void(0)');
				timesSymbolUI.setAttribute('class', 'closeNavFormUI');
				timesSymbolUI.setAttribute('id', 'closeNavFormUI');
				timesSymbolUI.addEventListener('click', function () {
					this.parentNode.parentNode.removeChild(this.parentNode);
					//closeNavForm('ui');
				});
				timesSymbolUI.innerHTML = '&times';
				//	if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {														
				navUIFormGrab.appendChild(uiDivScan);
				//navUIFormGrab.style.position = 'relative';
				//navUIFormGrab.style.height = '30%';
				//navUIFormGrab.style.marginBottom = '5%';
				//navUIFormGrab.style.background = "#ececec";

				navUIFormParentGrab.appendChild(navUIFormGrab);
				navUIFormParentGrab.appendChild(timesSymbolUI);
				navUIFormParentGrab.style.height = '80%';
				document.body.appendChild(navUIFormParentGrab);
				//	} else {
				//	.appendChild(uiDivScan);
				//	}

			} else {
				stateScanForm.appendChild(uiDivScan);
				console.log('Length of Forms ' + stateScanForm.children.length);
				console.log(MEDashboardGrab);
				console.log(MEDashboard.parentNode);
				//document.body.appendChild(stateScanForm);
				//document.body.insertBefore(stateScanForm, MEDashboardGrab);
				stateScanParentGrab.appendChild(stateScanForm);
				console.log('Length in body ' + document.body.children.length);
			}

		}



		function RemoveScanMarkers(arrUIValue, arrscanMarkersArr, checkState) {
			//placesBool.arrUIValue != placesBool.arrUIValue;
			console.log('Value of boolean = ' + arrUIValue.boolVal);
			console.log('We should commence removing markers based on what is checked');
			console.log(arrscanMarkersArr[2].variousTypes);
			console.log('This is label value' + arrUIValue);

			for (var a = 0; a < arrscanMarkersArr.length; a++) { //very smart way to toggle on and off markers; now we don't need a special unload markers function
				console.log('********************');
				console.log(arrUIValue);
				for (var b = 0; b < arrscanMarkersArr[a].variousTypes.length; b++) {
					if (arrscanMarkersArr[a].variousTypes[b] == arrUIValue) {
						console.log('Match...match');
						if (checkState) {
							console.log(b);
							console.log(checkState);
							//scanMarkersArr[a].setMap((scanMarkersArr[a].getMap())?null:mapOverDisp);
							arrscanMarkersArr[a].setMap(mapOverDisp);
							console.log(arrscanMarkersArr[a].getMap())
						} else {
							console.log(b);
							console.log(checkState);
							console.log(arrscanMarkersArr[a]);
							console.log(arrscanMarkersArr[a].variousTypes);
							arrscanMarkersArr[a].setMap(null);
							console.log('---');
						}
					}
				}
			}
		}



		function DrawChart(arrUI, arrSortClipped, scan) {
			//var chartDisplayArr = [];
			//chartDisplayArr = [];
			//chartDisplayButArr= [];
			console.log('Has called back!');
			console.log(arrUI);
			console.log('Clipped: ');
			console.log(arrSortClipped);

			var dataOpts;
			var data = new google.visualization.DataTable();

			if (arrUI) { //charting states
				console.log('**********States!');
				//var barChartsGrab = navFormDiv.getElementsByClassName();
				var barChartsGrab = document.getElementById('Charts');
				var pieChartsGrab = document.getElementById('Charts2');
				console.log('This is bar1: ' + barChartsGrab);
				console.log('This is pie1: ' + pieChartsGrab);
				var chartCellGeneral = document.getElementById('chartCell'); // referring to the '<td>' holding the div
				console.log(chartCellGeneral);
				//var chartDivGeneral = document.getElementById('chartDiv');
				console.log('--------------------------------');
				if (scan) {
					data.addColumn('string', 'States');
					data.addColumn('number', 'Nos. of Inspections');
					var chartArr2 = [];
					for (var a = 0; a < arrUI.length; a++) {
						var chartArr = [arrUI[a], arrUI[arrUI[a]]];
						console.log('Type Of chartArr ' + typeof (chartArr));
						console.log('First Array ' + chartArr);
						chartArr2.push(chartArr);
						console.log('First agregated array ' + chartArr2);
					}

					dataOpts = {
						title: 'State Analysis',
						width: 400,
						height: 400
					};
				} else {
					data.addColumn('string', 'States');
					data.addColumn('number', 'Nos. of Inspections');
					var chartArr2 = [];
					for (var a = 0; a < arrUI.length; a++) {
						var chartArr = [arrUI[a].getElementsByTagName('State')[0].firstChild.nodeValue, arrUI[arrUI[a].getElementsByTagName('State')[0].firstChild.nodeValue]];
						console.log('Type Of chartArr ' + typeof (chartArr));
						console.log('First Array ' + chartArr);
						chartArr2.push(chartArr);
						console.log('First agregated array: ' + chartArr2);
					}

					console.log('Did it make it into here');

					dataOpts = {
						title: 'State Analysis',
						width: 400,
						height: 400
					};
					console.log('Did it make it into here2');
				}

				console.log('Did it make it into here3');
				data.addRows(chartArr2);
				console.log('Did it make it into here4');
				var chartBarStates = new google.visualization.BarChart(barChartsGrab);
				console.log('Did it make it into here5');
				console.log('---------');
				console.log(chartBarStates);
				chartBarStates.draw(data, dataOpts);
				var chartPieStates = new google.visualization.PieChart(pieChartsGrab);
				chartPieStates.draw(data, dataOpts);

				chartDisplayArr.push(chartBarStates);
				chartDisplayArr.push(chartPieStates);

				var chartDivGrabBut = document.createElement('input');
				chartDivGrabBut.setAttribute('type', 'button');
				chartDivGrabBut.setAttribute('value', 'Done');


				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					var chartDivGeneral = document.getElementsByClassName('chartDivClass1');
					if (chartDivGeneral[0].parentNode != chartCellGeneral) { //re-establishing chartDivGeneral as a child of chartCellGeneral after mobile screen
						//chartCellGeneral.appendChild(chartDivGeneral[0]);
						console.log('This is [0] for states:');
						console.log(chartDivGeneral[0]);
					}
					//chartCellGeneral.insertBefore(chartDivGrabBut,chartDivGeneral[0]);
				} else {
					var chartDivGeneral = document.getElementById('chartDiv');
					if (chartDivGeneral.parentNode != chartCellGeneral) { //re-establishing chartDivGeneral as a child of chartCellGeneral after mobile screen
						chartCellGeneral.appendChild(chartDivGeneral);
					}
					//chartCellGeneral.insertBefore(chartDivGrabBut,chartDivGeneral);

				}


				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					//var chartDivGeneral= document.getElementsByClassName('chartDivClass2')
					chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral[0]);
				} else {
					//var chartDivGeneral = document.getElementById('chartDiv');
					chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral);

				}

				console.log(chartDivGeneral);
				console.log(chartDivGeneral.parentNode);
				console.log(chartDivGeneral);
				console.log(chartDivGeneral.parentNode);
				console.log(chartCellGeneral);
				chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral);
				chartDisplayButArr.push(chartDivGrabBut);

				(function (chartBarStates, chartPieStates) {
					chartDivGrabBut.addEventListener('click', function () {
						console.log(chartBarStates);
						console.log(chartPieStates);
						chartBarStates.clearChart();
						chartPieStates.clearChart();

						this.style.display = 'none';

					});
				})(chartBarStates, chartPieStates);


			} else if (arrSortClipped) { //Charting Inspections Types using arrSortClipped

				console.log('**********Inspections!');

				var barChartsGrab2 = document.getElementById('Charts3');
				var pieChartsGrab2 = document.getElementById('Charts4');
				console.log('This is pie2: ' + pieChartsGrab2);
				console.log('This is bar2: ' + barChartsGrab2);
				var chartCellGeneral = document.getElementById('chartCell2'); // referring to the '<td>' holding the div
				console.log(')))))))))))))))');
				console.log(chartCellGeneral);
				//var chartDivGeneral = document.getElementById('chartDiv2');

				data.addColumn('string', 'Inspection type');
				data.addColumn('number', 'Nos. carried out');

				var chartArr2 = [];
				for (var a = 0; a < arrSortClipped.length; a++) {
					var chartArr = [arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue, arrSortClipped[arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue]];
					console.log('Type Of chartArr ' + typeof (chartArr));
					console.log('First Array ' + chartArr);
					chartArr2.push(chartArr);
					console.log('First agregated array ' + chartArr2);
				}

				dataOpts = {
					title: 'Inspection Analysis',
					width: 400,
					height: 400
				};

				data.addRows(chartArr2);
				console.log('(((((((((((((((((');
				console.log(barChartsGrab2);
				console.log('=================');
				var chartBarStates = new google.visualization.BarChart(barChartsGrab2);
				console.log('---------');
				console.log(chartBarStates);
				chartBarStates.draw(data, dataOpts);
				var chartPieStates = new google.visualization.PieChart(pieChartsGrab2);
				chartPieStates.draw(data, dataOpts);

				chartDisplayArr.push(chartBarStates);
				chartDisplayArr.push(chartPieStates);

				var chartDivGrabBut = document.createElement('input');
				chartDivGrabBut.setAttribute('type', 'button');
				chartDivGrabBut.setAttribute('value', 'Done');
				//console.log(chartDivGeneral);
				//console.log(chartDivGeneral.parentNode);
				//console.log(chartCellGeneral);


				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					//var chartDivGeneral= document.getElementsByClassName('chartDivClass2');
					if (chartDivGeneral[0].parentNode != chartCellGeneral) { //re-establishing chartDivGeneral as a child of chartCellGeneral after mobile screen
						//chartCellGeneral.appendChild(chartDivGeneral[0]);
						console.log('This is [0] for inspections:');
						console.log(chartDivGeneral[0]);
					}
					//chartCellGeneral.insertBefore(chartDivGrabBut,chartDivGeneral[0]);
				} else {
					var chartDivGeneral = document.getElementById('chartDiv2');
					if (chartDivGeneral.parentNode != chartCellGeneral) { //re-establishing chartDivGeneral as a child of chartCellGeneral after mobile screen
						chartCellGeneral.appendChild(chartDivGeneral);
					}
					//chartCellGeneral.insertBefore(chartDivGrabBut,chartDivGeneral);

				}


				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					//var chartDivGeneral= document.getElementsByClassName('chartDivClass2')
					chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral[0]);
				} else {
					//var chartDivGeneral = document.getElementById('chartDiv');
					chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral);

				}


				console.log(chartCellGeneral);
				console.log(chartDivGeneral);


				chartCellGeneral.insertBefore(chartDivGrabBut, chartDivGeneral);
				chartDisplayButArr.push(chartDivGrabBut);


				(function (chartBarStates, chartPieStates) {
					chartDivGrabBut.addEventListener('click', function () {
						console.log(chartBarStates);
						console.log(chartPieStates);
						chartBarStates.clearChart();
						chartPieStates.clearChart();

						this.style.display = 'none';

					});
				})(chartBarStates, chartPieStates);


			}

		}


		function DrawChart2(arrUI) {
			var barChartsGrab = document.getElementById('Charts');
			var pieChartsGrab = document.getElementById('Charts2');

			alert('Charting for M&E...');

			var dataOpts;

			var data = new google.visualization.DataTable();

			if (arrUI) {
				data.addColumn('string', 'States');
				data.addColumn('number', 'Nos. of Inspections');
				var chartArr2 = [];

				for (var a = 0; a < arrUI.length; a++) {
					var chartArr = [arrUI[a].getAttribute('InspType'), arrUI[arrUI[a].getAttribute('InspType')]];
					console.log('Type Of chartArr ' + typeof (chartArr));
					console.log('First Array ' + chartArr);
					chartArr2.push(chartArr);
					console.log('First agregated array ' + chartArr2);
				}

				dataOpts = {
					title: 'M&E Analysis',
					width: 400,
					height: 400
				};
			}

			data.addRows(chartArr2);

			var chart = new google.visualization.BarChart(barChartsGrab);
			chart.draw(data, dataOpts);
			var chart = new google.visualization.PieChart(pieChartsGrab);
			chart.draw(data, dataOpts);
		}

		function DrawChart3(arrUI) {
			alert('Charting for M&E...');

			var dataOpts;

			data = new google.visualization.DataTable();

			if (arrUI) {
				data.addColumn('string', 'Type of Inspection');
				data.addColumn('number', 'Nos. of Inspections');
				//data.addColumn('string', 'Type of Findings');
				//data.addColumn('number', 'Findings');
				var chartArr2 = [];

				for (var a = 0; a < arrUI.length; a++) {
					var chartArr = [arrUI[a].getAttribute('InspType'), arrUI[arrUI[a].getAttribute('InspType')]];
					//var chartArr = [[arrUI[a].getAttribute('InspType'), arrUI[arrUI[a].getAttribute('InspType')]], [arrUI[a].getElementsByTagName('Finds')[0].firstChild.data,arrUI[arrUI[a].getElementsByTagName('Finds')[0].firstChild.data]]];
					console.log('Type Of chartArr ' + typeof (chartArr));
					console.log('First Array ' + chartArr);
					chartArr2.push(chartArr);
					console.log('First agregated array ' + chartArr2);
				}

				dataOpts = {
					title: 'M&E Analysis',
					width: 400,
					height: 400
				};
			}

			data.addRows(chartArr2);

			var dashBoardStat = new google.visualization.Dashboard(document.getElementById('MEDashboard'));
			var dashCntrl = new google.visualization.ControlWrapper({
				'controlType': 'NumberRangeFilter',
				'containerId': 'MENumFilter',
				'options': {
					'filterColumnLabel': 'Nos. of Inspections',
					'minValue': 1,
					'maxValue': 10
				},
				'state': { 'lowValue': 3, 'highValue': 8 }

			});

			var dashCntrl2 = new google.visualization.ControlWrapper({
				'controlType': 'CategoryFilter',
				'containerId': 'MECatFilter',
				'options': {
					'filterColumnLabel': 'Type of Inspection',
					'ui': {

						'allowTyping': true,
						'allowMultiple': true,
						'caption': 'Select a State'
					}
				}

			});

			var dashChartPie = new google.visualization.ChartWrapper({
				'chartType': 'PieChart',
				'containerId': 'MEChartPie',
				'options': {
					'width': '200',
					'height': '200',
					'pieSliceText': 'Label'
				},
				'view': { 'columns': [0, 1] }
			});

			var dashChartBar = new google.visualization.ChartWrapper({
				'chartType': 'BarChart',
				'containerId': 'MEChartBar',
				'options': {
					'width': '200',
					'height': '200'

				},
				'view': { 'columns': [0, 1] }
			});


			var dashChartColumn = new google.visualization.ChartWrapper({
				'chartType': 'ColumnChart',
				'containerId': 'MEChartColumn',
				'options': {
					'width': '200',
					'height': '200'

				},
				'view': { 'columns': [0, 1] }
			});

			var dashChartLine = new google.visualization.ChartWrapper({
				'chartType': 'LineChart',
				'containerId': 'MEChartLine',
				'options': {
					'width': '200',
					'height': '200'

				},
				'view': { 'columns': [0, 1] }
			});

			var dashChartTable = new google.visualization.ChartWrapper({
				'chartType': 'Table',
				'containerId': 'MEChartTable',
				'options': {
					'width': '200',
					'height': '200'
				},
				'view': { 'columns': [0, 1] }
			});


			dashBoardStat.bind([dashCntrl, dashCntrl2], [dashChartBar, dashChartPie, dashChartColumn, dashChartLine, dashChartTable]);
			dashBoardStat.draw(data);



			/*
			var editorWrapper = new google.visualization.ChartWrapper({
																			'chartType':'LineChart',
																			'dataTable': data,
																			'options': {'title':'Customizing Reports', 'legend':'none'}
																			});
				google.visualization.events.addListener(editorWrapper, 'ready', function () {
																									google.visualization.events.addListener(editorWrapper.getChart(), 'click', function(ev) {console.log('Okay!');});
				
																									});															
				
			chartEditor = new google.visualization.ChartEditor();
			google.visualization.events.addListener(chartEditor, 'ok', redrawChart);
			chartEditor.openDialog(editorWrapper, {});
			*/

			chartEditor = new google.visualization.ChartEditor();


		}

		function DrawChart3Editor() {
			console.log('This is ChartEditor ' + chartEditor);
			console.log('This is ChartEditor ChartWrapper ' + chartEditor.getChartWrapper());
			//chartEditor = new google.visualization.ChartEditor();
			changeDataSource = document.createElement('select');

			for (var a = 0; a < chartDataOpts.length; a++) {
				changeDataSource.options[a] = new Option(chartDataOpts[a]);
				changeDataSource.options[a].value = chartDataVals[a];
			}




			changeDataSource.addEventListener('change', function () {
				alert('This is changing to...!' + this.value + 'setChartWrapper');
				var resultQuery3 = [];
				for (var a = 0; a < resultQuery.length; a++) {
					resultQuery3.push(resultQuery[a]);
				}
				//	google.visualization.events.addListener(chartEditor, 'ok', function () {	
				var datTab = DrawChart4(ArrayFixQueryChartChange(resultQuery3, this.value), this.value);
				console.log(datTab);
				editorWrapper.setDataTable(datTab);
				editorWrapper.setChartType("PieChart");
				chartEditor.closeDialog();
				chartEditor.openDialog(editorWrappper, { 'dataSourceInput': changeDataSource });
				//chartEditor.getChartWrapper().draw(document.getElementById('MEChartEditor'));
				//chartEditor.getChartWrapper().setChartType("PieChart");
				alert(editorWrapper.getChartType());
				//chartEditor.getChartWrapper().setDataTable(DrawChart4(ArrayFixQueryChartChange(resultQuery3, this.value), this.value));
				console.log('This is the chartwrapper now: ' + chartEditor.getChartWrapper());
				console.log(chartEditor.getChartWrapper());
				console.log(chartEditor.getChartWrapper().getDataTable());

				chartEditor.setChartWrapper(chartEditor.getChartWrapper());//chartEditor.getChartWrapper().draw(document.getElementById('MEChartEditor'));
				//	});
			});

			//google.visualization.events.addDomListener(changeDataSource,'change', function() {console.log('This is changing...!');chartEditor.getChartWrapper().setDataTable(DrawChart3(ArrayFixQuery(resultQuery, 'NoC')));});

			editorWrapper = new google.visualization.ChartWrapper({
				'chartType': 'LineChart',
				'dataTable': data,
				'options': { 'title': 'Customizing Reports', 'legend': 'none' }
			});
			/*
			google.visualization.events.addListener(editorWrapper, 'ready', function () {
																								google.visualization.events.addListener(editorWrapper.getChart(), 'click', function(ev) {console.log('Okay!');});
			
																								});															
			*/
			chartEditor = new google.visualization.ChartEditor();
			google.visualization.events.addListener(chartEditor, 'ok', redrawChart);
			console.log('This is ChartEditor2 ' + chartEditor);
			console.log('This is ChartEditor2 ChartWrapper ' + chartEditor.getChartWrapper());
			chartEditor.openDialog(editorWrapper, { 'dataSourceInput': changeDataSource });
			console.log('This is ChartEditor2 OpenDialog ChartWrapper ' + chartEditor.getChartWrapper());
			console.log(chartEditor.getChartWrapper());

		}

		function redrawChart() {
			console.log('Redrawing...');
			var MEChartEditorGrab = document.getElementById('MEChartEditor');

			chartEditor.getChartWrapper().draw(MEChartEditorGrab);

			var editChartEditor = document.createElement('Button');
			editChartEditor.setAttribute('type', 'input');
			editChartEditor.innerHTML = 'Edit Chart';

			editChartEditor.addEventListener('click', function () { console.log('Editing chart...!'); DrawChart3Editor(); });


			MEChartEditorGrab.appendChild(editChartEditor);


		}

		function DrawChart4(arrUI, sortParameter2) {
			alert('Charting for M&E...');

			var dataChartArr2;

			data = new google.visualization.DataTable();

			dataChartArr2 = (sortParameter2 == 'NoC' || sortParameter2 == 'InspType') ? DataAttribute() : DataFirstChild();

			var dataOpts;


			function DataAttribute() {
				if (arrUI) {
					data.addColumn('string', sortParameter2);
					data.addColumn('number', sortParameter2);
					//data.addColumn('string', 'Type of Findings');
					//data.addColumn('number', 'Findings');
					var chartArr2 = [];

					for (var a = 0; a < arrUI.length; a++) {
						var chartArr = [arrUI[a].getAttribute(sortParameter2), arrUI[arrUI[a].getAttribute(sortParameter2)]];
						//var chartArr = [[arrUI[a].getAttribute('InspType'), arrUI[arrUI[a].getAttribute('InspType')]], [arrUI[a].getElementsByTagName('Finds')[0].firstChild.data,arrUI[arrUI[a].getElementsByTagName('Finds')[0].firstChild.data]]];
						console.log('Type Of chartArr ' + typeof (chartArr));
						console.log('First Array ' + chartArr);
						chartArr2.push(chartArr);
						console.log('First agregated array ' + chartArr2);
					}

					dataOpts = {
						title: 'M&E Analysis',
						width: 400,
						height: 400
					};
					return chartArr2;
				}
			}

			function DataFirstChild() {
				if (arrUI) {
					data.addColumn('string', sortParameter2);
					data.addColumn('number', sortParameter2);
					//data.addColumn('string', 'Type of Findings');
					//data.addColumn('number', 'Findings');
					var chartArr2 = [];

					for (var a = 0; a < arrUI.length; a++) {
						var chartArr = [arrUI[a].getElementsByTagName(sortParameter2)[0].firstChild.data, arrUI[arrUI[a].getElementsByTagName(sortParameter2)[0].firstChild.data]];
						//var chartArr = [[arrUI[a].getAttribute('InspType'), arrUI[arrUI[a].getAttribute('InspType')]], [arrUI[a].getElementsByTagName('Finds')[0].firstChild.data,arrUI[arrUI[a].getElementsByTagName('Finds')[0].firstChild.data]]];
						console.log('Type Of chartArr ' + typeof (chartArr));
						console.log('First Array ' + chartArr);
						chartArr2.push(chartArr);
						console.log('First agregated array ' + chartArr2);
					}

					dataOpts = {
						title: 'M&E Analysis',
						width: 400,
						height: 400
					};
					return chartArr2;
				}
			}


			data.addRows(dataChartArr2);
			return data
		}

		function PopOver3() {
			/*
			   if (XMLHttpRequestObj2) {
				   alert ('Changed!');
				   XMLHttpRequestObj2.open ('GET', 'countNAFDAT-Details.xml');
			  
				   XMLHttpRequestObj2.onreadystatechange = function () {
					   if (XMLHttpRequestObj2.readyState ==4 && XMLHttpRequestObj2.status ==200) {
					  
						   var xmlDoc2 =XMLHttpRequestObj2.responseXML;
						   infoArrayDet2 = xmlDoc2.getElementsByTagName('Det');
						   infoArrayIdNo2 = xmlDoc2.getElementsByTagName('IdNo');
						   infoArrayAuditD = xmlDoc2.getElementsByTagName('AuditD');
						   infoArrayPers = xmlDoc2.getElementsByTagName('Pers');
						   infoArrayFinds = xmlDoc2.getElementsByTagName('Finds');
						   infoArrayRecs = xmlDoc2.getElementsByTagName('Recs');
						   infoArrayIPs = xmlDoc2.getElementsByTagName('IPs');
					  
						   alert ('This is length of Finds ' + infoArrayFinds.length);
					   }
			  
				   }
				   XMLHttpRequestObj2.send(null);
			  	
			   }
			   */
		}


		function LoadsUI(statesPara) { //Loads the Inspections selective UI, to minimize clutter on map
			console.log('Inside LoadsUI, This is val of the clicked state checkbox ' + statesPara);
			console.log('How about this?');
			//Sorting the types of InspTypes, i.e. atttributes

			arrUnsort = [];
			arrUnsort2 = [];
			arrUnsort3 = [];

			arrSortClippedDate = [];
			arrSortClippedDate2 = [];

			for (var a = 0; a < infoArrayInspType.length; a++) {
				console.log(infoArrayInspType.length);
				console.log('This is infoArrayPlac[a].firstChild.data ' + infoArrayPlac[a].firstChild.nodeValue);
				if (infoArrayPlac[a].firstChild.nodeValue == statesPara) {
					console.log('QUALIFIED' + a);
					//arrUnsort.push(infoArrayInspDet[a].firstChild.nodeValue);
					arrUnsort.push(infoArrayNoC[a]);
					arrUnsort2.push(infoArrayNoC[a]);
					arrUnsort3.push(infoArrayNoC[a]);
				}
				console.log('Number of inspections: ' + a);
				console.log('Inspection Type at a: ' + a);
			}
			//Clipping arrUnsort to one representative of each inspection
			//arranges in alphabetical order
			//alert ('UNSORT ' + arrUnsort)
			console.log('Array arrUnsort');
			console.log(arrUnsort);
			console.log(arrUnsort[0]);
			console.log(arrUnsort[1]);
			console.log(arrUnsort[2]);
			console.log(arrUnsort[3]);
			//var arrUnsort2 = arrUnsort;
			console.log(arrUnsort2);


			arrSortClippedDate = ArrayFixInspDateAndPL(arrUnsort);//arrSortClippedDate, holds unique inspections/ returns unique inspection, counting their PLs
			arrSortClippedDate2 = ArrayFixInspDateAndPL(arrUnsort3);
			//arrSortClippedDate2	= arrSortClippedDate;
			console.log('WAIT A MINUTE -array arrSortClippedDate: ');
			console.log(arrSortClippedDate);
			console.log('At index 0:');
			console.log(arrSortClippedDate[0]);
			console.log('At index 1:');
			console.log(arrSortClippedDate[1]);
			arrSortClipped = ArrayFixInspType(arrSortClippedDate2);//arrSortClipped holds unique inspections and their numbers.
			console.log('WAIT A MINUTE2 -array arrSortClippedDate: ');
			console.log(arrSortClippedDate);
			console.log('At index 0:');
			console.log(arrSortClippedDate[0]);
			console.log('At index 1:');
			console.log(arrSortClippedDate[1]);
			console.log('WAIT A MINUTE2 -array arrSortClippedDate2: ');
			console.log(arrSortClippedDate2);
			console.log('At index 0:');
			console.log(arrSortClippedDate2[0]);
			console.log('At index 1:');
			console.log(arrSortClippedDate2[1]);
			arrSortProdFinds = ArrayFixProductsAndFinds(arrUnsort2); //spits out everything for the selected State
			console.log('This is ArrayFixProductsAndFinds:');
			console.log(arrSortClippedDate);
			console.log('Length ClippedDate: ' + arrSortClippedDate.length);
			console.log(arrSortClipped);
			console.log('Length SortClipped: ' + arrSortClipped.length);
			console.log(arrSortProdFinds);
			console.log('Length ProdFinds: ' + arrSortProdFinds.length);

			for (var a = 0; a < arrSortClippedDate.length; a++) {
				if (arrSortClippedDate[a] == undefined) {
					console.log('Undefined found');
					console.log(a);
					console.log(arrSortClippedDate[a]);
				}
			}
			//arrSortClipped = ArrayFixInspType(arrUnsort);

			console.log('This is the content of arrSortClipped YES: ');
			console.log(arrSortClipped);

			/*
			console.log(uiForm);
			if (uiForm.children.length) {
					uiForm.removeChild (uiDivInspGrab);
			}
			*/

			//Emptying Inspections div of labels and checkboxes
			console.log(uiDivInspGrab);
			console.log(uiDivInspGrab.children.length);
			/*
			for (var b=0; b < uiDivInspGrab.children.length;b++) {
				console.log(b);
				console.log(uiDivInspGrab.children[b]);
				uiDivInspGrab.removeChild(uiDivInspGrab.children[b]);
			}
			*/
			while (uiDivInspGrab.children.length) {
				uiDivInspGrab.removeChild(uiDivInspGrab.children[0]);
			}

			for (var a = 0; a < arrSortClipped.length; a++) {

				var uiControlLab = document.createElement('Label');
				//alert ('Nature of label ' + uiControlLab);
				//alert ('Nature of label ' + uiControlLab);
				uiControlLab.innerHTML = arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue + ' (' + arrSortClipped[arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue] + ')'; //
				var uiControl = document.createElement('input');
				var uiControlBreak = document.createElement('br');
				uiControl.setAttribute('type', 'checkbox');

				//closure
				(function (a) {
					uiControl.addEventListener('click', function () {
						if (this.checked == false) {
							navUIFormParentGrab.style.opacity = '1.0'
							UnLoads(arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue);
						} else {
							console.log('Plotting...');
							navUIFormParentGrab.style.opacity = '0.9';
							//uiDivInspGrab.style.opacity = '0.9';
							Loads(arrSortClipped[a].getElementsByTagName('InspType')[0].firstChild.nodeValue, statesPara, arrSortClippedDate);
						}
					});
				})(a);//end of function

				uiDivInspGrab.appendChild(uiControlLab);
				uiDivInspGrab.appendChild(uiControl);
				uiDivInspGrab.appendChild(uiControlBreak);

				//alert ('Boolean value' + uiForm.childNodes);
				console.log('This is the length of uiDiv ' + uiDivInspGrab.children.length);
			}

			//navUIFormParentGrab.appendChild(uiDiv);

			boolUiDiv = !(boolUiDiv);

			var inspCharts = document.createElement('input');
			inspCharts.setAttribute('type', 'button');
			inspCharts.setAttribute('value', 'Chart Inspections per State');
			inspCharts.addEventListener('click', function () {
				navFormDivVar = 'chartDivGrab';
				//alert ('Analysing States...');
				google.setOnLoadCallback(DrawChart(null, arrSortClipped));

				for (var a = 0; a < navFormDiv.children.length; a++) {
					navFormDiv.removeChild(navFormDiv.children[a]);
				}
				//document.getElementsByTagName('body')[0].removeChild(barChartsGrab);
				//document.getElementsByTagName('body')[0].removeChild(pieCharts2Grab);

				//var chartDiv = document.createElement('div');
				//chartDiv.setAttribute('class', 'chartDivClass');

				//chartDivGrab.appendChild(barChartsGrab);
				//chartDivGrab.appendChild(pieCharts2Grab);

				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					navFormDivVar = 'chartDivGrab';
					navFormDiv.appendChild(chartDivGrab);
					navFormDiv.style.width = "100%";

					timesSymbol = document.createElement('a');
					timesSymbol.setAttribute('href', 'javascript:void(0)');
					timesSymbol.setAttribute('class', 'closeNavForm');
					timesSymbol.setAttribute('id', 'closeNavForm');
					timesSymbol.addEventListener('click', closeNavForm);
					timesSymbol.innerHTML = '&times';


					navFormDiv.appendChild(timesSymbol);
				}
				console.log('bool val:');
				console.log(phoneSize);
			});

			uiDivInspGrab.appendChild(inspCharts);

			if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {

				//Attempt to empty document.body of laptop view of States
				/*
				for (var b=0; stateScanForm.children.length;b++) {
					stateScanForm.removeChild(stateScanForm.children[b]);
				}
				*/

				//Emptying parent div of States
				/*
				for (var b=0; navUIFormParentGrab.children.length;b++) {
					navUIFormParentGrab.removeChild(navUIFormParentGrab.children[b]);
				}
				*/



				//navUIFormGrab.appendChild(uiDivScan);
				console.log('Appending...!');
				//uiDivInspGrab.style.height = '30%';
				//uiDivInspGrab.style.marginTop = '5%';
				//uiDivInspGrab.style.position = 'relative';
				//uiDivInspGrab.style.marginBottom = '5%';
				//uiDivInspGrab.style.background = "#ececec";
				navUIFormParentGrab.appendChild(uiDivInspGrab);
				console.log('Appended!');
				//navUIFormParentGrab.style.height = '95%'; //This parent has already being set in UIMaker
				//document.body.appendChild(navUIFormParentGrab);//This parent has already being set in UIMaker


			} else {
				/*
				stateScanForm.appendChild(uiDivScan);
				console.log('Length of Forms ' + stateScanForm.children.length);
				document.body.insertBefore(stateScanForm, MEDashboardGrab);
				console.log('Length in body ' + document.body.children.length);
				*/
				console.log('---------');
				console.log('Adding to form...!');
				uiForm.appendChild(uiDivInspGrab);
				inspScanParentGrab.appendChild(uiForm);
				//document.getElementsByTagName('body')[0].insertBefore(uiForm, MEDashboardGrab);
			}

		}




		function UnLoads(filteredInsp, statesPara2) {
			//Generally for modifying map, when States, and Inspection types is unchecked
			console.log('STATE ' + statesPara2)

			if (statesPara2 == null) { //modifying inspection types only

				for (var b = 0; b < trackArrSpec[filteredInsp].length; b++) { //making a copy of what on map for helping removing rendered directions
					directionsMarkerRemovalArr.push(trackArrSpec[filteredInsp][b]);
				}
				console.log(directionsMarkerRemovalArr);

				for (var a = 0; a < trackArrSpec[filteredInsp].length; a++) {
					trackArrSpec[filteredInsp][a].setMap(null);
				}
				delete trackArrSpec[filteredInsp];
			} else {
				for (var a in trackArrSpec) { //modifying states
					console.log('STATE trackArrSpec');
					for (var b = 0; b < trackArrSpec[a].length; b++) {
						console.log('For states only');
						console.log('Type of inspection ' + trackArrSpec[a]);
						console.log('Length of Type of inspection ' + trackArrSpec[a].length);
						trackArrSpec[a][b].setMap(null);
					}
				}
				console.log(uiForm);
				uiForm.removeChild(uiDivInspGrab);
			}
		}

		function Loads(filteredInsp, statesPara2, arrSortClipped2) {
			console.log('We are in  Loads');
			console.log(arrSortClipped2);
			mapOverMarkerArr = [];

			PopMapOverDisp(filteredInsp, statesPara2, arrSortClipped2);

			//necessary, cool piece of code
			trackArrSpec[filteredInsp] = mapOverMarkerArr;

			boolArr[filteredInsp] = !boolArr[filteredInsp];
			// end of bigger 'if'
		}// end of function	


		function PopMapOverDisp(filteredInsp, statesPara2, arrSortClipped2) {


			console.log('We are in  PopMapOverDisp');
			console.log(arrSortClipped2);
			//ClearMarkers() //in case of repeat 'Upload Nigeria' - to clear any 'Specs'
			//alert ('Commencing Population');

			//Emptying the array, readying it for next rendering
			mappableArr = [];
			singlesArr = []; //for holding singly-occuring NoCs
			duplicateArrs = []; // for holding duplicate-occuring NoCs
			var contentArr = [];
			var mappableArrAlias = [];
			var contentArrAnx = [];
			var toggleRecentHistory = true;

			console.log('arrSortClipped2Date:');
			console.log(arrSortClipped2);
			console.log('Length of arrSortClipped2Date:');
			console.log(arrSortClipped2.length);
			console.log(arrSortClipped2[0]);
			console.log(arrSortClipped2[1]);
			console.log(arrSortClipped2[2]);



			if (filteredInsp == null && statesPara2 == null) {
				console.log('SEARCHING...');
				for (var i = 0; i < arrSortClipped2.length; i++) {
					filteredInsp = arrSortClipped2[i].getElementsByTagName('InspType')[0].firstChild.nodeValue;
					statesPara2 = arrSortClipped2[i].getElementsByTagName('State')[0].firstChild.nodeValue;
					console.log('Inspection Type: ' + filteredInsp + " State: " + statesPara2);
					//Creating Marker
					console.log(arrSortClipped2[i].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					//console.log(arrSortClipped2[i+1].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					if (arrSortClipped2[i].getElementsByTagName('InspType')[0].firstChild.nodeValue == filteredInsp && arrSortClipped2[i].getElementsByTagName('State')[0].firstChild.nodeValue == statesPara2) {
						mappableArr.push(arrSortClipped2[i]); //mappable satisfies State and InspectionType
						mappableArrAlias.push(arrSortClipped2[i]);

						var mappableArr2;

						console.log('These are mappable arrays ' + mappableArr);
						console.log(mappableArr);
						console.log('This is one of the elements of the mappable arrays ' + mappableArr[0].getElementsByTagName('Latitude')[0].firstChild.data);

					}

				}
			} else {
				console.log('WEEKLY...');
				for (var i = 0; i < arrSortClipped2.length; i++) {
					console.log('Inspection Type: ' + filteredInsp + " State: " + statesPara2);
					//Creating Marker
					console.log(arrSortClipped2[i].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					//console.log(arrSortClipped2[i+1].getElementsByTagName('InspType')[0].firstChild.nodeValue);
					if (arrSortClipped2[i].getElementsByTagName('InspType')[0].firstChild.nodeValue == filteredInsp && arrSortClipped2[i].getElementsByTagName('State')[0].firstChild.nodeValue == statesPara2) {
						mappableArr.push(arrSortClipped2[i]); //mappable satisfies State and InspectionType
						mappableArrAlias.push(arrSortClipped2[i]);

						var mappableArr2;

						console.log('These are mappable arrays ' + mappableArr);
						console.log(mappableArr);
						console.log('This is one of the elements of the mappable arrays ' + mappableArr[0].getElementsByTagName('Latitude')[0].firstChild.data);

					}

				}
			}

			console.log(typeof (mappableArr));
			var mappableArrNoC = [];


			//mappableArr.sort();

			//Separating repeating companies from single occurring companies

			//var mappableArrCombined = [];
			console.log(mappableArr);
			console.log('Is this undefined? ' + mappableArr[0].getElementsByTagName('Latitude')[0].firstChild.data);
			//mappableArrCombined = ArrayFix2(mappableArr);

			mappableArr.sort(comp);
			mappableArrAlias.sort(comp);

			function comp(a, b) { return (a.getAttribute('NoC')).localeCompare(b.getAttribute('NoC')); }

			for (var b = 0; b < mappableArr.length; b++) {
				mappableArrNoC.push(mappableArr[b].getAttribute('NoC'));
				console.log('Just the companies ' + mappableArr[b].getAttribute('NoC'));
				console.log(mappableArr);

			}


			//Checking out mappableArr to see if in alphabetical order
			for (var b = 0; b < mappableArr.length; b++) {
				console.log('In alphabetical order ' + mappableArr[b].getAttribute('NoC'));

			}
			console.log('Before ArrayFix2:' + mappableArr);
			console.log('Length before: ' + mappableArr.length)

			//mappableArr2: Content: Name of Company, Property: Numbers of company
			mappableArr2 = ArrayFix2(mappableArrAlias);//mappableArr2, single inspection units, number of company names
			console.log('After ArrayFix2:' + mappableArr);
			console.log('Length after: ' + mappableArr.length);


			console.log('Here is mappableArr2 ' + mappableArr2);
			console.log(mappableArr2);
			//console.log('The length of combined array ' + mappableArrCombined.length);
			//console.log('The last -or second -array holds the single ones ' + mappableArrCombined[1]);

			//	singlesArr = mappableArrCombined[1];

			//reassigning the returned combined arrays

			//console.log('This is singelesArr '+singlesArr);
			//console.log('This is singelesArr 1 Seen '+singlesArr[1].getAttribute('Seen'));
			var mappableArrTrimmed = ArrayFix3(mappableArrNoC);	//to work with function HandleContents 
			var mappableArrTrimmedFirstFirst = mappableArrTrimmed[0];
			var mappableArrTrimmedFirst = mappableArrTrimmed[1];
			console.log('This is the mappableArrtrimmedFirst array ' + mappableArrTrimmedFirst);
			console.log(mappableArrTrimmed[0]);
			console.log(mappableArrTrimmed);

			//console.log('This is mappableArrTrimmed ' + mappableArrTrimmed);
			for (var d = 0; d < mappableArr.length; d++) {
				console.log('Length ' + mappableArr.length);
				console.log('This is the sorted mappableArr ' + mappableArr2);
				console.log('This is the value of d ' + d);
				console.log(mappableArr);
				//console.log('Does this attribute show? ' +mappableArr[2].getAttribute('NoC'));
				//console.log('How about this element value? ' + mappableArr[2].getElementsByTagName('Latitude')[0].firstChild.data);
				//	console.log('Just the companies dddddd ' + mappableArr[d].getAttribute('NoC'));
				var mappableLat = mappableArr[d].getElementsByTagName('Latitude')[0].firstChild.data;
				//var mappableLat = mappableArr[d].getElementsByTagName('Latitude')[0].firstChild.data;
				var mappableLong = mappableArr[d].getElementsByTagName('Longitude')[0].firstChild.data;
				//var mappableIcon = mappableArr[d].getElementsByTagName('Icon')[0].firstChild.data;
				var mappableState = mappableArr[d].getElementsByTagName('State')[0].firstChild.data;
				mappableArrNoC = mappableArr[d].getAttribute('NoC');

				console.log('This is the name of company: ' + mappableArrNoC);

				//console.log('These are the current singles parameters for plotting ' + mappableLat, mappableLong, mappableIcon, mappablePlac);

				var mapOverMarker = new google.maps.Marker({
					map: mapOverDisp,
					position: new google.maps.LatLng(mappableLat, mappableLong),
					//icon:mappableIcon,
					//animation: aniVar,
					title: mappableState
				});

				mapOverBounds.extend(mapOverMarker.getPosition());//use mapOverBounds2 for relativity, not to be lost in Siberia.
				mapOverMarkerArr.push(mapOverMarker);//Marker Array: populating.  This array will help us remove them when wanting to render specifics

				//Do some adjustments here to cater for the last element in array


				if (mappableArr[d].getAttribute('NoC') != ((d < mappableArr.length - 1) ? mappableArr[d + 1].getAttribute('NoC') : 12345)) {
					console.log('so far, so good. Done');
					mapOverMarker.setMap(mapOverDisp);
					mapOverMarkerArr.push(mapOverMarker);
				}


				//console.log('Can you read this ' + mappableArr[2].getAttribute('NoC'));	
				console.log('Value of d is ' + d);
				var specificNoC = mappableArr[d].getAttribute("NoC");
				//Creating the closure
				(function (mapOverMarker, d, specificNoC, contentArrAnx, mappableArr, mappableArrTrimmedFirstFirst, arrSortProdFinds) {
					console.log('What is the value of d: ' + d);
					//var imgTrans = mappableArr[d].getElementsByTagName('FindsImg')[0].firstChild.data; //for use in recentHistory setContent;

					console.log('Specific name of company is: ' + specificNoC);
					console.log('Specific array is: ')
					console.log(mappableArr);
					var recentHistory = '<div id = "recentHistoryDiv"><table><tr><td><label id = "labBut"></label></td></tr>' +
						'<tr><td><u>Name of Company: </u></td>' + '<td>' + mappableArr[d].getAttribute('NoC') + '</td></tr>' +
						'<tr><td><u>State: </u></td>' + '<td>' + mappableArr[d].getElementsByTagName('State')[0].firstChild.data + '</td></tr>' +
						'<tr><td><u>Type of Inspection: </u></td>' + '<td>' + mappableArr[d].getElementsByTagName('InspType')[0].firstChild.nodeValue + '</td></tr>' +
						'<tr><td><u>Production Line: </u></td>' + '<td>' + mappableArr[d].getElementsByTagName('PL')[0].firstChild.nodeValue + '</td></tr>' +
						'<tr><td><u>Production Names: </u></td>' + '<td>' + mappableArr[d].getElementsByTagName('ProductName')[0].firstChild.nodeValue + '</td></tr>' +
						'<tr><td><u>Date of Inspection: </u></td>' + '<td>' + mappableArr[d].getElementsByTagName('InspDate')[0].firstChild.data + '</td><td><input id ="reconcileBut" type ="button" value ="View Findings" /></td></tr>' + '</table></div>'; //onclick = "ReconcileProdAndFinds(\''+specificNoC+'\', \''+mappableArr[d].getElementsByTagName('InspID')[0].firstChild.data+'\', \''+mappableArr[d].getElementsByTagName('ProductName')[0].firstChild.data+'\', \''+mappableArr+'\')"


					contentArr.push(recentHistory);
					contentArrAnx.push(mappableArr[d].getAttribute('NoC'));

					//has to be independent from the other recentHistory
					console.log('&&&&&&&&&&&:');
					console.log('This is d: ' + d);


					google.maps.event.addListener(mapOverMarker, 'click', function () {
						console.log('VAL if d: ')
						CycleContent('mar')
					});


					function CycleContent(x) {
						console.log(d);
						console.log('Maptrimmed: ');
						console.log(mappableArrTrimmedFirstFirst);
						console.log('!!!!!-----!!!!!!!-----!!!!');
						console.log(mappableArr);
						console.log(mappableArr[d]);
						console.log(d);

						var mappableNoC = mappableArr[d].getAttribute('NoC'); //for use in HandleContent function for extra inspections
						console.log('contentArrAnx: ' + contentArrAnx);
						console.log('NoC for  use ' + mappableNoC);
						console.log('contentArr: ' + contentArr);


						if (mapOverMarker.getPosition() == mapOverMarkerDirection) {
							for (var a = 0; a < renderArr.length; a++) {
								renderArr[a].setMap(null);
							}
							for (var a = 0; a < markerComplexArr.length; a++) { //if there are none, length=0, and it won't run
								markerComplexArr[a].setMap(null);
							}
							//txtDirectionsDiv.innerHTML='';
						} else {
							//txtDirectionsDiv.innerHTML='';
							mapOverMarkerDirection = mapOverMarker.getPosition(); // for setting directions
							mapOverBoundsDirections.extend(mapOverMarkerDirection);
						}

						mapOverMarker.setAnimation(null); //How does this work - shouldn't it be something like 'e.setAnimation'

						//Posting: is this still useful?
						//Post(infoArrayIdNoAttr);
						// adding clicked marker into array: to know which to deactivate bounce

						//BOUNCING STUFF
						//mapOverMarkerArrBounce.push(infoArrayIdNoAttr);

						//alert ('This is the current id ' + currentIdNo);
						//console.log('This is working? ' + mappableArr[2].getAttribute('NoC'));
						console.log('And this is value of d ' + d);

						if (!mapOverInfo) {
							mapOverInfo = new google.maps.InfoWindow({
								//content:recentHistory
							});
						}

						if (!recentHistory2) {
							recentHistory2 = '<div id = "buts"><input id = "prevBut" name = "previBut" type = "button" value = "Previous"></input><input id = "nextBut" type = "button" value = "Next"></input><input id = "tabBut" type = "button" value = "Tabulate"></input></div>';
						}

						var recentHistory3 = '<br/><div><input type ="button" value = "Direction" onclick = "GeolocateOver(\'simple\')"/>' +
							'<input type = "button" value = "Directions(Detailed)" onclick = "GeolocateOver(\'complex\')" />' +
							'<input type = "button" id = "DirectDone" value = "Done">' +
							'<input type = "button" id = "Track" value = "Track">' +
							'<input type = "button" id = "EndTrack" value = " End Track">' +
							'<input type = "button" id = "remoteScan" value = "Scan" />' +
							'<input type = "button" id = "remoteScanDone" value ="End Scan"/></div>';

						console.log('HOW MANY TIMES');

						//determining if to add infoHistory2
						//console.log('This is contentArrAnx ' + contentArrAnx);
						contentArrAnx[mappableNoC] = 0;
						console.log(mappableArr2); //mappable2 is used for determining mutiInfowindow attached to one marker
						for (var c = 0; c < mappableArr2.length; c++) {
							if (mappableArr2[mappableNoC] > 1) {
								console.log('Cycling!');
							}
							/*
							if (mappableArrNoC[c] ==mappableNoC) { //mappableArrNoC is the raw untrimmed array of companies
								contentArrAnx[mappableNoC]++;
							}
							*/
						}
						console.log('Number to expect: ' + contentArrAnx[mappableNoC]);
						console.log('Contents of contentArrAnx: ' + contentArrAnx);
						console.log('MappableArr2 property value for mappableNoC: ' + mappableArr2[mappableNoC]);

						if (mappableArr2[mappableNoC] > 1) {

							(function (mappableNoC) { //is this closure necessary?

								//tabButDiv.addEventListener ('click', function (e) {TabulateMappableArrs(e);});
								console.log('This is mapArrTrimmed[0]:  ' + mappableArrTrimmed[0]);
								console.log(mappableArrTrimmed[0]);
								//contentArr: recentHistory
								//contentArrAnx: Names of mappable companies
								//mappableNoC: Specific company in questoin
								//mappableArrTrimmed[0]: Property: Number of companies Names 

								contCycle = HandleContentArr(contentArr, contentArrAnx, mappableNoC, mappableArrTrimmedFirstFirst);
								for (var a in contCycle) {
									console.log('Enumerating properties:' + a + '=' + contCycle[a]);
								}
								console.log('Content of contCycle: ' + contCycle);
								console.log('Length of contCycle: ' + contCycle.length);
								console.log('Number of particular mappableArr ' + contCycle[mappableNoC]); // tells us how many infotabs to expect for clicked marker

								//prevButDiv.addEventListener ('click', function (e) {CycleContent(e);});

								//nextButDiv.addEventListener ('click', CycleContent);



							})(mappableNoC);
							//mapOverInfo.setContent(CycleContent());

							//alert (x.latLng);

							if (x == 'mar') {
								console.log(x);
								console.log('contCycle:' + (contCycle[mappableNoC]));
								console.log(contCycle.length);
								console.log(contCycle);
								//This will always evaluate to false, hence pass the second function.
								var cycle = (contCycle[mappableNoC] == contCycle.length) ? --(contCycle[mappableNoC]) : (contCycle[mappableNoC]); //no incrementing -goes for original and first value, untouched by post or pre-increment operators.  So doing, when you change a form at 7/7 (or max/max) to table, and try changing it  back, it will not change to undefined (8/7)
								console.log('cycle: ' + cycle);
								console.log(contCycle[cycle]);
								//var cycle = contCycle[mappableNoC];
							}

							//Prev button has a name value; Next button, doesn't, leading the conditional in the below line to evaluate to false
							//var cycle = (x.target.name=='previBut')?--contCycle[mappableNoC]:++contCycle[mappableNoC]; //to determine which button was was clicked, Prev or Next


							if (x == 'previ') {
								console.log(x);
								console.log('contCycle:' + (contCycle[mappableNoC]));
								console.log(contCycle.length);
								var cycle = --contCycle[mappableNoC]; //no incrementing -goes for original and first value, untouched by post or pre-increment operators.  So doing, when you change a form at 7/7 (or max/max) to table, and try changing it  back, it will not change to undefined (8/7)
								console.log('cycle: ' + cycle);
							}

							if (x == 'next') {
								console.log(x);
								console.log('contCycle:' + (contCycle[mappableNoC]));
								console.log(contCycle.length);
								var cycle = ++contCycle[mappableNoC]; //no incrementing -goes for original and first value, untouched by post or pre-increment operators.  So doing, when you change a form at 7/7 (or max/max) to table, and try changing it  back, it will not change to undefined (8/7)
								console.log('cycle: ' + cycle);
							}

							if (x == 'formi') {
								//console.log(x);
								var cycle = (--contCycle[mappableNoC] > 0) ? --contCycle[mappableNoC] : ++contCycle[mappableNoC];//no incrementing -goes for original and first value, untouched by post or pre-increment operators.  So doing, when you change a form at 7/7 (or max/max) to table, and try changing it  back, it will not change to undefined (8/7)
							}



							console.log('Length of concerned property: ' + contCycle[mappableNoC]);
							//console.log('x is: ' + x.target.name);
							//var cycle = --contCycle[mappableNoC]
							mapOverInfo.setContent(contCycle[cycle] + recentHistory2 + recentHistory3);
							mapOverInfo.open(mapOverDisp, mapOverMarker);
							recentHistoryDivGrab = document.getElementById('recentHistoryDiv');
							console.log(recentHistoryDivGrab);
							reconcileButGrab = document.getElementById('reconcileBut');
							console.log(reconcileButGrab);

							//	(function (d, mappableArr) {
							reconcileButGrab.addEventListener('click', function () {
								console.log('=================');
								console.log('Specific Company: ' + specificNoC);
								console.log('ID: ' + mappableArr[cycle].getElementsByTagName('InspID')[0].firstChild.data);
								console.log('Product Name: ' + mappableArr[cycle].getElementsByTagName('ProductName')[0].firstChild.data);
								console.log('Present Mappable: ');
								console.log(mappableArr);
								console.log(typeof (mappableArr));
								console.log(arrSortProdFinds);
								console.log('Value of d: ');
								console.log(d);
								ReconcileProdAndFinds(specificNoC, mappableArr[cycle].getElementsByTagName('InspID')[0].firstChild.data, mappableArr[cycle].getElementsByTagName('ProductName')[0].firstChild.data, mappableArr, arrSortProdFinds);
							});
							//})(d, mappableArr);

							DirectDoneGrab = document.getElementById('DirectDone');
							remoteScanGrab = document.getElementById('remoteScan');
							TrackGrab = document.getElementById('Track');
							EndTrackGrab = document.getElementById('EndTrack');

							DirectDoneGrab.addEventListener('click', function () { //for removing the rendered path
								//if (mapOverRender) { //checking if present, so that first click doesn't cause error in trying to remove what does not exist
								console.log('Clearing panel...!');
								mapOverRender.setPanel(null); //clearing directions panel
								//}
								for (var a = 0; a < renderArr.length; a++) {
									renderArr[a].setMap(null);
								}
								for (var a = 0; a < markerComplexArr.length; a++) { //if there are none, length=0, and it won't run
									markerComplexArr[a].setMap(null);
								}
								//txtDirectionsDiv.innerHTML='';
							});
							remoteScanGrab.addEventListener('click', function () {
								console.log(mapOverMarker.getPosition());
								FindPlaces(null, mapOverMarker.getPosition());
							});

							TrackGrab.addEventListener('click', function () {
								console.log('Clicked me!');
								GeolocateOver('Track');
							});

							EndTrackGrab.addEventListener('click', function () {
								console.log('End Tracking...!');
								navigator.geolocation.clearWatch(watchId);
								geoMarkerOver.setAnimation(null);
								//GeolocateOver('Track');
							});

							if (contCycle[mappableNoC] == 0) {
								butsDiv = document.getElementById('buts');
								butsDiv.getElementsByTagName('input')[0].style.visibility = 'hidden';
								console.log('hiding previous now...');

							}

							if (contCycle[mappableNoC] == contCycle.length - 1) {
								//toggleRecentHistory =true;
								butsDiv = document.getElementById('buts');
								butsDiv.getElementsByTagName('input')[1].style.visibility = 'hidden';
								console.log('hiding next now...');

							}

							//var prevButDiv = document.getElementById('prevBut');
							//prevButDiv.addEventListener ('click', function (e) {CycleContent(e);});

							var prevButDiv = document.getElementById('prevBut');
							prevButDiv.addEventListener('click', function () { CycleContent('previ', d); });


							var nextButDiv = document.getElementById('nextBut');
							nextButDiv.addEventListener('click', function () { CycleContent('next', d); });


							var tabButDiv = document.getElementById('tabBut');
							tabButDiv.addEventListener('click', function () { TabulateMappableArrs(mappableNoC) });
							console.log('Passed here');
							console.log('Number left: ' + contCycle[mappableNoC]);
							var labButDiv = document.getElementById('labBut');
							labButDiv.innerHTML = (contCycle[mappableNoC] + 1) + "/" + contCycle.length;

							//console.log('Passed here');
							//console.log('Number left: ' + contCycle[mappableNoC]);
							console.log('contCycle Length: ' + contCycle.length);
						}

						else { //i.e for companies with less than one record
							mapOverInfo.setContent(recentHistory + recentHistory3);
							mapOverInfo.open(mapOverDisp, mapOverMarker);

							recentHistoryDivGrab = document.getElementById('recentHistoryDiv');
							reconcileButGrab = document.getElementById('reconcileBut');
							reconcileButGrab.addEventListener('click', function () {
								console.log('=================');
								console.log('Specific Company: ' + specificNoC);
								console.log('ID: ' + mappableArr[0].getElementsByTagName('InspID')[0].firstChild.data);
								console.log('Product Name: ' + mappableArr[d].getElementsByTagName('ProductName')[0].firstChild.data);
								console.log('Present Mappable: ');
								console.log(mappableArr);
								console.log(typeof (mappableArr));
								console.log(arrSortProdFinds);
								console.log('Value of d: ');
								console.log(d);
								ReconcileProdAndFinds(specificNoC, mappableArr[d].getElementsByTagName('InspID')[0].firstChild.data, mappableArr[d].getElementsByTagName('ProductName')[0].firstChild.data, mappableArr, arrSortProdFinds);
							});

							DirectDoneGrab = document.getElementById('DirectDone');
							remoteScanGrab = document.getElementById('remoteScan');
							TrackGrab = document.getElementById('Track');
							EndTrackGrab = document.getElementById('EndTrack');


							DirectDoneGrab.addEventListener('click', function () { //for removing the rendered path
								//if (mapOverRender) { //checking if present, so that first click doesn't cause error in trying to remove what does not exist
								console.log('Clearing panel...!');
								if (mapOverRender) {
									mapOverRender.setPanel(null); //clearing directions panel
								}
								//}
								for (var a = 0; a < renderArr.length; a++) {
									renderArr[a].setMap(null);
								}
								for (var a = 0; a < markerComplexArr.length; a++) { //if there are none, length=0, and it won't run
									markerComplexArr[a].setMap(null);
								}
								//txtDirectionsDiv.innerHTML='';
							});
							remoteScanGrab.addEventListener('click', function () {
								console.log(mapOverMarker.getPosition());
								FindPlaces(null, mapOverMarker.getPosition());
							});

							TrackGrab.addEventListener('click', function () {
								console.log('Clicked me!');
								GeolocateOver('Track');
							});

							EndTrackGrab.addEventListener('click', function () {
								console.log('End Tracking...!');
								navigator.geolocation.clearWatch(watchId);
								geoMarkerOver.setAnimation(null);
								//GeolocateOver('Track');
							});

						}
						//
					}


					function TabulateMappableArrs(mappableNoC) {

						console.log('Tabulating');
						var tabDiv = document.createElement('div');
						var tabContentArr = document.createElement('table');

						tabContentArr.className = 'backy'; //doubles the effect
						tabContentArr.style.border = '4px solid green';

						var tabContentArrRow = tabContentArr.insertRow(0);
						tabContentArrRow.className = 'backy';
						var tabContentArrCellNoC = tabContentArrRow.insertCell(0);
						tabContentArrCellNoC.innerHTML = '<b>Name of Company<b>';
						var tabContentArrCellTypeOfInsp = tabContentArrRow.insertCell(1);
						tabContentArrCellTypeOfInsp.innerHTML = '<b>Type of Inspection<b>';
						var tabContentArrCellDateOfInsp = tabContentArrRow.insertCell(2);
						tabContentArrCellDateOfInsp.innerHTML = '<b>Date of Inspection<b>';
						var tabContentArrCellTeamLead = tabContentArrRow.insertCell(3);
						tabContentArrCellTeamLead.innerHTML = '<b>Team Leader<b>';
						var tabContentArrCellNameOfProduct = tabContentArrRow.insertCell(4);
						tabContentArrCellNameOfProduct.innerHTML = '<b>Name of Product</b>';
						var tabContentArrCellFindings = tabContentArrRow.insertCell(5);
						tabContentArrCellFindings.innerHTML = '<b>Findings</b>';
						var tabContentArrCellRecommendation = tabContentArrRow.insertCell(6);
						tabContentArrCellRecommendation.innerHTML = '<b>Recommendation</b>';

						for (var b = 0; b < contentArr.length; b++) {

							if (contentArrAnx[b] == mappableNoC) { //using contentArrAnx2, which is parallel to contentArr

								var tabContentArrRow = tabContentArr.insertRow(-1);
								tabContentArrRow.style.border = '1px solid green';
								var tabContentArrCellNoC = tabContentArrRow.insertCell(0);
								tabContentArrCellNoC.innerHTML = mappableArr[b].getAttribute('NoC');
								var tabContentArrCellTypeOfInsp = tabContentArrRow.insertCell(1);
								tabContentArrCellTypeOfInsp.innerHTML = mappableArr[b].getAttribute('InspType');
								var tabContentArrCellDateOfInsp = tabContentArrRow.insertCell(2);
								tabContentArrCellDateOfInsp.innerHTML = mappableArr[b].getElementsByTagName('InspDate')[0].firstChild.data;
								var tabContentArrCellTeamLead = tabContentArrRow.insertCell(3);
								tabContentArrCellTeamLead.innerHTML = mappableArr[b].getElementsByTagName('TeamLead')[0].firstChild.data;
								var tabContentArrCellNameOfProduct = tabContentArrRow.insertCell(4);
								tabContentArrCellNameOfProduct.innerHTML = mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.data + ' ' + mappableArr[b].getElementsByTagName('Strength')[0].firstChild.data + ', ' + mappableArr[b].getElementsByTagName('DosageForm')[0].firstChild.data + ' brand of ' + mappableArr[b].getElementsByTagName('Gen')[0].firstChild.data;
								var tabContentArrCellFindings = tabContentArrRow.insertCell(5);
								tabContentArrCellFindings.innerHTML = mappableArr[b].getElementsByTagName('Finds')[0].firstChild.data
								var tabContentArrCellRecommendation = tabContentArrRow.insertCell(6);
								tabContentArrCellRecommendation.innerHTML = mappableArr[b].getElementsByTagName('Recommendation')[0].firstChild.data;
							}
						}
						tabDiv.appendChild(tabContentArr);

						var formButton = document.createElement('input');
						formButton.setAttribute('type', 'button');
						formButton.setAttribute('name', 'formiBut');
						formButton.setAttribute('value', 'Form View');
						formButton.addEventListener('click', function () { CycleContent('formi') });
						tabDiv.appendChild(formButton);

						mapOverInfo.setContent(tabDiv);
					}









					/*
					function CycleContent() {
						
						//console.log('This is what: ' + which);
							if (toggleRecentHistory ==true) {
								mapOverInfo.setContent(contCycle[--contCycle[mappableNoC]] + recentHistory2);
								if (contCycle[mappableNoC] == 0) {
									toggleRecentHistory =false;
									butsDiv =document.getElementById('buts');
									butsDiv.getElementsByTagName('input')[0].style.visibility = 'hidden';
									console.log('hiding previous now...');
									
									//var labButDiv = document.getElementById('labBut');
									//labButDiv.innerHTML=contCycle[mappableNoC] + "/" + contCycle.length;
									
								}
							} else {
							
								mapOverInfo.setContent(contCycle[++contCycle[mappableNoC]] + recentHistory2);
								if (contCycle[mappableNoC] == 6) {
									toggleRecentHistory =true;
									butsDiv =document.getElementById('buts');
									butsDiv.getElementsByTagName('input')[1].style.visibility = 'hidden';
									console.log('hiding next now...');
									
									
									
								}
							}
							var prevButDiv = document.getElementById('prevBut');
							prevButDiv.addEventListener ('click', CycleContent);
							
							var nextButDiv = document.getElementById('nextBut');
							nextButDiv.addEventListener('click', CycleContent);
							
							var tabButDiv = document.getElementById('tabBut');
							tabButDiv.addEventListener ('click', TabulateMappableArrs);
							
							var labButDiv = document.getElementById('labBut');
							labButDiv.innerHTML= (contCycle[mappableNoC] +1) + "/" + contCycle.length;
							
							console.log('Passed here');
							console.log('Number left: ' + contCycle[mappableNoC]);
									
					}
					*/



				})(mapOverMarker, d, specificNoC, contentArrAnx, mappableArr, mappableArrTrimmedFirstFirst, arrSortProdFinds);//end of closure


			}// end of 'for'

			mapOverDisp.fitBounds(mapOverBounds);
			console.log('This is length of contentArr ' + contentArr.length);
			console.log('And this is the content ' + contentArr);



		}// end of PopMapOverDisp



		function ReconcileProdAndFinds(NoC, id, mappableD, mappableArr, arrSortProdFinds) {
			//console.log('Name of Company: '+ NoC);
			console.log('This is mappableArr:');
			console.log(mappableArr);
			//console.log(mappableArrForFinds[0].getElementsByTagName('ProductName').firstChild.nodeValue);
			console.log('ID Nos: ' + id);
			//console.log(mappableArr); // Unique inspections that qualify (pass State and InspectionType);
			//console.log(arrSortProdFinds); //Every Inspection for the selected State;
			console.log('First Element in mappable: ' + mappableArr[0].getElementsByTagName('PL')[0].firstChild.nodeValue);
			//mappableArr[0].getElementsByTagName('PL')[0].firstChild.nodeValue['ReconcileProdAndFindsBool'] = 'Btat';
			console.log(mappableArr[0].getElementsByTagName('PL')[0].firstChild.nodeValue['ReconcileProdAndFindsBool']);
			console.log(this);
			console.log(this.ReconcileProdAndFindsBool);
			//console.log(!(this.ReconcileProdAndFindsBool));
			/*
			this.ReconcileProdAndFindsBool = 'yam';
			console.log(this.ReconcileProdAndFindsBool);
			console.log(this.mango);
			*/

			//var ReconcileButGrab = document.getElementById('ReconcileBut');
			console.log(arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);


			if (recentHistoryDivGrab[id] == false) {
				console.log('Company name: ' + NoC);
				console.log(recentHistoryDivGrab[id]);
				console.log('Removing...');
				//console.log('Recon Bool: '+ arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ReconcileProdAndFindsBool']);
				//console.log('ReconBool Remove: '+arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue][mappableArr[0].getElementsByTagName('InspDate')[0].firstChild.nodeValue]);
				//console.log('Date: '+arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[b].firstChild.nodeValue]['InspDate']);
				//console.log('True');
				//console.log(recentHistoryDivGrab);
				recentHistoryDivGrab.removeChild(FindsTableDiv);
				reconcileButGrab.value = "Show Findings";
				//arrSortProdFinds[mappableD][NoC] = true;
				recentHistoryDivGrab[id] = true;
			} else {
				recentHistoryDivGrab[id] = false;
				console.log('Company name: ' + NoC);
				console.log(recentHistoryDivGrab[id]);
				console.log('Adding...');
				console.log('Length of mappableArr: ' + mappableArr.length);
				console.log(mappableArr.length);
				//console.log('Recon Bool: '+ arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ReconcileProdAndFindsBool']);
				//console.log('ReconBool Add: '+arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue][mappableArr[0].getElementsByTagName('InspDate')[0].firstChild.nodeValue]);
				//console.log('Date: '+arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspDate']);
				//arrSortProdFinds[mappableD][NoC] = false;
				FindsTableDiv = document.createElement('Div');
				FindsTable = document.createElement('Table');
				//console.log('Reconciling...');
				//console.log(mappableArr);
				//console.log(arrSortProdFinds);

				var FindsTableHead = FindsTable.createTHead();
				var FindsTableHeadRow = FindsTableHead.insertRow(0);
				FindsTableHeadRow.style.backgroundColor = 'Chartreuse';

				var FindsTableHeadRowProd = FindsTableHeadRow.insertCell(-1);
				FindsTableHeadRowProd.innerHTML = "ProductName";
				var FindsTableHeadRowDet = FindsTableHeadRow.insertCell(-1);
				FindsTableHeadRowDet.innerHTML = "Details";
				var FindsTableHeadRowObs = FindsTableHeadRow.insertCell(-1);
				FindsTableHeadRowObs.innerHTML = "Observation";
				var FindsTableHeadRowCat = FindsTableHeadRow.insertCell(-1);
				FindsTableHeadRowCat.innerHTML = "Category";
				var FindsTableHeadRowImg = FindsTableHeadRow.insertCell(-1);
				FindsTableHeadRowImg.innerHTML = "Image";


				for (var b = 0; b < mappableArr.length; b++) { //mappable, list of companies that satisfies InspectionType and State
					//console.log(arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]);
					console.log('Entered Mappable for table');
					console.log(mappableArr[b].getAttribute('NoC'));
					console.log(NoC);
					console.log(mappableArr);
					if (mappableArr[b].getAttribute('NoC') == NoC) { //is this necessary?
						console.log('Entered Mappable for NoC');
						if (mappableArr[b].getElementsByTagName('InspID')[0].firstChild.nodeValue == id) {//mappableArr[b].getElementsByTagName('InspID')[0].firstChild.nodeValue
							console.log('Entered Mappable for InspID');
							console.log('EQUAL ID');
							//if (mappableArr[b].getElementsByTagName('InspID')[0].firstChild.nodeValue == id)
							console.log('+++++++++++++');
							console.log(arrSortProdFinds);
							for (var a = 0; a < arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'].length; a++) {
								//console.log('This is details: '+arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'][a]);

								if (arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'][a] == id) {
									console.log('Using ID');
									console.log('Matiching ProdFinds Dets: ' + arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'][a]);
									console.log('Matiching ProdFinds ID: ' + arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['InspID'][a]);
									console.log('Matiching Mappble ID: ' + mappableArr[b].getElementsByTagName('InspID')[0].firstChild.nodeValue);
									var FindsTableRow = FindsTable.insertRow(-1);
									FindsTableRow.className = 'backy';
									var FindsTableRowProd = FindsTableRow.insertCell(-1);
									FindsTableRowProd.innerHTML = arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ProductName'][a];

									var FindsTableRowDet = FindsTableRow.insertCell(-1);
									FindsTableRowDet.innerHTML = arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindDets'][a];
									var FindsTableRowObs = FindsTableRow.insertCell(-1);
									FindsTableRowObs.innerHTML = arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindObs'][a];
									var FindsTableRowCat = FindsTableRow.insertCell(-1);
									FindsTableRowCat.innerHTML = arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindCat'][a];
									var FindsTableRowImg = FindsTableRow.insertCell(-1);
									FindsTableRowImg.innerHTML = arrSortProdFinds[mappableArr[b].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['FindImg'][a];
								}
							}

						} else {
							console.log('Id of mappable Element:' + mappableArr[b].getElementsByTagName('InspID')[0].firstChild.nodeValue);
							console.log(mappableArr[b]);
							console.log(mappableArr[b].getElementsByTagName('InspID')[0]);
						}
					}

					//arrSortProdFinds[mappableArr[0].getElementsByTagName('ProductName')[0].firstChild.nodeValue]['ReconcileProdAndFindsBool'] = false;
				}
				console.log(FindsTable);
				FindsTableDiv.appendChild(FindsTable);
				recentHistoryDivGrab.appendChild(FindsTableDiv);
				reconcileButGrab.value = 'Hide Findings';

			}
		}


		//contentArr2: recentHistory
		//contentArrAnx2: Names of mappable companies
		//NoC2: Specific company in questoin
		//mapTrim: Property: Number of companies Names
		function HandleContentArr(contentArr2, contentArrAnx2, NoC2, mapTrim) {

			console.log('Length of contentArr2: ' + contentArr2.length);
			console.log('Length of mapTrim in if ' + mapTrim.length);
			console.log('lengthStore ' + lengthStore);
			console.log(mapTrim);
			console.log(contentArr2);

			for (var a in mapTrim) {
				console.log('Enumerating properties in mapTrim (before popping):' + a + '=' + mapTrim[a]);
			}

			for (var h = 0; h < lengthStore; h++) {
				mapTrim.pop();
				console.log('MAPTRIM LENGTH: ' + mapTrim.length)
			}


			for (var a in mapTrim) {
				console.log('Enumerating properties in mapTrim (after popping):' + a + '=' + mapTrim[a]);
			}
			console.log('MAPTRIM LENGTH NEW: ' + mapTrim.length);

			console.log('Length of contentArr2 ' + contentArr2.length);
			console.log('Content of contentArr2 ' + contentArr2);
			console.log('Content [0]: ' + contentArr2[0]);
			console.log('Content [1]: ' + contentArr2[1]);
			console.log('Content [2]: ' + contentArr2[2]);
			console.log('contentArrAnx2: ' + contentArrAnx2);

			for (var a = 0; a < contentArr2.length; a++) {
				if (contentArrAnx2[a] == NoC2) {
					console.log(contentArr2[a]);
					console.log('---------');
					mapTrim.push(contentArr2[a]); //mapTrim now holds infoTabs for company depicted by marker click
					//mapTrim[contentArrAnx2]++; //is this sane?  Shouldn't there be an index [a], here?
					console.log('How many times did this print');
					//uiLabel.innerHTML = arrUI[a] + ' ('+ arrUI[arrUI[a]]+ ')'
				}
			}
			//console.log();
			lengthStore = (lengthStore < mapTrim.length || lengthStore == undefined) ? mapTrim.length : lengthStore; //lengthStore can never be global, wont work
			console.log('lengthStore: ' + lengthStore);
			console.log('mapTrim.length: ' + mapTrim.length);
			console.log('CONTENT of MAPTRIM: ' + mapTrim);
			//console.log('Length of current company property ' + mapTrim[contentArrAnx2]);

			for (var a in mapTrim) {
				console.log('Enumerating properties in mapTrim:' + a + '=' + mapTrim[a]);
			}
			console.log('Final length of mapTrim: ' + mapTrim.length);
			console.log('Final lengthStore: ' + lengthStore);
			return mapTrim;

		}



		function ShowImages(FindsImg2) {
			alert('Showing Images...');
			alert(FindsImg2);
			var FindsImgDiv = document.createElement('div');
			var FindsImgImage = document.createElement('img');
			var FindsImgRemoveLink = document.createElement('a');

			FindsImgImage.setAttribute('src', 'MapIcons/' + FindsImg2);
			FindsImgImage.setAttribute('height', '100');
			FindsImgImage.setAttribute('width', '100');

			FindsImgRemoveLink.setAttribute('href', '#');
			FindsImgRemoveLink.innerHTML = 'Remove';

			FindsImgDiv.appendChild(FindsImgImage);
			FindsImgDiv.appendChild(FindsImgRemoveLink);
			(function (FindsImgDiv) {
				FindsImgRemoveLink.addEventListener('click', function () { this.parentNode.parentNode.removeChild(this.parentNode) });
			})(FindsImgDiv);
			recentHistoryDivGrab.appendChild(FindsImgDiv);
		}



		function HistoryGenerator(currentIdNo) {
			//alert ('This is the length ID ' + infoArrayIdNo2[3].attributes.getNamedItem('No').nodeValue);
			alert('Value of a = ' + currentIdNo);

			for (var i = 0; i < infoArrayDet2.length; i++) {
				if (infoArrayIdNo2[i].attributes.getNamedItem('No').nodeValue == currentIdNo) {

					var historyDiv = document.createElement('div');
					var historyParaNoC = document.createElement('p');
					var historyParaAuditD = document.createElement('p');
					var historyButton = document.createElement('input');
					var closeDivButton = document.createElement('input');

					historyButton.setAttribute('type', 'button');
					historyButton.setAttribute('value', 'View CD Images');

					closeDivButton.setAttribute('type', 'button');
					closeDivButton.setAttribute('value', 'Close');

					//Perhaps this closure is also necessary for exposing multiple Divs;
					(function (i, historyDiv) {


						historyButton.onclick = function () {//alert ('Readying');

							var numberOfCDs = infoArrayDet2[i].getElementsByTagName('CDs');

							//alert ('Number of particular ID ' + infoArrayIdNo.attributes.getNamedItem('No'));
							alert("Number of CDs " + numberOfCDs.length);
							//Emptying array
							cdsArray = [];

							for (var a = 0; a < numberOfCDs.length; a++) {
								//alert ('CD ' + a);
								//alert('Content of CD ' + numberOfCDs[a].firstChild.nodeValue)
								cdsArray.push(numberOfCDs[a].firstChild.value); //cdsArray will be closure compliant, containing up-to-date info for every estab.
							}

							CDsImageGenerator(cdsArray, historyDiv);
						}//end of function
					})(i, historyDiv); //end of closure


					historyParaNoC.innerHTML = infoArrayDet2[i].attributes.getNamedItem('NoC').value;
					historyParaAuditD.innerHTML = infoArrayAuditD[i].firstChild.data;
					historyDiv.setAttribute('id', 'establishmentHistory');
					historyDiv.appendChild(historyParaNoC);
					historyDiv.appendChild(historyParaAuditD);
					historyDiv.appendChild(historyButton);
					historyDiv.appendChild(closeDivButton);
					document.getElementsByTagName('body')[0].appendChild(historyDiv);

					(function (historyDiv) {
						closeDivButton.onclick = function () {
							document.getElementsByTagName('body')[0].removeChild(historyDiv);


						}//end of function
					})(historyDiv);//end of closure

				} //end of 'if'

			}//end of infoArrayDet2 length

		}	//end of HistoryGenerator


		function CDsImageGenerator(cdsArray2, historyDiv2) {

			alert("CD Arrays in the generator " + cdsArray2);
			var transDiv = document.createElement('div');
			var cdDoneButton = document.createElement('input');
			cdDoneButton.setAttribute('type', 'button');
			cdDoneButton.setAttribute('value', 'Done');

			for (var i = 0; i < cdsArray2.length; i++) {

				imgDiv = document.createElement('img');
				imgDiv.setAttribute('width', '100');
				imgDiv.setAttribute('height', '100');
				imgDiv.setAttribute('src', 'http:' + cdsArray2[i]);
				alert('http:' + cdsArray2[i]);
				imgDiv.setAttribute('alt', 'Loading...');
				transDiv.appendChild(imgDiv);

				//Shouldn't transDiv also appendChild (cdDoneButton), like this
				//transDiv.appendChild(cdDoneButton); //rather than leaving this for historyDiv2 as in below?

				//document.getElementsByTagName('body')[0].appendChild(imgDiv);
				//return transDiv;
			}


			historyDiv2.appendChild(transDiv);
			historyDiv2.appendChild(cdDoneButton);
			(function (transDiv, cdDoneButton) {
				cdDoneButton.onclick = function () {
					alert('Coming!');
					historyDiv2.removeChild(transDiv);
					historyDiv2.removeChild(cdDoneButton);
				}
			})(transDiv, cdDoneButton);//end of closure
		}

		function PopOver2() {
			mapOverSpecArr = [];//clears the spec array in preparation for loading next spec
			//alert (mapOverBounds);

			//mapOverBounds2 = []; //was to empty bound array in preparation for populating fresh specifics; but 
			//there seems no need to clear; I think this array holds the LatLngs of Markers on the map, so when
			//ClearMarkers() executes, mapOverBounds2 array is empty.
			ClearMarkers();//clears markers in preparation for remarking specifics
			alert('Commencing custom population!');
			//alert (mapOverMarkerArr.length);
			alert('Spec length = ' + mapOverSpecArr.length);
			alert('Length of Det = ' + infoArrayInspType.length);

			//Extracting specifics in selecbox

			for (var i = 0; i < infoArrayInspType.length; i++) {

				if (infoArrayInspType[i].attributes.getNamedItem('InspType').value == selOver2.options[selOver2.selectedIndex].text && infoArrayInspType[i].getElementsByTagName('Plac')[0].firstChild.value == selOver.options[selOver.selectedIndex].text) {
					mapOverSpecArr.push(infoArrayInspType[i]);
					alert('TYPE OF PRODUCTION = ' + infoArrayInspType[i].attributes.getNamedItem('InspType').value);
					alert('Information= ' + infoArrayInspType[i].getElementsByTagName('Plac')[0].firstChild.value);
					//alert('Selected Text = ' +selOver.options[selOver.selectedIndex].text)
					//mapOverSpecArrLat.push(infoArrayInspType[i].getElementsByTagName('Lat').firstChild.nodeValue);
					//mapOverSpecArrLong.push(infoArrayInspType[i].getElementsByTagName('Long').firstChild.nodeValue);

				}//end of 'if' loop
			}//end of extraction 'for' loop

			ReMark();
		} //end of PopOver2()

		function ClearMarkers(trackArrSpec2) {
			//alert ('ilteredInsp is ' + filteredInsp);
			for (var a in trackArrSpec2) {
				//alert ('This is trackArrSpec Properties ' + a);
				//alert ('Length of ' + a + ' is ' + trackArrSpec2[a].length);
				for (var b = 0; b < trackArrSpec2[a].length; b++) {

					trackArrSpec2[a][b].setMap(null);
				}
				//trackArrSpec2[filteredInsp][a].setMap(null);
			} //end of 'for', 'in'

			/*for (var i=0; i<mapOverMarkerArr.length; i++) {
			mapOverMarkerArr[i].setMap(null);
			//alert ('All Clear!');
			}*/

		}// end of ClearMarkers

		function ReMark() {
			mapOverMarkerArr = [];
			for (var i = 0; i < mapOverSpecArr.length; i++) {
				//alert ('Length of spec Arrayyyy = ' + mapOverSpecArr.length);
				var mapOverSpecArrLat = mapOverSpecArr[i].getElementsByTagName('Lat')[0].firstChild.value;
				//alert ('Attribute = ' + mapOverSpecArr[i].attributes.getNamedItem('InspType').value);
				var mapOverSpecArrLong = mapOverSpecArr[i].getElementsByTagName('Long')[0].firstChild.value;

				alert('Spec arr lat always one for det = ' + mapOverSpecArrLat.length);

				var mapOverMarker2 = new google.maps.Marker({
					map: mapOverDisp,
					position: new google.maps.LatLng(mapOverSpecArrLat, mapOverSpecArrLong)
				});

				//Implementing closure
				(function (mapOverMarker2, i) {
					google.maps.event.addListener(mapOverMarker2, 'click', function () {

						var mapOverInfo = new google.maps.InfoWindow({
							content: mapOverSpecArr[i].attributes.getNamedItem('InspType').value
						}); //end of InfoWindow
						mapOverInfo.open(mapOverDisp, mapOverMarker2);
					}); //end of eventHandler function 

				})(mapOverMarker2, i);//end of closure function
				mapOverBounds2.extend(mapOverMarker2.getPosition());

				//alert ('Length of mapOverMarker Array = ' +mapOverMarkerArr.length);											 
				mapOverMarkerArr.push(mapOverMarker2);
				//alert ('length of mapOverSpecArrLat= ' + mapOverSpecArrLat.length);
				//}//end of nested for
			}// end of 'for'
			mapOverDisp.fitBounds(mapOverBounds2);
		}//end of ReMark



		function GeolocateOver(a, markerPosition, gmpScan) {
			/*
			if (gmpScan) {
				console.log('Tracking GMPs around you!');
				GeolocateOver('Scan'); //a, markerPosition
				//FindPlaces(pos, markerPos, rad);
				
			} else {
			*/
			SurvMarkersDirectionsRemoval(); //clearing all overlays viz: circles, markers, etc.
			console.log('Inside GeolocateOver iPage testing cache3 Merger same file working now ' + a);

			if (geoMarkerOver) {	  //been assigned to a Marker.
				alert('Present');
				geoMarkerOver.setMap(null); // makes original marker dissapear
				geoPositionArr
			} else {					//null value, hasn't yet been assigned to a Marker.
				//alert ('First TimeSSSiPAge');
			}
			// Declaring postionOptions object
			var geoOpts = {
				enableHighAccuracy: true,
				maximumAge: 1000
				//timeout:infinity // this is the default value: won't return until position is available
			}

			if (navigator.geolocation) {
				console.log('Entered geolocation...');
				if (watchId) {
					console.log('Clearing geolocation...')
					navigator.geolocation.clearWatch(watchId);
					geoMarkerOver.setAnimation(null);
				}
				if (a == 'Track') { //watch position
					console.log('Watching position...');
					watchId = navigator.geolocation.watchPosition(success, fails, geoOpts);
				} else { //normal geolocation
					navigator.geolocation.getCurrentPosition(success, fails, geoOpts);
				}
			} else {
				alert('Your browser does not support geolocation');
			}

			function success(position) {

				if (markerPosition) { //for plotting direction from 'You are here' to scanned marker(surveillance);
					Directions(position, null, markerPosition);
				}

				if (a == 'simple') {

					alert('Boolean worksssss');
					Directions(position);
					return 0;
				}

				if (a == 'complex') {
					alert('Complex mode');
					Directions(position, 'complex');
					return 0;
				}

				if (a == 'Scan') {
					alert('Scanning');
					FindPlaces(position);
					return 0;
				}

				if (a == 'gmpScan') {
					alert('Scanning');
					FindPlaces(position, null, null, 'gmpScan');
					return 0;
				}


				//alert ('We have found it!');
				alert('This is the accuracy' + position.coords.accuracy);
				//alert ('This is the time and date' + position.timestamp);

				//if (!geoMarkerOver) {
				console.log('Plotting location...');
				if (!geoPosition) { //variable to store position of geolocated marker
					var geoPosition;
				}
				geoPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
				//geoPositionPoly = geoPosition; //for use in determining if routine geolocation falls within production geolocation polygon area
				geoMarkerOver = new google.maps.Marker({
					map: mapOverDisp,
					position: geoPosition,
					//icon: 'MapIcons/gas_station.png',
					draggable: true
				});

				mapOverDisp.setZoom(8);
				mapOverDisp.setCenter(geoPosition);

				geoFreedom = new google.maps.Circle({ map: mapOverDisp, center: geoPosition, radius: position.coords.accuracy, fillColor: 'green' });
				scanCircArr.push(geoFreedom);//
				geoPositionArr.push(geoMarkerOver);
				//Adjusting geolocation if need be to exact point
				//	}

				if (a == 'Track') { //repeated plotting
					geoMarkerOver.setAnimation(google.maps.Animation.BOUNCE);
					console.log('Repositioning Marker');
					geoMarkerOver.setMap(null);
					geoMarkerOver.setPosition(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
					geoMarkerOver.setMap(mapOverDisp);
					geoMarkerOver.setAnimation(google.maps.Animation.BOUNCE);
				}



				google.maps.event.addListener(geoMarkerOver, 'click', GeoInpt);
				function GeoInpt() {
					alert('Loaded the Div!');
					console.log('I just clicked marker; this is geodivGrab');
					console.log(geoDivGrab);
					if (!geoMarkerOverInfo) {
						geoMarkerOverInfo = new google.maps.InfoWindow();
					}


					if (window.innerWidth > 650) {
						console.log('inside greater than 650');
						/*
						var htmlStr = "<div id = 'geoDiv' class = 'backy2' width = '400' height = '500'><Form action = 'registrationMapNoC-Node' method= 'POST' id = 'regForm' class = 'regFormClass' ><table class = 'tabPres' border = '1' id = 'regFormTab'><tr><td><label>Name of Company</label></td><td><input required name ='regNoC' id = 'regNoC' placeholder = 'Company Name' type = 'text' onkeyup = 'CompanyOptions()'></input></td></tr>" +
																										"<tr><td><label></label></td><td><select size = '4' name ='nocSelName' id = 'nocSelName' onchange = 'BridgeAddRegulatedProductLine()'></select></td></tr>"+
																										"<tr><td><label>Latitude</label></td><td><input name ='regLat' id = 'regLat' type = 'text' readonly></input></td></tr>" +
																										"<tr><td><label>Longitude</label></td><td><input name ='regLong' id = 'regLong' type = 'text' readonly></input></td></tr></br>" +
																										"<tr><td><label>Company Address</label></td><td><input required name ='regCompAddress' id = 'regCompAddress' type = 'text' placeholder = 'Company Address' onclick = 'function(){console.log(this.id)}'></input><input type = 'button' value = ' New ' id = 'newAdd'></input></td></tr>" +
																										//"<tr><td><label></label></td><td><select size = '3' name ='nocSelAdd' id = 'nocSelAdd'></select></td></tr>" +
																										"<tr><td><label>State</label></td><td><select required name ='regPlace' id ='regPlace'></select></td></tr>" +
																										"<tr><td><label>Contact Person</label></td><td><input required name ='regContPers' id = 'regContPers' type = 'text' Placeholder = 'Name of Contact Person'></input></td></tr>" +
																										"<tr><td><label>Email</label></td><td><input required name ='regEmail' id = 'regEmail' type = 'email'></input></td></tr>" +
																										"<tr><td>Regulated Product</td><td><select id = 'regRegProd' name = 'regPLL[0][PL][ProdLineCat]' onchange = 'BridgeAddRegulatedProductLine(); ChangeDosageForm();'></select><input type = 'button' value = 'Add Product Line' id = 'regPLBut' class = 'formButs'></input></td></tr>"+
																										"<tr id = 'regFormTabRow'><td><label>Recommendation</label></td><td><input required name ='regRecomm' id = 'regRecomm' type = 'text'></input></td></tr>" +
																										"<tr><td><label>Team Lead</label></td><td><select  name ='regTL' id = 'regTL' onfocus = 'PopStaff();' onclick='console.log(this.name)'  required></select></td></tr>" +
																										"<tr><td><input name = 'regButton' type = 'submit' value = 'Submit' class = 'submitBut'></td><td></td></tr>" +
																								"<tr border = '0'><td colspan = '2' align= 'center'><label id = 'statusLab'></label></td></tr></table></Form></div>"
						*/
						geoMarkerOverInfo.setContent(geoDivGrab);
						console.log('Attaching...');
						console.log(geoDivGrab);
						//geoMarkerOverInfo.setContent(geoDivGrab.cloneNode(true));
						//console.log(geoDivGrab.cloneNode(true));


						//geoMarkerOverInfo.setContent(navFormDivTrans);
						geoMarkerOverInfo.open(mapOverDisp, geoMarkerOver);
						console.log('DIV: ');
						console.log(document.getElementById('geoDiv'));
					} else {
						//geoMarkerOverInfo.setContent(null);

					} //end of if else
					/*
						for (var a=0;a < navFormDiv.children.length;a++) {
							navFormDiv.removeChild(navFormDiv.children[a]);
						}
						
							if (navFormDiv.children.length > 1) {
								console.log('CONTAINS');
								console.log(navFormDivTrans);
								navFormDiv.removeChild(navFormDivTrans);
								//navFormDiv.removeChild(searchContainerGrab);
							} else {
								console.log('navForm Children nos.: '+navFormDiv.children.length);
								console.log('NO CONTAIN');
							}
						
						
						//navFormDivTrans.innerHTML = geoMarkerOverInfo.getContent();
						
						navFormDivVar = 'navFormDivTrans';
						console.log('NAVTRansing...')
						navFormDivTrans.innerHTML = "<div id = 'geoDiv' class = 'backy2' width = '400' height = '500'><Form action = 'registrationMapNoC-Node', method= 'POST' id = 'regForm'><table class = 'tabPres' border = '0' id = 'regFormTab'><tr><td></td><td><label>Name of Company</label><br/><input required name ='regNoC' id = 'regNoC' type = 'text' onkeyup = 'CompanyOptions()'></input></td></tr>" +
																										"<tr><td></td><td><label>Choose</label><br/><select size = '4' name ='nocSelName' id = 'nocSelName' onchange = 'BridgeAddRegulatedProductLine()'></select></td></tr>" +
																										"<tr><td></td><td><label>Latitude</label><br/><input name ='regLat' id = 'regLat' type = 'text' readonly></input></td></tr>" +
																										"<tr><td></td><td><label>Longitude</label><br/><input name ='regLong' id = 'regLong' type = 'text' readonly></input></td></tr></br>" +
																										"<tr><td></td><td><label>Company Address</label><br/><input required name ='regCompAddress' id = 'regCompAddress' type = 'text' placeholder = 'Company Address'></input></td></tr>" +
																										"<tr><td></td><td><label>State</label><br/><select required name ='regPlace' id ='regPlace'></select></td></tr>" +
																										"<tr><td></td><td><label>Contact Person</label><br/><input required name ='regContPers' id = 'regContPers' type = 'text' Placeholder = 'Name of Contact Person'></input></td></tr>" +
																										"<tr><td></td><td><label>Email</label><br/><input required name ='regEmail' id = 'regEmail' type = 'email'></input></td></tr>" +
																										"<tr><td></td><td><label>Regulated Product</label><br/><select id = 'regRegProd' name = 'regPLL[0][PL][ProdLineCat]' onchange = 'BridgeAddRegulatedProductLine(); ChangeDosageForm();'></select><input type = 'button' value = 'Add Product Line' class = 'formButs' id = 'regPLBut'></input></td></tr>"+
																										"<tr id = 'regFormTabRow'><td></td><td><label>Recommendation</label><br/><input required name ='regRecomm' id = 'regRecomm' type = 'text'></input></td></tr>" +
																										"<tr><td></td><td><label>Team Lead</label><br/><select  name ='regTL' id = 'regTL' onfocus = 'PopStaff();' onclick='console.log(this.name)'  required></select></td></tr>" +
																										"<tr><td></td><td><input name = 'regButton' type = 'submit' value = 'Submit' class = 'submitBut'></input></td></tr>" +
																									"<tr border = '0'><td colspan = '2' align= 'center'><label id = 'statusLab'></label></td></tr></table></Form></div>";
					
					
					
						
						
																			
																			
						
						
						
						//navFormDiv.innerHTML = geoMarkerOverInfo.getContent();
						//geoMarkerOverInfo.setContent(null);
						navFormDiv.style.width = "100%";
						
						timesSymbol = document.createElement('a');
						timesSymbol.setAttribute('href', 'javascript:void(0)');
						timesSymbol.setAttribute('class', 'closeNavForm');
						timesSymbol.setAttribute('id', 'closeNavForm');
						timesSymbol.addEventListener('click', closeNavForm);
						timesSymbol.innerHTML = '&times';
						
						
						navFormDiv.appendChild(timesSymbol);
						//navFormDiv.appendChild(searchContainerGrab);
						navFormDiv.appendChild(navFormDivTrans);
					*/
					//<a href= class="closeNavForm" onclick="">&times;</a>
					//console.log(geoMarkerOverInfo.getContent());
					//alert ('Now with Div!');


					geoDivGrab = document.getElementById('geoDiv');


					nocSelAddGrab = document.getElementById('nocSelAdd');
					console.log('This is nocSelAddGrab');
					console.log(nocSelAddGrab);
					nocSelAddGrab.addEventListener('click', function () {
						regCompAddressGrab = document.getElementById('regCompAddress');
						regCompAddressGrab.readOnly = 'true';
						regCompAddressBool = true;
						regCompAddressGrab.style.backgroundColor = 'white';
						regCompAddressGrab.value = this.options[this.selectedIndex].text;
						console.log(this.options[this.selectedIndex].text);
						console.log('------');
						console.log(regCompAddressGrab);
						xmlAutoInptProdLine2(xmlAuto, regNoCDiv.value, this.options[this.selectedIndex].text);

						console.log('Pre-Length: ' + regFormTabGrab.getElementsByClassName('PLRow2').length);

						if (regFormTabGrab.getElementsByClassName('PLRow2').length != 0) {
							console.log('Removing');
							/*
							for (var d=0;d< regFormTabGrab.getElementsByClassName('PLRow2').length;d++){
								regFormTabGrab.removeChild(regFormTabGrab.getElementsByClassName('PLRow2')[d]);
							}
							*/
							while (regFormTabGrab.getElementsByClassName('PLRow2').length) {
								regFormTabGrab.removeChild(regFormTabGrab.getElementsByClassName('PLRow2')[0]);
							}
						}
						//Reset number
						numInpts = 0;
						pLName.plNum = 0; //this can go?
						AddRegulatedProductLineNoC();
						RearrangePL(regFormTabGrab, pLName);
						console.log('Added Class...');
						console.log('Length: ' + regFormTabGrab.getElementsByClassName('PLRow2').length);
						console.log(regFormTabGrab.getElementsByClassName('PLRow2'));


					});

					nocSelAddAGrab.addEventListener('click', function () {
						regCompAddressAGrab = document.getElementById('regCompAddressA');
						regCompAddressAGrab.readOnly = 'true';
						regCompAddressABool = true;
						regCompAddressAGrab.style.backgroundColor = 'white';
						regCompAddressAGrab.value = this.options[this.selectedIndex].text;
						console.log(this.options[this.selectedIndex].text);
						console.log('------');
						console.log(regCompAddressAGrab);
						xmlAutoInptProdLine2A(xmlAuto, regNoCADiv.value, this.options[this.selectedIndex].text);

						console.log('Pre-Length: ' + regFormTabAGrab.getElementsByClassName('PLRow2').length);

						if (regFormTabAGrab.getElementsByClassName('PLRow2').length != 0) {
							console.log('Removing');
							/*
							for (var d=0;d< regFormTabAGrab.getElementsByClassName('PLRow2').length;d++){
								regFormTabAGrab.removeChild(regFormTabAGrab.getElementsByClassName('PLRow2')[d]);
							}
							*/
							while (regFormTabAGrab.getElementsByClassName('PLRow2').length) {
								regFormTabAGrab.removeChild(regFormTabAGrab.getElementsByClassName('PLRow2')[0]);
							}
						}
						//Reset number
						numInpts = 0;
						pLName.plNum = 0; //this can go?
						AddRegulatedProductLineNoCA();
						RearrangePL(regFormTabAGrab, pLName);
						console.log('Added Class...');
						console.log('Length: ' + regFormTabAGrab.getElementsByClassName('PLRow2').length);
						console.log(regFormTabAGrab.getElementsByClassName('PLRow2'));


					});



					regFormTabGrab = document.getElementById('regFormTab');
					console.log(regFormTabGrab);
					console.log('Grabbing regFormTabRowAGrab...');
					regFormTabRowAGrab = document.getElementById('regFormTabRow');
					//regRowPNGrab = document.getElementById('regRowPN');
					regFormTabGrab = regFormTabRowAGrab.parentNode;

					regRegProdGrab = document.getElementById('regRegProd');

					//regRegProdGrab.value = 'Drug';
					for (var a = 0; a < regulatedProductsArr.length; a++) {
						regRegProdGrab.options[a] = new Option(regulatedProductsArr[a]);
						regRegProdGrab.options[a].value = regulatedProductsArr[a];
					}
					regRegProdGrab.selectedIndex = 3;
					/*
					regPLButGrab = document.getElementById('regPLBut');
					console.log('Product Line button has been grabbed: '+ regPLButGrab);
					
					regPLButGrab.addEventListener('click', function() {AddRegulatedProductLine();});
					*/

					//var geoDivDiv = document.getElementById('geoDiv');
					//geoDivDiv.className = 'backy2';

					//regNoCDiv =document.getElementsByName('regNoC');
					regNoCDiv = document.getElementById('regNoC');
					regNoCDiv.addEventListener('blur', function () {
						if (nocSelNameDiv.options.length == 0) {
							//SelectToInput(false);
						} else {
							//SelectToInput(true);	
						}
					});









					statusLabGrab = document.getElementById('statusLab'); //for displaying status of upload
					/*
					regRowPNGrab = document.getElementById('regRowPN');
					regCellPLGrab = document.getElementById('regCellPL');
					regCellPNGrab = document.getElementById('regCellPN');
					regCellStGrab = document.getElementById('regCellSt');
					regPLGrab = document.getElementById('regPL');
					regCellPNSelGrab = document.getElementById('regCellPNSel');
					regCellSCGrab =  document.getElementById('regCellSC');
					regCellDFGrab = document.getElementById('regCellDF');
					
					newRegPLGrab = document.getElementById('newRegPL');
					newRegPNGrab = document.getElementById('newRegPN');
					*/

					//newRegPLGrab.addEventListener('click',NewRegPLGrabFunc);
					function NewRegPLGrabFunc() {
						if (newRegPLGrabBool == true) {
							newRegPNGrabBool = true; //Product has to be new for ever new productline
							console.log('About to remove main PL');
							regCellPLGrab.removeChild(regPLGrab);
							regPLGrab = document.createElement('input');
							regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', 'regPLL[0][PL][ProdLine]');
							regPLGrab.setAttribute('placeholder', 'Input new ProductLine');
							regCellPLGrab.insertBefore(regPLGrab, regPLButGrab);
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							this.innerHTML = 'Old?';
							newRegPLGrabBool = false;
							NewRegPNGrabFunc();
						} else {
							console.log('Resetting2...');
							regCellPLGrab.removeChild(regPLGrab);
							regPLGrab = document.createElement('select');
							regPLGrab.setAttribute('name', 'regPLL[0][PL][ProdLine]');
							regPLGrab.addEventListener('change', function () {
								NewSingleProduct(false);
								EnumerateProduct();
								console.log('Ensuring selectbox is in place...');
								//NewSingleProduct(false);
								ProdAutoComp();
								console.log('CALLING STRENGTH...');
								ResetStrength();
								ResetNRN();
							});
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							/*
							if () {
								NewRegPNGrabFunc();	
							}
							*/

							xmlAutoInptProdLine(xmlAuto, nocSelNameDiv.options[nocSelNameDiv.selectedIndex].text);
							//NewRegPNGrabFunc()
							NewSingleProduct(false);
							//EnumerateProduct();
							ProdAutoComp();
							ResetStrength();
							ResetNRN();
							regCellPLGrab.insertBefore(regPLGrab, regPLButGrab);
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							this.innerHTML = 'New?';
							console.log('Before...');
							newRegPLGrabBool = true;
							console.log('After...');
						}
					}

					//newRegPNGrab.addEventListener('click', NewRegPNGrabFunc);
					function NewRegPNGrabFunc() {
						console.log('Init value PN: ' + newRegPNGrabBool);
						console.log('Init value PL: ' + newRegPLGrabBool);
						console.log('Clicking for bool');
						if (newRegPNGrabBool == true) {
							console.log('Thhis is val of bool: ' + newRegPNGrabBool);
							NewSingleProduct(newRegPNGrabBool);
							newRegPNGrab.innerHTML = 'Old?';
							newRegPNGrabBool = false;
							console.log('Now: ' + newRegPNGrabBool);
							console.log('Now: ' + newRegPLGrabBool);
						} else {

							if (newRegPLGrabBool == false) {
								console.log('Terminating function...');
								return;
								//NewRegPLGrabFunc();
							} else {
								console.log('Val of PL Bool:' + newRegPLGrabBool);
								console.log('Thhis is val of bool2: ' + newRegPNGrabBool);
								NewSingleProduct(newRegPNGrabBool);
								newRegPNGrab.innerHTML = 'New?';
								console.log('Setting it to true');
								newRegPNGrabBool = true;
								console.log('Now2: ' + newRegPNGrabBool);
								console.log('Now2: ' + newRegPLGrabBool);
							}
						}
					}

					function NewSingleProduct(newRegPNGrabBool) {
						if (newRegPNGrabBool == true) {
							console.log('About to remove main Product');
							regCellPNGrab.removeChild(regPNDiv);
							regCellStGrab.removeChild(regStGrab);

							regPNDiv = document.createElement('input');
							regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductName]');
							regPNDiv.setAttribute('placeholder', 'Input new Product');
							//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});

							/*
							regPNDiv.addEventListener('change', function () {
																			console.log('Added back...');
																			ProdAutoComp();
																			ResetStrength();
																			ResetNRN();
																			});
							
							
							*/

							while (regDFGrab.length > 0) {
								regDFGrab.remove(0);
								console.log('Wiping off...!');
							}

							for (var a = 0; a < DERDFArr.length; a++) {
								regDFGrab.options[a] = new Option(DERDFArr[a]);
								console.log('Populating DF...');
							}


							regStGrab = document.createElement('input');
							regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductStrength]');

							regStGrab.removeEventListener('click', ResetNRN);
							regDFGrab.removeEventListener('click', ResetStrength);

							regCellPNGrab.appendChild(regPNDiv);
							regCellStGrab.appendChild(regStGrab);

							//newRegPNGrabBool=false;
							console.log('Input Prod Element');
							console.log('PL' + newRegPLGrabBool);
							console.log('PN' + newRegPNGrabBool);
						} else {
							console.log('Boolean value for product: ' + newRegPNGrabBool);
							regCellPNGrab.removeChild(regPNDiv);
							regCellStGrab.removeChild(regStGrab);

							regPNDiv = document.createElement('select');
							regPNDiv.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductName]');

							EnumerateProduct();
							ProdAutoComp();
							regPNDiv.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							regPNDiv.addEventListener('change', function () {
								console.log('Added back...');
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});
							regStGrab = document.createElement('select');
							regStGrab.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductStrength]');
							regStGrab.addEventListener('click', ResetStrength);
							regStGrab.addEventListener('click', ResetNRN);
							regDFGrab.addEventListener('click', ResetStrength);

							regCellPNGrab.appendChild(regPNDiv);
							regCellStGrab.appendChild(regStGrab);

							console.log('Select Prod Element');
							console.log('PL' + newRegPLGrabBool);
							console.log('PN' + newRegPNGrabBool);

							//this.innerHTML = 'New';												
							//newRegPNGrabBool=true;
						}
					}



					/*
					regPLGrab.addEventListener('change', function() {
																	console.log('Calling Enumerate...');
																	EnumerateProduct();
																	//ProdAutoComp();
																	ResetStrength();
																	ResetNRN();});
																	*/
					function EnumerateProduct() {
						//console.log(regPLGrab.options[regPLGrab.selectedIndex].text);
						productArr = [];
						productArr2 = [];
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCDiv.value) {
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									productArr.push(xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data);
									console.log(productArr);
								}
							} else {
								console.log('Not product line');
							}

						}


						//Trimming productArr
						console.log('Trimming for Product Name...');
						productArr.sort();
						//console.log(autoArr);
						for (var b = 0; b < productArr.length; b++) {
							if (productArr[b] == productArr[b + 1]) {
								delete productArr[b];
							}
						}

						for (var d = 0; d < productArr.length; d++) {
							if (productArr[d] != undefined) {
								productArr2.push(productArr[d]);
							}
						}


						while (regPNDiv.length > 0) {
							regPNDiv.remove(0);
						}

						for (var c = 0; c < productArr2.length; c++) {
							console.log(productArr2[c]);
							regPNDiv.options[c] = new Option(productArr2[c]);
							console.log('Updating Product Name...');
						}

					}



					regPLButGrab = document.getElementById('regPLBut');

					regPLButGrab.addEventListener('click', function () {
						console.log('Length of options: ' + nocSelNameDiv.options.length);
						if (nocSelNameDiv.options.length == 0) {
							console.log('No company showing up');
							AddRegulatedProductLineNoCNewNoCName();
						} else {
							console.log('Now calling AddRegulatedProductLineNoC');
							AddRegulatedProductLineNoC();
						}
						RearrangePL(regFormTabGrab, pLName);

					});

					regFormGrab = document.getElementById('regForm'); //Grabbing form used for data capture
					regRecommGrab = document.getElementById('regRecomm');
					//If form elements are incoherent, look into uncommenting this
					//regFormGrab =regRecommGrab.parentNode;
					console.log(regFormGrab.childNodes);
					console.log('Form Childnode is: ' + regFormGrab.childNodes[0].nodeName);


					function SelectToInput(boolVal) {
						console.log('Trying to convert from select to text');
						console.log(boolVal);

						//regCellSt
						var PLStoredName = regPLGrab.name;
						var PNStoredName = regPNDiv.name;
						var StStoredName = regStGrab.name;

						regCellPLGrab.removeChild(regPLGrab);
						regCellPNGrab.removeChild(regPNDiv);
						regCellStGrab.removeChild(regStGrab);
						//grab product name, strength, remove their element
						//Below perform and insertBefore the next column


						if (boolVal) {
							regPLGrab = document.createElement('select');
							//regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', PLStoredName);
							regPLGrab.setAttribute('id', 'regPL');
							regPLGrab.setAttribute('placeholder', 'New product line');

							regPLGrab.addEventListener('change', function () {
								EnumerateProduct();
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});


							regPNDiv = document.createElement('select');
							//regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', PNStoredName);
							regPNDiv.setAttribute('id', 'regPN');
							regPNDiv.setAttribute('placeholder', 'Input new product');
							//regPNDiv.addEventListener('click', function() {console.log(this.name)});
							regPNDiv.addEventListener('input', function () {
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});

							regStGrab = document.createElement('select');
							//regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', StStoredName);
							regStGrab.setAttribute('id', 'regSt');
							regStGrab.setAttribute('placeholder', 'Input new Strength');
							regStGrab.addEventListener('click', ResetNRN);
						} else {
							regPLGrab = document.createElement('input');
							regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', PLStoredName);
							regPLGrab.setAttribute('id', 'regPL');
							regPLGrab.setAttribute('placeholder', 'New product line');

							regPLGrab.addEventListener('change', function () {
								EnumerateProduct();
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});


							regPNDiv = document.createElement('input');
							regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', PNStoredName);
							regPNDiv.setAttribute('id', 'regPN');
							regPNDiv.setAttribute('placeholder', 'Input new product');
							regPNDiv.addEventListener('click', function () { console.log(this.name) });
							regPNDiv.addEventListener('input', ProdAutoComp);

							regStGrab = document.createElement('input');
							regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', StStoredName);
							regStGrab.setAttribute('id', 'regSt');
							regStGrab.setAttribute('placeholder', 'Input new Strength');
							regStGrab.addEventListener('click', ResetNRN);

						}
						//regFormTabGrab.insertBefore(regPLGrab, regRowPNGrab);//1
						regCellPLGrab.insertBefore(regPLGrab, regPLButGrab);
						regCellPNGrab.appendChild(regPNDiv);
						regCellStGrab.appendChild(regStGrab);
						//regCellPNGrab.insertBefore(regPNDiv, regCellPNSelGrab);
						//regCellStGrab.insertBefore(regStGrab, regCellSCGrab);
						//regCellPLGrab.innerHTML = regPLGrab;
						console.log('Replaced now no 2');
					}

					regNoCDiv.onkeyup = function () {
						//console.log(this.value)
						CompanyOptionsCall(this);

					}

					//alert ('Now getting it by ID');
					nocSelNameDiv = document.getElementById('nocSelName');
					console.log('Company name selected...');
					console.log(nocSelNameDiv);
					nocSelNameDiv.addEventListener('click', function () {
						regNoCDiv.value = this.options[this.selectedIndex].text;
						for (var a = 0; a < xmlAuto.companyName.length; a++) {
							if (regNoCDiv.value == xmlAuto.companyName[a].name) {
								var addressVal = xmlAuto.companyName[a].add;
								console.log(a);
								break;
							}
						}
						console.log('ADDRESS: ');
						regCompAddressGrab = document.getElementById('regCompAddress');
						regCompAddressGrab.readOnly = true; //boolean value
						regCompAddressGrab.style.backgroundColor = 'white';
						regCompAddressBool = true;
						regCompAddressGrab.value = addressVal;
						console.log(this.options[this.selectedIndex].text);
						selNoC = this.options[this.selectedIndex].text;
						console.log('------');
						AutoProcessAddress(xmlAuto, selNoC);
						xmlAutoInptProdLine2(xmlAuto, this.options[this.selectedIndex].text, addressVal);
						//EnumerateProduct();
						//ProdAutoComp();
						//ResetStrength();
						//ResetNRN();

						/*
						if (regFormTabGrab.getElementsByClassName('PLRow2').length==0) {
							AddRegulatedProductLineNoC();
							RearrangePL(regFormTabGrab,pLName);
							console.log('Added Class...');
						}
						*/

						if (regFormTabGrab.getElementsByClassName('PLRow2').length != 0) {
							console.log('Removing');

							while (regFormTabGrab.getElementsByClassName('PLRow2').length) {
								regFormTabGrab.removeChild(regFormTabGrab.getElementsByClassName('PLRow2')[0]);
							}
						}

						//console.log('Choosing...!');
						AddRegulatedProductLineNoC();
						RearrangePL(regFormTabGrab, pLName);
						//AutoLineFill(xmlAuto);

					});




					regLatGrab = document.getElementById('regLat');
					regLatGrab.value = position.coords.latitude;
					regLngGrab = document.getElementById('regLong');
					regLngGrab.value = position.coords.longitude;
					pNSelNameDiv = document.getElementById('pNSelName');
					regCompAddressGrab = document.getElementById('regCompAddress');
					regDFGrab = document.getElementById('regDF');
					regStGrab = document.getElementById('regSt');
					regNRNGrab = document.getElementById('regNRN');
					regPNDiv = document.getElementById('regPN');
					//regPNDiv.addEventListener('change', ProdAutoComp);

					function ProdAutoComp() {
						console.log('I have been hit/ No strength now');
						dosFormArr = [], dosFormArr2 = [];
						console.log('Product: I have been clicked. No more company');
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCDiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == (regPLGrab.nodeName == 'SELECT' ? regPLGrab.options[regPLGrab.selectedIndex].text : regPLGrab.text)) {
									console.log(regPLGrab.nodeName);
									console.log('Product: I have been clicked. ProductLine');
									console.log('Pushing product...');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');
										regSCDiv.value = xmlAuto2Det[a].getElementsByTagName('SubClass')[0].firstChild.data;
										regGenDiv.value = xmlAuto2Det[a].getElementsByTagName('Gen')[0].firstChild.data;
										dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									}
								}
							}

						}

						//Clipping Arrays
						//prodArr.sort()
						dosFormArr.sort();
						//strengthArr.sort();
						console.log('Sorting...');


						for (var b = 0; b < dosFormArr.length; b++) {
							if (dosFormArr[b] == dosFormArr[b + 1]) {
								delete dosFormArr[b];
							}
						}

						for (var d = 0; d < dosFormArr.length; d++) {
							if (dosFormArr[d] != undefined) {
								dosFormArr2.push(dosFormArr[d]);
							}
						}

						//emptying select boxes
						while (regDFGrab.length > 0) {
							regDFGrab.remove(0);
						}

						for (var b = 0; b < dosFormArr2.length; b++) {
							regDFGrab.options[b] = new Option(dosFormArr2[b]);
						}
					}

					// Determining NRN
					//regDFGrab.addEventListener ('click', ResetStrength);
					function ResetStrength() {
						strengthArr = [], strengthArr2 = [];
						console.log('I have been clicked for Strength... and NRN');
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCDiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									console.log('Product: I have been clicked. ProductLine');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');

										if (xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data == regDFGrab.value) {
											//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
											strengthArr.push(xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data)
											//regStGrab.value = xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data;
											console.log('This is ResetStrength return value1: ' + a);
											console.log('Pushed into strengthArr');
											console.log(strengthArr);


										}
									}
								}
							}

						}


						console.log('We are sorting now!');
						strengthArr.sort();

						for (var b = 0; b < strengthArr.length; b++) {
							if (strengthArr[b] == strengthArr[b + 1]) {
								delete strengthArr[b];
							}
						}
						for (var d = 0; d < strengthArr.length; d++) {
							if (strengthArr[d] != undefined) {
								strengthArr2.push(strengthArr[d]);
							}
						}
						while (regStGrab.length > 0) {
							regStGrab.remove(0);
						}
						console.log('Populating select box');
						for (var c = 0; c < strengthArr2.length; c++) {
							regStGrab.options[c] = new Option(strengthArr2[c]);
						}
					}


					//regStGrab.addEventListener ('click', ResetNRN);
					function ResetNRN() {
						console.log('Strength AUTOCOMPLETE');
						nrnArr = [], nrnArr2 = [];
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCDiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									console.log('Product: I have been clicked. ProductLine');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');

										if (xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data == regDFGrab.value) {
											//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
											if (xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data == regStGrab.value) {
												nrnArr.push(xmlAuto2Det[a].getElementsByTagName('NRN')[0].firstChild.data);
												console.log(nrnArr);
												console.log('Above is nrnArr: ' + nrnArr);
												regNRNGrab.value = nrnArr;
											}

										}
									}
								}
							}

						}

					}


					/*
					regPCDiv = document.getElementById('regPC');
					regSCDiv = document.getElementById('regSC');
					regGenDiv = document.getElementById('regGen');
					while (regSCDiv.length) {
						regSCDiv.remove(0);
					}
					for (var a=0;a<DERSCArr.length;a++) {
							regSCDiv.options[a] = new Option (DERSCArr[a]);
					}
					
					while (regGenDiv.length) {
						regGenDiv.remove(0);
					}
					for (var a=0;a<DERGenArr.length;a++) {
							regGenDiv.options[a] = new Option (DERGenArr[a]);
					}
					regIconDiv = document.getElementById('regIcon');
					*/

					/*
					var regSelInspTypeDiv = document.getElementById('regSelInspType');
					
					for (var a=0;a<inspTypeArr.length;a++) {
						regSelInspTypeDiv.options[a] = new Option(inspTypeArr[a]);
						regSelInspTypeDiv.options[a].value = inspTypeArr[a];
					}
					
					*/

					//Populating States

					regEmailGrab = document.getElementById('regEmail');
					regContPersGrab = document.getElementById('regContPers');
					regPlaceGrab = document.getElementById('regPlace');
					console.log('This is email: ');
					console.log(regEmailGrab);

					for (var a = 0; a < statesArr.length; a++) {
						regPlaceGrab.options[a] = new Option(statesArr[a]);
						regPlaceGrab.options[a].value = statesArr[a];
					}
					/*
					for (var a=0;a<statesArr.length;a++) {
						regPlaceAGrab.options[a] = new Option(statesArr[a]);
						regPlaceAGrab.options[a].value = statesArr[a];
					}
					*/
					regTLGrab = document.getElementById('regTL');
				}

				google.maps.event.addListener(geoMarkerOver, 'dragend', function (e) {	//alert('Stopped dragging at: ' +e.latLng.lat() + " , " + e.latLng.lng());
					var dragendPos = new google.maps.LatLng(e.latLng.lat(), e.latLng.lng());
					var geoPosition2 = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
					console.log('Stopped dragging marker at: ' + dragendPos);
					var dist = google.maps.geometry.spherical.computeDistanceBetween(geoPosition2, dragendPos);
					alert(dist);
					if (dist > position.coords.accuracy) {
						this.setPosition(geoPosition2);
					}
					regLatGrab.value = e.latLng.lat();
					regLngGrab.value = e.latLng.lng();
				});
			}


			function fails(positionError) {
				alert('We have NOT found it, becauseeeee!' + positionError.code);
				console.log(positionError.code);
			}

			//alert ('Geolocate');
		}// end of geolocation function

		function PopStaff() {
			console.log('Populating staff...');

			//composing string
			var staffStr = "InspState=" + regPlaceGrab.value;
			console.log('This is the state client side: ' + regPlaceGrab.value);
			console.log('This is the string: ' + staffStr);

			var staffObj = new XMLHttpRequest();
			staffObj.open('POST', 'staffOverSightNode', true);
			staffObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			staffObj.responseType = 'json';

			staffObj.send(staffStr);

			var staffResponse; //to hold xml of returned staff names
			staffObj.onreadystatechange = function () {
				if (staffObj.status == 200 && staffObj.readyState == 4) {
					console.log('Staff list ready...');
					console.log(staffObj);
					staffResponse = staffObj.response;
					console.log(staffResponse);
					console.log(regTLGrab);

					if (regTLGrab.options.length) {
						for (var a = 0; a < regTLGrab.options.length; a++) {
							regTLGrab.options[a] = null;
						}
						regTLGrab.options.length = 0;
						console.log('Emptying...');
					}

					for (var d = 0; d < staffResponse.firstName.length; d++) {
						regTLGrab.options[d] = new Option(staffResponse.firstName[d]);
					}

				}

			}

		}

		function PopStaffA() {
			console.log('Populating staff...');

			//composing string
			var staffStr = "InspState=" + regPlaceAGrab.value;
			console.log('This is the state client side: ' + regPlaceAGrab.value);
			console.log('This is the string: ' + staffStr);

			var staffObj = new XMLHttpRequest();
			staffObj.open('POST', 'staffOverSightNode', true);
			staffObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			staffObj.responseType = 'json';

			staffObj.send(staffStr);

			var staffResponse; //to hold xml of returned staff names
			staffObj.onreadystatechange = function () {
				if (staffObj.status == 200 && staffObj.readyState == 4) {
					console.log('Staff list ready...');
					console.log(staffObj);
					staffResponse = staffObj.response;
					console.log(staffResponse);
					console.log(regTLAGrab);

					if (regTLAGrab.options.length) {
						for (var a = 0; a < regTLAGrab.options.length; a++) {
							regTLAGrab.options[a] = null;
						}
						regTLAGrab.options.length = 0;
						console.log('Emptying...');
					}

					for (var d = 0; d < staffResponse.firstName.length; d++) {
						regTLAGrab.options[d] = new Option(staffResponse.firstName[d]);
					}

				}

			}

		}


		function SubmitForm() {
			var elementsCounter = 0;
			var formStr = new String();
			console.log('Submitting');
			console.log(regFormGrab);
			console.log('This is number of elements: ' + regFormGrab.elements.length);

			for (var a = 0; a < regFormGrab.elements.length; a++) {
				console.log(regFormGrab.elements[a].type + ' , ' + regFormGrab.elements[a].nodeName);
				console.log(regFormGrab.elements[a].type + ' , ' + regFormGrab.elements[a].name);
			}

			for (var a = 0; a < regFormGrab.elements.length; a++) {
				if ((regFormGrab.elements[a].name != "nocSelName") && (regFormGrab.elements[a].name != "pNSelName") && (regFormGrab.elements[a].name != "regSelPL") && (regFormGrab.elements[a].name != "regPNSel[]")) {
					elementsCounter++;
					formStr += regFormGrab.elements[a].name + "=" + regFormGrab.elements[a].value + "&";
				}

				if (regFormGrab.elements[a].value == "" && ((regFormGrab.elements[a].name != "nocSelName") && (regFormGrab.elements[a].name != "pNSelName") && (regFormGrab.elements[a].name != "regSelPL[]") && (regFormGrab.elements[a].name != "regPNSel[]"))) {
					regFormGrab.elements[a].className = 'noValues';
					return 0;
				}
				/*
				else {
					regFormGrab.elements[a].style.borderStyle = "none";
					regFormGrab.elements[a].style.backgroundColor = "white";
				}
				*/
			}

			console.log(elementsCounter);
			console.log(formStr);
			SubmitFormXhr(formStr);

		}

		function SubmitFormXhr(formStr2) {
			var sendXhr = new XMLHttpRequest();

			sendXhr.open('POST', 'registrationMapNoC-final.php', true);
			sendXhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			sendXhr.send(formStr2);

			sendXhr.onreadystatechange = function () {
				statusLabGrab.innerHTML = "...uploading";
				if (sendXhr.readyState == 4 && sendXhr.status == 200) {
					console.log('Uploaded');
					console.log(sendXhr.responseText);
					console.log('Uploaded2');
					var statusResponse = JSON.parse(sendXhr.responseText);
					console.log('Uploaded3');
					console.log('This is the status: ' + statusResponse.Success);
					statusLabGrab.innerHTML = statusResponse.Success;
					statusLabGrab.className = 'statusLabStyle';
				}
			}
		}


		function AddProductLineDER() {
			console.log('Selected Regulated product: ' + regRegProdGrab.value);

			if (regFormTabGrab.contains(FindsRow)) {
				console.log('There are FindsRow');
				regFormTabGrab.removeChild(FindsRow);
			} else {
				console.log('No FindsRow');
			}
			/*
			if (regFormTabGrab.contains(divAddPL)) {ƒ
				console.log('There are divAddPL');
				regFormTabGrab.removeChild(FindsRow);
			} else {
				console.log('No FindsRow');
			}
			
			if (geoDivGrab.contains(FindsRow)) {
				console.log('There are FindsRow in geoDiv');
				regFormTabGrab.removeChild(FindsRow);
			} else {
				console.log('No FindsRow in geoDiv');
			}
			*/
		}


		function ChangeDosageForm() {
			regDFGrab = document.getElementById('regDF');
			if (regDFGrab.options.length) {
				console.log('Length of options array: ' + regDFGrab.options.length);
				for (var a = 0; a < regDFGrab.options.length; a++) {
					regDFGrab.options[a] = null;
				}
				regDFGrab.options.length = 0;
			}

			console.log('Changing Dosage forms');
			console.log(regRegProdGrab.name);
			console.log('Name of field above');
			var xmlHttpRequestObj = new XMLHttpRequest();
			xmlHttpRequestObj.open('POST', 'DFOverSight', true);
			xmlHttpRequestObj.responseType = 'json';

			xmlHttpRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			xmlHttpRequestObj.send(regRegProdGrab.name + '=' + regRegProdGrab.value);

			xmlHttpRequestObj.onreadystatechange = function () {
				console.log('State is changing...');
				if (xmlHttpRequestObj.readyState == 4 && xmlHttpRequestObj.status == 200) {
					console.log('Results have arrived.');
					console.log(xmlHttpRequestObj.response);
					var DFResp = xmlHttpRequestObj.response;

					for (var a = 0; a < DFResp.length; a++) {
						regDFGrab.options[a] = new Option(DFResp[a]);
					}
				}

			}
		}

		function BridgeAddRegulatedProductLine() {

			for (var a = 0; a < regFormTabGrab.rows.length; a++) {
				console.log('How many rows?');
				if (regFormTabGrab.rows[a].getAttribute('name') == 'PLRow[]') {
					console.log('How many FindRows?');
					regFormTabGrab.removeChild(regFormTabGrab.rows[a]);
					--a;
					console.log('Removing');

				}

			}
		}

		function BridgeAddRegulatedProductLineA() {

			for (var a = 0; a < regFormTabAGrab.rows.length; a++) {
				console.log('How many rows?');
				if (regFormTabAGrab.rows[a].getAttribute('name') == 'PLRow[]') {
					console.log('How many FindRows?');
					regFormTabAGrab.removeChild(regFormTabAGrab.rows[a]);
					--a;
					console.log('Removing');

				}

			}
		}

		function ChangeAddress() {
			console.log('Changing');
		}

		function AddRegulatedProductLineNoC(gmp2) {

			//numInpts++; //incrementing index to be used in 'name' of inputs

			console.log(regFormTabGrab);


			//console.log('Selected Regulated product: '+ regRegProdGrab.value);

			var regProdSC = (regRegProdGrab.value == 'Drug') ? DERSCArr : FSANSCArr;

			console.log('...adding...');
			//Div declarations
			var divAddPL = document.createElement('div');
			divAddPL.setAttribute('id', 'divPL');
			//divAddPL.setAttribute('id','ProductLineDiv'); //you can delete

			pLName = new Object();
			pLName.pLNum = numInpts++;
			console.log('pLName.pLNum: ' + pLName.pLNum);
			//console.log('pLName.pLNum: '+pLName.pLNum++);
			pLName.strPL = 'regPLL[' + (pLName.pLNum) + '][PL]';
			console.log(pLName.strPL);
			pLName.prodNumber = 0;

			divAddPL.setAttribute('class', pLName.strPL);

			var newLink = document.createElement('a');
			newLink.setAttribute('href', '#');
			newLink.setAttribute('id', 'regLink');
			newLink.setAttribute('name', 'regLink');
			newLink.innerHTML = "New?";
			(function (divAddPL) {
				newLink.addEventListener('click', function () {
					console.log('Ive been clickedWithoutNoC!');
					if (inptProdlineChangeBool == true) {
						console.log('PLBool: ' + inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						inptProdLine = document.createElement('input');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						inptProdLine.setAttribute('required', true);
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						//divAddPL.removeChild(inptProdLineDF);
						//divAddPL.insertBefore(inptProdLineDF,inptProdLineInspType);
						while (inptProdLineInspType.length) {
							inptProdLineInspType.remove(0);
						}
						for (var a = 0; a < inspTypeArrNewLine.length; a++) {
							inptProdLineInspType.options[a] = new Option(inspTypeArrNewLine[a]);
							inptProdLineInspType.options[a].value = inspTypeArrNewLine[a];
						}

						inptProdLineInspType.value = "Production";

						PopulateDosageForm(inptProdLine, inptProdLineDF, true);

						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//NewSingleProduct2(true);
						inptProdLineDF.removeEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'Old ?';
						inptProdlineChangeBool = false;
					} else {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						console.log('Removed');
						inptProdLine = document.createElement('select');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateProductLine(inptProdLine);
						while (inptProdLineInspType.length) {
							inptProdLineInspType.remove(0);
						}
						for (var a = 0; a < inspTypeArr.length; a++) {
							inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
							inptProdLineInspType.options[a].value = inspTypeArr[a];
						}
						//PopulateDosageForm(inptProdLine, inptProdLineDF, false); // this is handled by RecaliberateLineAndProduct function
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//Should this RecaliberateLineAndProduct be here?
						RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); //recaliberating after insertingBefore select element (it may have a different value)
						inptProdLine.addEventListener('change', function () { RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); });

						//NewSingleProduct2(false);
						//PopulateProductLine(inptProdLine);
						inptProdLineDF.addEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'New';
						inptProdlineChangeBool = true;
					}
				});
			})(divAddPL);

			var inptDelProdLine = document.createElement('input');
			inptDelProdLine.setAttribute('type', 'button');
			inptDelProdLine.setAttribute('value', 'Delete');
			inptDelProdLine.setAttribute('Class', 'formButs');
			(function () {
				inptDelProdLine.addEventListener('click', function () { console.log(this.parentNode); var pLNode = this.parentNode.parentNode.parentNode.parentNode; pLNode.removeChild(this.parentNode.parentNode.parentNode); console.log(pLNode); RearrangePL(pLNode, pLName); })
			})();

			var inptProdLine = document.createElement('select');
			inptProdLine.setAttribute('placeholder', 'New Product Line');
			console.log('Name of line before: ' + pLName.strPL);
			inptProdLine.setAttribute('name', pLName.strPL + '[ProdLine]');
			console.log('Name of line after: ' + pLName.strPL);
			console.log('Name: ' + inptProdLine.name);

			PopulateProductLine(inptProdLine);


			//xmlAutoInptProdLine(xmlAuto,inptProdLine);

			inptProdLine.addEventListener('click', function () { console.log(this.name); console.log(typeof (this.name)); });
			(function (divAddPL) {
				inptProdLine.addEventListener('change', function () {
					var gmp;
					//EnumerateProduct2(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
					console.log('Name of productLine field: ' + this.name);

					var getProduct = divAddPL.getElementsByTagName('Div');
					console.log('Number of products: ' + getProduct.length);
					console.log(getProduct);

					var returnedFindings = divAddPL.getElementsByClassName('DivFinds'); //if any findings
					console.log(returnedFindings);
					while (returnedFindings.length) {
						getProduct[0].removeChild(returnedFindings[0]);
					}
					console.log(returnedFindings);
					console.log(divAddPL.getElementsByClassName('DivFinds'));
					//EnumerateProduct2(this);
					//EnumerateProdLineDF(inptProdLine, inptProdLineDF);
					console.log(divAddPL.getElementsByTagName('DIV').length);

					/*
					for (var d=0;d<divAddPL.getElementsByTagName('DIV').length;d++){
						//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
						console.log(divAddPL.getElementsByTagName('DIV'));
						
							//if (inptProdLineDF.value) {
								
								EnumerateProdLineDF(inptProdLine, inptProdLineDF);
								EnumerateProduct2(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
								console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
								console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
								ResetStrength2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
								ResetNRN2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
								
								//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}
						
					}
					*/

					//For GMP Re-Assessment
					if (inptProdLineInspType.value == 'GMP Reassessment' && !(divAddPL.getElementsByTagName('div').length)) { //i.e., no products added
						gmp = 'GMP Reassessment';

						console.log('ENTERED HERE GMP1 Reassessment');
						AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log(divAddPL.children.length);
					} else if (inptProdLineInspType.value == 'GMP Reassessment' && (divAddPL.getElementsByTagName('div').length)) {
						//Do nothing, because product is already there.
						//console.log(divAddPL.getElementsByTagName('div').length);
						console.log('NO PRODUCT ADDED');
						console.log(divAddPL.children.length);
						EnumerateProduct2(this, divAddPL.getElementsByTagName('DIV')[0].children[3], inptProdLineDF);
						for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
							//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
							console.log(divAddPL.getElementsByTagName('DIV'));

							//if (inptProdLineDF.value) {
							//EnumerateProdLineDF(inptProdLine, inptProdLineDF);
							//EnumerateProduct2(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
							ResetStrength2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
							ResetNRN2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);

							//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}

						}



						EnumerateFindings(regNoCDiv.value, divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, inptProdLineInspType.value);
					} else if (inptProdLineInspType.value == 'Renewal') { //i.e., no products added;  //&& !(divAddPL.getElementsByTagName('div').length)
						gmp = 'Renewal';
						productArrWhole2 = [];
						productArrWholeAlt3 = [];
						productArrWholeAlt3NRN = [];
						productArrWhole2NRN = [];

						console.log('Talking about renewal');
						console.log('Or is it here');
						console.log('Length of whole Array: ' + productArrWhole.length);
						//var prodDiv = document.getElementsByName('menClass');

						productArrWholeAlt2 = XmlAutoTransform(xmlAuto);

						productArrWhole = [];
						productArrWhole2 = [];
						productArrWhole2NRN = [];
						console.log('Working array...:');
						console.log(productArrWholeAlt2);
						console.log('Working Company name: ');
						console.log(regNoCDiv.value);
						for (var a = 0; a < productArrWholeAlt2.length; a++) {
							if (productArrWholeAlt2[a].companyName == regNoCDiv.value) {
								if (productArrWholeAlt2[a].productLineName == inptProdLine.options[inptProdLine.selectedIndex].text) {
									//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									if (productArrWholeAlt2[a].dosFormsType == inptProdLineDF.value) {
										productArr.push(productArrWholeAlt2[a].productName);
										console.log(productArr);
										productArrWhole.push(productArrWholeAlt2[a]); //for use with Renewal; has all the information
										//use another array to store
									}
								}
							}

						}
						console.log('Prepared array: ');
						console.log(productArrWhole);


						console.log('This is transformed array we are working with (array of objects): ');
						console.log(productArrWholeAlt2);
						console.log('This is xmlAuto (object of arrays): ');
						console.log(xmlAuto);
						console.log('111111111111111');
						console.log('Before sort: ');
						console.log(productArrWholeAlt2);
						//function prodComp(a,b){return (a).localeCompare(b)}

						//Is this function working as planned?
						function prodKeyComp(a, b) {
							if (a.prodKey < b.prodKey) {
								return -1;
							}
							if (a.prodKey > b.prodKey) {
								return 1;
							}
						}
						//function prodNameComp(a,b) {return (a.productName).localeCompare(b.productName)};

						//productArrWholeAlt2.sort(prodKeyComp);
						productArrWhole.sort(prodKeyComp);
						console.log('After sort: ');
						console.log(productArrWhole);
						console.log('Just to mark this spot2');
						console.log('111111111111111');

						for (var b = 0; b < productArrWhole.length; b++) {
							if (productArrWhole[b + 1] != undefined) {
								if (productArrWhole[b].prodKey == productArrWhole[b + 1].prodKey) {
									delete productArrWhole[b];
								}
							}
						}

						for (var d = 0; d < productArrWhole.length; d++) {
							if (productArrWhole[d] != undefined) {
								productArrWhole2.push(productArrWhole[d]);
							}
						}
						console.log('This is new length: ' + productArrWhole2.length);
						console.log(productArrWhole2);

						for (var a = 0; a < productArrWhole2.length; a++) {
							if (productArrWhole2[a].NRN == 'nil') {
								productArrWhole2NRN.push(productArrWhole2[a]);
							}
						}

						if (productArrWhole2NRN.length) { //if there are renewals, remove existing productDiv
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}
						} else {
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}

							AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						}

						for (var a = 0; a < productArrWhole2NRN.length; a++) { //call for these number of times
							//newRegPNGrabBool2=false;

							//Return only those without NAFDAC Numbers
							console.log('This is the length of productArrWhole2NRN: ' + productArrWhole2NRN.length);
							console.log('This is the content: ');
							console.log(productArrWhole2NRN);
							console.log('This is productArrWhole2 content: ');
							console.log(productArrWhole2)
							if (productArrWhole2NRN[a].NRN == 'nil') {
								console.log(productArrWhole2NRN[a].productName);//Name of the product
								AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, true, productArrWhole2NRN[a], ReArrangeProduct(divAddPL, pLName, this.parentNode));
							}
							//(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//newRegPNGrabBool2=true;
						}

					} else {
						console.log('********');
						console.log('Entering here yah, yah...');
						console.log('********');
						for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
							//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
							console.log(divAddPL.getElementsByTagName('DIV'));

							//if (inptProdLineDF.value) {
							EnumerateProdLineDF(inptProdLine, inptProdLineDF);
							EnumerateProduct2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
							ResetStrength2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
							ResetNRN2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);

							//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}

						}

					}

				})
			})(divAddPL);

			var inptProdLineCat = document.createElement('select');
			inptProdLineCat.setAttribute('placeholder', 'Line Category');
			inptProdLineCat.setAttribute('name', pLName.strPL + '[ProdLineCat]');
			//inptProdLineCat.setAttribute('id', 'newProdLineCat');

			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineDF = document.createElement('select');
			inptProdLineDF.setAttribute('placeholder', 'Dosage Form');
			inptProdLineDF.setAttribute('name', pLName.strPL + '[DosageForm]');


			//inptProdLineDF.addEventListener('change', DFRecaliberateProducts);
			function DFRecaliberateProducts() {
				console.log(this.name);
				for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
					EnumerateProduct2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], this);
					console.log('This is length: ' + divAddPL.getElementsByTagName('DIV').length);
					console.log('DOING IT');
					ResetStrength2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
					ResetNRN2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
				}
			}



			EnumerateProdLineDF(inptProdLine, inptProdLineDF);


			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineInspType = document.createElement('select');
			inptProdLineInspType.setAttribute('name', pLName.strPL + '[ProdLineInspType]');
			for (var a = 0; a < inspTypeArr.length; a++) {
				inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
				inptProdLineInspType.options[a].value = inspTypeArr[a];
			}

			inptProdLineCat.addEventListener('click', function () { console.log(this.name) });
			inptProdLineInspType.addEventListener('click', function () { console.log(this.name); });
			(function (inptProdLineInspType, pLName) {
				inptProdLineInspType.addEventListener('change', function () {
					var gmp;
					console.log(this.options[this.selectedIndex].text);
					var divAddPLLength = divAddPL.children.length;
					console.log('This is first length of divAddPL: ' + divAddPLLength);
					console.log(divAddPL);
					if (this.options[this.selectedIndex].text == 'GMP Reassessment') {

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].id == 'men') {
								console.log('Div Length: ' + divAddPL.children.length);
								//console.log('How many products?');
								divAddPL.removeChild(divAddPL.children[a]);
							}
						}

						var removeBreaks = divAddPL.getElementsByTagName('br');
						while (removeBreaks.length) {
							removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
						}
						console.log('This is second length of divAddPL: ' + divAddPL.children.length);
						console.log(divAddPL);

						console.log('Finding the breaks...');
						for (var a = 0; a < divAddPL.children.length; a++) {
							//console.log(divAddPL.children[a]);
						}
						console.log('Changing Form format');
						gmp = 'GMP Reassessment';
						AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log('Added Class... for GMP Reassessment');
					} else if (this.options[this.selectedIndex].text == 'Renewal') {
						gmp = 'Renewal';
						productArrWhole2 = [];
						productArrWholeAlt3 = [];
						productArrWholeAlt3NRN = [];
						productArrWhole2NRN = [];

						console.log('Talking about renewal');
						console.log('Or is it here');
						console.log('Length of whole Array: ' + productArrWhole.length);
						//var prodDiv = document.getElementsByName('menClass');

						var productArrWholeAlt2 = XmlAutoTransform(xmlAuto);

						productArrWhole = [];
						productArrWhole2 = [];
						productArrWhole2NRN = [];
						console.log('Working array...:');
						console.log(productArrWholeAlt2);
						console.log('Working Company name: ');
						console.log(regNoCDiv.value);
						for (var a = 0; a < productArrWholeAlt2.length; a++) {
							if (productArrWholeAlt2[a].companyName == regNoCDiv.value) {
								if (productArrWholeAlt2[a].productLineName == inptProdLine.options[inptProdLine.selectedIndex].text) {
									//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									if (productArrWholeAlt2[a].dosFormsType == inptProdLineDF.value) {
										productArr.push(productArrWholeAlt2[a].productName);
										console.log(productArr);
										productArrWhole.push(productArrWholeAlt2[a]); //for use with Renewal; has all the information
										//use another array to store
									}
								}
							}

						}
						console.log('Prepared array: ');
						console.log(productArrWhole);


						console.log('This is transformed array we are working with (array of objects): ');
						console.log(productArrWholeAlt2);
						console.log('This is xmlAuto (object of arrays): ');
						console.log(xmlAuto);
						console.log('111111111111111');
						console.log('Before sort: ');
						console.log(productArrWholeAlt2);
						//function prodComp(a,b){return (a).localeCompare(b)}

						//Is this function working as planned?
						function prodKeyComp(a, b) {
							if (a.prodKey < b.prodKey) {
								return -1;
							}
							if (a.prodKey > b.prodKey) {
								return 1;
							}
						}
						//function prodNameComp(a,b) {return (a.productName).localeCompare(b.productName)};

						//productArrWholeAlt2.sort(prodKeyComp);
						productArrWhole.sort(prodKeyComp);
						console.log('After sort: ');
						console.log(productArrWhole);
						console.log('Just to mark this spot2');
						console.log('111111111111111');

						for (var b = 0; b < productArrWhole.length; b++) {
							if (productArrWhole[b + 1] != undefined) {
								if (productArrWhole[b].prodKey == productArrWhole[b + 1].prodKey) {
									delete productArrWhole[b];
								}
							}
						}

						for (var d = 0; d < productArrWhole.length; d++) {
							if (productArrWhole[d] != undefined) {
								productArrWhole2.push(productArrWhole[d]);
							}
						}
						console.log('This is new length: ' + productArrWhole2.length);
						console.log(productArrWhole2);

						for (var a = 0; a < productArrWhole2.length; a++) {
							if (productArrWhole2[a].NRN == 'nil') {
								productArrWhole2NRN.push(productArrWhole2[a]);
							}
						}

						if (productArrWhole2NRN.length) { //if there are renewals, remove existing productDiv
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}
						} else {
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}

							AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						}

						for (var a = 0; a < productArrWhole2NRN.length; a++) { //call for these number of times
							//newRegPNGrabBool2=false;

							//Return only those without NAFDAC Numbers
							console.log('This is the length of productArrWhole2NRN: ' + productArrWhole2NRN.length);
							console.log('This is the content: ');
							console.log(productArrWhole2NRN);
							console.log('This is productArrWhole2 content: ');
							console.log(productArrWhole2)
							if (productArrWhole2NRN[a].NRN == 'nil') {
								console.log(productArrWhole2NRN[a].productName);//Name of the product
								AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, true, productArrWhole2NRN[a], ReArrangeProduct(divAddPL, pLName, this.parentNode));
							}
							//(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//newRegPNGrabBool2=true;
						}
					} else {

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].id == 'men') {
								divAddPL.removeChild(divAddPL.children[a]);
								if (divAddPL.children[a].className == 'menBreak') { // that is the break just after ProductDiv 'men'
									console.log('Men breaking...!');
									console.log(divAddPL.children[a]);
									//divAddPL.removeChild(divAddPL.children[a]);
								}
							}
						}

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].className == 'menBreak') { // that is the break just after ProductDiv 'men'
								console.log(divAddPL.children[a]);
								divAddPL.removeChild(divAddPL.children[a]);
							}
						}


						var removeBreaks = divAddPL.getElementsByTagName('br');
						while (removeBreaks.length) {
							removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
						}

						console.log('BOOL: ' + newRegPNGrabBool2);
						AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
					}
				});
			})(inptProdLineInspType, pLName);
			/*
			var selProdLine = document.createElement('select');
				selProdLine.setAttribute('name','regSelPL[]');
			*/
			var inptProdButAdd = document.createElement('input');
			inptProdButAdd.setAttribute('type', 'button');
			inptProdButAdd.setAttribute('value', 'Add Product');
			inptProdButAdd.setAttribute('Class', 'formButs');
			(function (divAddPL, pLName, inptProdLine, inptProdLineDF) {
				inptProdButAdd.addEventListener('click', function () {
					console.log('No NoC');
					if (inptProdLineInspType.value == 'GMP Reassessment' && divAddPL.children.length <= 7) { //i.e., no products added
						var gmp = 'GMP Reassessment';
						AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log('ENTERED HERE GMP1 Reassessment');
						console.log(divAddPL.children.length);
						//EnumerateFindings(regNoCDiv.value,divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, inptProdLineInspType.value);	
					} else if (inptProdLineInspType.value == 'GMP Reassessment' && divAddPL.getElementsByClassName('men').length) {
						//Do nothing, because product is already there.
						console.log(divAddPL.getElementsByClassName('men').length);
						console.log('NO PRODUCT ADDED');
						console.log(divAddPL.children.length);
					} else {
						console.log('PRODUCT WITHOUT FINDINGS ADDED');
						console.log(divAddPL.children.length);
						console.log(inptProdLineInspType.value);
						AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));
					}
				});
			})(divAddPL, pLName, inptProdLine, inptProdLineDF)

			//Adding Product Line Fields

			divAddPL.appendChild(newLink);
			divAddPL.appendChild(inptDelProdLine);
			divAddPL.appendChild(inptProdLine);
			//divAddPL.appendChild(inptProdLineCat);
			divAddPL.appendChild(inptProdLineDF);
			divAddPL.appendChild(inptProdLineInspType);
			//divAddPL.appendChild(selProdLine);
			divAddPL.appendChild(inptProdButAdd);


			//Row declaration
			var FindsRow = document.createElement('tr');
			FindsRow.setAttribute('name', 'PLRow[]');
			FindsRow.setAttribute('class', 'PLRow2');
			var FindsCell1 = document.createElement('td');
			var FindsCell2 = document.createElement('td');
			FindsCell2.appendChild(divAddPL);

			FindsRow.appendChild(FindsCell1);
			FindsRow.appendChild(FindsCell2);

			regFormTabGrab.insertBefore(FindsRow, regFormTabRowAGrab);

			if (regFormTabGrab.contains(FindsRow)) {
				console.log('The row is a child');
				console.log(FindsRow);
				console.log('This is the name of the row ' + FindsRow.getAttribute('name'));
				console.log('This is the name of the table ' + regFormTabGrab.name);
			}

			console.log('...Added.');
			console.log('Name2 ' + inptProdLine.name);
			//alert('If this thing works, you may want to clean off the gmp2');
			AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
			//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
			console.log('Name3 ' + inptProdLine.name);
		}

		function AddRegulatedProductLineNoCA(gmp2, plOpt) {

			//numInpts++; //incrementing index to be used in 'name' of inputs

			console.log(regFormTabGrab);


			//console.log('Selected Regulated product: '+ regRegProdGrab.value);

			var regProdSC = (regRegProdAGrab.value == 'Drug') ? DERSCArr : FSANSCArr;

			console.log('...adding...');
			//Div declarations
			var divAddPL = document.createElement('div');
			divAddPL.setAttribute('id', 'divPL');
			//divAddPL.setAttribute('id','ProductLineDiv'); //you can delete

			pLName = new Object();
			pLName.pLNum = numInpts++;
			console.log('pLName.pLNum: ' + pLName.pLNum);
			//console.log('pLName.pLNum: '+pLName.pLNum++);
			pLName.strPL = 'regPLL[' + (pLName.pLNum) + '][PL]';
			console.log(pLName.strPL);
			pLName.prodNumber = 0;

			divAddPL.setAttribute('class', pLName.strPL);

			var newLink = document.createElement('a');
			newLink.setAttribute('href', '#');
			newLink.setAttribute('id', 'regLink');
			newLink.setAttribute('name', 'regLink');
			newLink.innerHTML = "New?";
			(function (divAddPL) {
				newLink.addEventListener('click', function () {
					console.log('Ive been clickedWithoutNoC!');
					if (inptProdlineChangeBool == true) {
						console.log('PLBool: ' + inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						inptProdLine = document.createElement('input');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						inptProdLine.setAttribute('required', true);
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						//divAddPL.removeChild(inptProdLineDF);
						//divAddPL.insertBefore(inptProdLineDF,inptProdLineInspType);
						while (inptProdLineInspType.length) {
							inptProdLineInspType.remove(0);
						}
						for (var a = 0; a < inspTypeArrNewLine.length; a++) {
							inptProdLineInspType.options[a] = new Option(inspTypeArrNewLine[a]);
							inptProdLineInspType.options[a].value = inspTypeArrNewLine[a];
						}

						inptProdLineInspType.value = "Production";

						PopulateDosageForm(inptProdLine, inptProdLineDF, true);

						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//NewSingleProduct2(true);
						inptProdLineDF.removeEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'Old ?';
						inptProdlineChangeBool = false;
					} else {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						console.log('Removed');
						inptProdLine = document.createElement('select');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateProductLine(inptProdLine);
						while (inptProdLineInspType.length) {
							inptProdLineInspType.remove(0);
						}
						for (var a = 0; a < inspTypeArr.length; a++) {
							inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
							inptProdLineInspType.options[a].value = inspTypeArr[a];
						}
						//PopulateDosageForm(inptProdLine, inptProdLineDF, false); // this is handled by RecaliberateLineAndProduct function
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//Should this RecaliberateLineAndProduct be here?
						RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); //recaliberating after insertingBefore select element (it may have a different value)
						inptProdLine.addEventListener('change', function () { RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); });

						//NewSingleProduct2(false);
						//PopulateProductLine(inptProdLine);
						inptProdLineDF.addEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'New';
						inptProdlineChangeBool = true;
					}
				});
			})(divAddPL);

			var inptDelProdLine = document.createElement('input');
			inptDelProdLine.setAttribute('type', 'button');
			inptDelProdLine.setAttribute('value', 'Delete');
			inptDelProdLine.setAttribute('Class', 'formButs');
			(function () {
				inptDelProdLine.addEventListener('click', function () { console.log(this.parentNode); var pLNode = this.parentNode.parentNode.parentNode.parentNode; pLNode.removeChild(this.parentNode.parentNode.parentNode); console.log(pLNode); RearrangePL(pLNode, pLName); })
			})();

			var inptProdLine = document.createElement('select');
			inptProdLine.setAttribute('placeholder', 'New Product Line');
			console.log('Name of line before: ' + pLName.strPL);
			inptProdLine.setAttribute('name', pLName.strPL + '[ProdLine]');
			console.log('Name of line after: ' + pLName.strPL);
			console.log('Name: ' + inptProdLine.name);

			PopulateProductLine(inptProdLine, plOpt);


			//xmlAutoInptProdLine(xmlAuto,inptProdLine);

			inptProdLine.addEventListener('click', function () { console.log(this.name); console.log(typeof (this.name)); });
			(function (divAddPL) {
				inptProdLine.addEventListener('change', function () {
					var gmp;
					//EnumerateProduct2(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
					console.log('Name of productLine field: ' + this.name);

					var getProduct = divAddPL.getElementsByTagName('Div');
					console.log('Number of products: ' + getProduct.length);
					console.log(getProduct);

					var returnedFindings = divAddPL.getElementsByClassName('DivFinds'); //if any findings
					console.log(returnedFindings);
					while (returnedFindings.length) {
						getProduct[0].removeChild(returnedFindings[0]);
					}
					console.log(returnedFindings);
					console.log(divAddPL.getElementsByClassName('DivFinds'));
					//EnumerateProduct2(this);
					//EnumerateProdLineDF(inptProdLine, inptProdLineDF);
					console.log(divAddPL.getElementsByTagName('DIV').length);

					/*
					for (var d=0;d<divAddPL.getElementsByTagName('DIV').length;d++){
						//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
						console.log(divAddPL.getElementsByTagName('DIV'));
						
							//if (inptProdLineDF.value) {
								
								EnumerateProdLineDFA(inptProdLine, inptProdLineDF);
								EnumerateProduct2A(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
								console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
								console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
								ResetStrength2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
								ResetNRN2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
								
								//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}
						
					}
					*/

					//For GMP Re-Assessment
					if (inptProdLineInspType.value == 'GMP Reassessment' && !(divAddPL.getElementsByTagName('div').length)) { //i.e., no products added
						gmp = 'GMP Reassessment';

						console.log('ENTERED HERE GMP1 Reassessment');
						AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log(divAddPL.children.length);
					} else if (inptProdLineInspType.value == 'GMP Reassessment' && (divAddPL.getElementsByTagName('div').length)) {
						//Do nothing, because product is already there.
						//console.log(divAddPL.getElementsByTagName('div').length);
						console.log('NO PRODUCT ADDED');
						console.log(divAddPL.children.length);
						EnumerateProduct2A(this, divAddPL.getElementsByTagName('DIV')[0].children[3], inptProdLineDF);
						for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
							//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
							console.log(divAddPL.getElementsByTagName('DIV'));

							//if (inptProdLineDF.value) {
							//EnumerateProdLineDF(inptProdLine, inptProdLineDF);
							//EnumerateProduct2(this,divAddPL.getElementsByTagName('DIV')[d].children[3],inptProdLineDF);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
							ResetStrength2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
							ResetNRN2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);

							//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}

						}



						EnumerateFindingsA(regNoCADiv.value, divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, inptProdLineInspType.value);
					} else if (inptProdLineInspType.value == 'Renewal') { //i.e., no products added;  //&& !(divAddPL.getElementsByTagName('div').length)
						gmp = 'Renewal';
						productArrWhole2 = [];
						productArrWholeAlt3 = [];
						productArrWholeAlt3NRN = [];
						productArrWhole2NRN = [];

						console.log('Talking about renewal');
						console.log('Or is it here');
						console.log('Length of whole Array: ' + productArrWhole.length);
						//var prodDiv = document.getElementsByName('menClass');

						productArrWholeAlt2 = XmlAutoTransform(xmlAuto);

						productArrWhole = [];
						productArrWhole2 = [];
						productArrWhole2NRN = [];
						console.log('Working array...:');
						console.log(productArrWholeAlt2);
						console.log('Working Company name: ');
						console.log(regNoCADiv.value);
						for (var a = 0; a < productArrWholeAlt2.length; a++) {
							if (productArrWholeAlt2[a].companyName == regNoCADiv.value) {
								if (productArrWholeAlt2[a].productLineName == inptProdLine.options[inptProdLine.selectedIndex].text) {
									//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									if (productArrWholeAlt2[a].dosFormsType == inptProdLineDF.value) {
										productArr.push(productArrWholeAlt2[a].productName);
										console.log(productArr);
										productArrWhole.push(productArrWholeAlt2[a]); //for use with Renewal; has all the information
										//use another array to store
									}
								}
							}

						}
						console.log('Prepared array: ');
						console.log(productArrWhole);


						console.log('This is transformed array we are working with (array of objects): ');
						console.log(productArrWholeAlt2);
						console.log('This is xmlAuto (object of arrays): ');
						console.log(xmlAuto);
						console.log('111111111111111');
						console.log('Before sort: ');
						console.log(productArrWholeAlt2);
						//function prodComp(a,b){return (a).localeCompare(b)}

						//Is this function working as planned?
						function prodKeyComp(a, b) {
							if (a.prodKey < b.prodKey) {
								return -1;
							}
							if (a.prodKey > b.prodKey) {
								return 1;
							}
						}
						//function prodNameComp(a,b) {return (a.productName).localeCompare(b.productName)};

						//productArrWholeAlt2.sort(prodKeyComp);
						productArrWhole.sort(prodKeyComp);
						console.log('After sort: ');
						console.log(productArrWhole);
						console.log('Just to mark this spot2');
						console.log('111111111111111');

						for (var b = 0; b < productArrWhole.length; b++) {
							if (productArrWhole[b + 1] != undefined) {
								if (productArrWhole[b].prodKey == productArrWhole[b + 1].prodKey) {
									delete productArrWhole[b];
								}
							}
						}

						for (var d = 0; d < productArrWhole.length; d++) {
							if (productArrWhole[d] != undefined) {
								productArrWhole2.push(productArrWhole[d]);
							}
						}
						console.log('This is new length: ' + productArrWhole2.length);
						console.log(productArrWhole2);

						for (var a = 0; a < productArrWhole2.length; a++) {
							if (productArrWhole2[a].NRN == 'nil') {
								productArrWhole2NRN.push(productArrWhole2[a]);
							}
						}

						if (productArrWhole2NRN.length) { //if there are renewals, remove existing productDiv
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}
						} else {
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}

							AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						}

						for (var a = 0; a < productArrWhole2NRN.length; a++) { //call for these number of times
							//newRegPNGrabBool2=false;

							//Return only those without NAFDAC Numbers
							console.log('This is the length of productArrWhole2NRN: ' + productArrWhole2NRN.length);
							console.log('This is the content: ');
							console.log(productArrWhole2NRN);
							console.log('This is productArrWhole2 content: ');
							console.log(productArrWhole2)
							if (productArrWhole2NRN[a].NRN == 'nil') {
								console.log(productArrWhole2NRN[a].productName);//Name of the product
								AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, true, productArrWhole2NRN[a], ReArrangeProduct(divAddPL, pLName, this.parentNode));
							}
							//(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//newRegPNGrabBool2=true;
						}

					} else {
						console.log('********');
						console.log('Entering here yah, yah...');
						console.log('********');
						for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
							//console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
							console.log(divAddPL.getElementsByTagName('DIV'));

							//if (inptProdLineDF.value) {
							EnumerateProdLineDFA(inptProdLine, inptProdLineDF);
							EnumerateProduct2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
							console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
							ResetStrength2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
							ResetNRN2A(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);

							//EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3)
							//}

						}

					}

				})
			})(divAddPL);

			var inptProdLineCat = document.createElement('select');
			inptProdLineCat.setAttribute('placeholder', 'Line Category');
			inptProdLineCat.setAttribute('name', pLName.strPL + '[ProdLineCat]');
			//inptProdLineCat.setAttribute('id', 'newProdLineCat');

			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineDF = document.createElement('select');
			inptProdLineDF.setAttribute('placeholder', 'Dosage Form');
			inptProdLineDF.setAttribute('name', pLName.strPL + '[DosageForm]');


			//inptProdLineDF.addEventListener('change', DFRecaliberateProducts);
			function DFRecaliberateProducts() {
				console.log(this.name);
				for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
					EnumerateProduct2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], this);
					console.log('This is length: ' + divAddPL.getElementsByTagName('DIV').length);
					console.log('DOING IT');
					ResetStrength2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
					ResetNRN2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
				}
			}



			EnumerateProdLineDFA(inptProdLine, inptProdLineDF);


			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineInspType = document.createElement('select');
			inptProdLineInspType.setAttribute('name', pLName.strPL + '[ProdLineInspType]');
			for (var a = 0; a < inspTypeArr.length; a++) {
				inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
				inptProdLineInspType.options[a].value = inspTypeArr[a];
			}

			inptProdLineCat.addEventListener('click', function () { console.log(this.name) });
			inptProdLineInspType.addEventListener('click', function () { console.log(this.name); });
			(function (inptProdLineInspType, pLName) {
				inptProdLineInspType.addEventListener('change', function () {
					var gmp;
					console.log(this.options[this.selectedIndex].text);
					var divAddPLLength = divAddPL.children.length;
					console.log('This is first length of divAddPL: ' + divAddPLLength);
					console.log(divAddPL);
					if (this.options[this.selectedIndex].text == 'GMP Reassessment') {

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].id == 'men') {
								console.log('Div Length: ' + divAddPL.children.length);
								//console.log('How many products?');
								divAddPL.removeChild(divAddPL.children[a]);
							}
						}

						var removeBreaks = divAddPL.getElementsByTagName('br');
						while (removeBreaks.length) {
							removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
						}
						console.log('This is second length of divAddPL: ' + divAddPL.children.length);
						console.log(divAddPL);

						console.log('Finding the breaks...');
						for (var a = 0; a < divAddPL.children.length; a++) {
							//console.log(divAddPL.children[a]);
						}
						console.log('Changing Form format');
						gmp = 'GMP Reassessment';
						AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log('Added Class... for GMP Reassessment');
					} else if (this.options[this.selectedIndex].text == 'Renewal') {
						gmp = 'Renewal';
						productArrWhole2 = [];
						productArrWholeAlt3 = [];
						productArrWholeAlt3NRN = [];
						productArrWhole2NRN = [];

						console.log('Talking about renewal');
						console.log('Or is it here');
						console.log('Length of whole Array: ' + productArrWhole.length);
						//var prodDiv = document.getElementsByName('menClass');

						var productArrWholeAlt2 = XmlAutoTransform(xmlAuto);

						productArrWhole = [];
						productArrWhole2 = [];
						productArrWhole2NRN = [];
						console.log('Working array...:');
						console.log(productArrWholeAlt2);
						console.log('Working Company name: ');
						console.log(regNoCDiv.value);
						for (var a = 0; a < productArrWholeAlt2.length; a++) {
							if (productArrWholeAlt2[a].companyName == regNoCADiv.value) {
								if (productArrWholeAlt2[a].productLineName == inptProdLine.options[inptProdLine.selectedIndex].text) {
									//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									if (productArrWholeAlt2[a].dosFormsType == inptProdLineDF.value) {
										productArr.push(productArrWholeAlt2[a].productName);
										console.log(productArr);
										productArrWhole.push(productArrWholeAlt2[a]); //for use with Renewal; has all the information
										//use another array to store
									}
								}
							}

						}
						console.log('Prepared array: ');
						console.log(productArrWhole);


						console.log('This is transformed array we are working with (array of objects): ');
						console.log(productArrWholeAlt2);
						console.log('This is xmlAuto (object of arrays): ');
						console.log(xmlAuto);
						console.log('111111111111111');
						console.log('Before sort: ');
						console.log(productArrWholeAlt2);
						//function prodComp(a,b){return (a).localeCompare(b)}

						//Is this function working as planned?
						function prodKeyComp(a, b) {
							if (a.prodKey < b.prodKey) {
								return -1;
							}
							if (a.prodKey > b.prodKey) {
								return 1;
							}
						}
						//function prodNameComp(a,b) {return (a.productName).localeCompare(b.productName)};

						//productArrWholeAlt2.sort(prodKeyComp);
						productArrWhole.sort(prodKeyComp);
						console.log('After sort: ');
						console.log(productArrWhole);
						console.log('Just to mark this spot2');
						console.log('111111111111111');

						for (var b = 0; b < productArrWhole.length; b++) {
							if (productArrWhole[b + 1] != undefined) {
								if (productArrWhole[b].prodKey == productArrWhole[b + 1].prodKey) {
									delete productArrWhole[b];
								}
							}
						}

						for (var d = 0; d < productArrWhole.length; d++) {
							if (productArrWhole[d] != undefined) {
								productArrWhole2.push(productArrWhole[d]);
							}
						}
						console.log('This is new length: ' + productArrWhole2.length);
						console.log(productArrWhole2);

						for (var a = 0; a < productArrWhole2.length; a++) {
							if (productArrWhole2[a].NRN == 'nil') {
								productArrWhole2NRN.push(productArrWhole2[a]);
							}
						}

						if (productArrWhole2NRN.length) { //if there are renewals, remove existing productDiv
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}
						} else {
							var prodDiv = divAddPL.getElementsByTagName('div');
							for (var a = 0; a < prodDiv.length; a++) { // removing stuff
								console.log(prodDiv[a]);
								console.log('NUMBER OF PRODUCTS: ' + prodDiv.length);
								console.log('NUMBER OF FINDINGS: ' + prodDiv[a].getElementsByClassName('divFinds').length);
								var prodFinds = prodDiv[a].getElementsByClassName('divFinds');
								while (prodFinds.length) {
									console.log('..removing');
									console.log(prodDiv[a]);
									prodDiv[a].removeChild(prodFinds[0]);
								}
							}

							console.log('Number of product: ' + prodDiv.length);
							while (prodDiv.length) {
								console.log('Removing any product Div...!');
								divAddPL.removeChild(prodDiv[0]);
							}

							var removeBreaks = divAddPL.getElementsByTagName('br');
							while (removeBreaks.length) {
								removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
							}

							AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						}

						for (var a = 0; a < productArrWhole2NRN.length; a++) { //call for these number of times
							//newRegPNGrabBool2=false;

							//Return only those without NAFDAC Numbers
							console.log('This is the length of productArrWhole2NRN: ' + productArrWhole2NRN.length);
							console.log('This is the content: ');
							console.log(productArrWhole2NRN);
							console.log('This is productArrWhole2 content: ');
							console.log(productArrWhole2)
							if (productArrWhole2NRN[a].NRN == 'nil') {
								console.log(productArrWhole2NRN[a].productName);//Name of the product
								AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, true, productArrWhole2NRN[a], ReArrangeProduct(divAddPL, pLName, this.parentNode));
							}
							//(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
							//AddProductsDERA(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//AddProductsDERA(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3, newRegPNGrabBool2)
							//newRegPNGrabBool2=true;
						}
					} else {

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].id == 'men') {
								divAddPL.removeChild(divAddPL.children[a]);
								if (divAddPL.children[a].className == 'menBreak') { // that is the break just after ProductDiv 'men'
									console.log('Men breaking...!');
									console.log(divAddPL.children[a]);
									//divAddPL.removeChild(divAddPL.children[a]);
								}
							}
						}

						for (var a = 0; a < divAddPL.children.length; a++) {
							if (divAddPL.children[a].className == 'menBreak') { // that is the break just after ProductDiv 'men'
								console.log(divAddPL.children[a]);
								divAddPL.removeChild(divAddPL.children[a]);
							}
						}


						var removeBreaks = divAddPL.getElementsByTagName('br');
						while (removeBreaks.length) {
							removeBreaks[0].parentNode.removeChild(removeBreaks[0]);
						}

						console.log('BOOL: ' + newRegPNGrabBool2);
						AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
					}
				});
			})(inptProdLineInspType, pLName);
			/*
			var selProdLine = document.createElement('select');
				selProdLine.setAttribute('name','regSelPL[]');
			*/
			var inptProdButAdd = document.createElement('input');
			inptProdButAdd.setAttribute('type', 'button');
			inptProdButAdd.setAttribute('value', 'Add Product');
			inptProdButAdd.setAttribute('Class', 'formButs');
			(function (divAddPL, pLName, inptProdLine, inptProdLineDF) {
				inptProdButAdd.addEventListener('click', function () {
					console.log('No NoC');
					if (inptProdLineInspType.value == 'GMP Reassessment' && divAddPL.children.length <= 7) { //i.e., no products added
						var gmp = 'GMP Reassessment';
						AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, gmp, ReArrangeProduct(divAddPL, pLName, this.parentNode));
						console.log('ENTERED HERE GMP1 Reassessment');
						console.log(divAddPL.children.length);
						//EnumerateFindings(regNoCDiv.value,divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, inptProdLineInspType.value);	
					} else if (inptProdLineInspType.value == 'GMP Reassessment' && divAddPL.getElementsByClassName('men').length) {
						//Do nothing, because product is already there.
						console.log(divAddPL.getElementsByClassName('men').length);
						console.log('NO PRODUCT ADDED');
						console.log(divAddPL.children.length);
					} else {
						console.log('PRODUCT WITHOUT FINDINGS ADDED');
						console.log(divAddPL.children.length);
						console.log(inptProdLineInspType.value);
						AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));
					}
				});
			})(divAddPL, pLName, inptProdLine, inptProdLineDF)

			//Adding Product Line Fields

			divAddPL.appendChild(newLink);
			divAddPL.appendChild(inptDelProdLine);
			divAddPL.appendChild(inptProdLine);
			//divAddPL.appendChild(inptProdLineCat);
			divAddPL.appendChild(inptProdLineDF);
			divAddPL.appendChild(inptProdLineInspType);
			//divAddPL.appendChild(selProdLine);
			divAddPL.appendChild(inptProdButAdd);


			//Row declaration
			var FindsRow = document.createElement('tr');
			FindsRow.setAttribute('name', 'PLRow[]');
			FindsRow.setAttribute('class', 'PLRow2');
			var FindsCell1 = document.createElement('td');
			var FindsCell2 = document.createElement('td');
			FindsCell2.appendChild(divAddPL);

			FindsRow.appendChild(FindsCell1);
			FindsRow.appendChild(FindsCell2);

			regFormTabAGrab.insertBefore(FindsRow, regFormTabRowAGrab);

			if (regFormTabAGrab.contains(FindsRow)) {
				console.log('The row is a child');
				console.log(FindsRow);
				console.log('This is the name of the row ' + FindsRow.getAttribute('name'));
				console.log('This is the name of the table ' + regFormTabAGrab.name);
			}

			console.log('...Added.');
			console.log('Name2 ' + inptProdLine.name);
			//If this thing works, you may want to clean off the gmp2
			AddProductsDERA(divAddPL, pLName, inptProdLine, inptProdLineDF, null, newRegPNGrabBool2, ReArrangeProduct(divAddPL, pLName, this.parentNode));
			//AddProductsDER(divAddPL, thisName, inptProdLine2,inptProdLineDF2, gmp3,newRegPNGrabBool2)
			console.log('Name3 ' + inptProdLine.name);
		}

		function AddRegulatedProductLineNoCNewNoCName(gmp2) {

			//numInpts++; //incrementing index to be used in 'name' of inputs

			console.log(regFormTabGrab);


			console.log('Selected Regulated product: ' + regRegProdGrab.value);

			var regProdSC = (regRegProdGrab.value == 'Drug') ? DERSCArr : FSANSCArr;

			console.log('...adding...');
			//Div declarations
			var divAddPL = document.createElement('div');
			divAddPL.setAttribute('id', 'divPL');
			//divAddPL.setAttribute('id','ProductLineDiv'); //you can delete

			pLName = new Object();
			pLName.pLNum = numInpts++;
			console.log('pLName.pLNum: ' + pLName.pLNum);
			//console.log('pLName.pLNum: '+pLName.pLNum++);
			pLName.strPL = 'regPLL[' + (pLName.pLNum) + '][PL]';
			console.log(pLName.strPL);
			pLName.prodNumber = 0;

			divAddPL.setAttribute('class', pLName.strPL);

			var newLink = document.createElement('a');
			newLink.setAttribute('href', '#');
			newLink.setAttribute('id', 'regLink');
			newLink.setAttribute('name', 'regLink');
			newLink.innerHTML = "New?";
			(function (divAddPL) {
				newLink.addEventListener('click', function () {
					console.log('Ive been clickedWithoutNoC!');
					if (inptProdlineChangeBool == true) {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						inptProdLine = document.createElement('input');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateDosageForm(inptProdLine, inptProdLineDF, true);

						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//NewSingleProduct2(true);
						inptProdLineDF.removeEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'Old ?';
						inptProdlineChangeBool = false;
					} else {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						console.log('Removed');
						inptProdLine = document.createElement('select');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateProductLine(inptProdLine);
						//PopulateDosageForm(inptProdLine, inptProdLineDF, false); // this is handled by RecaliberateLineAndProduct function
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//Should this RecaliberateLineAndProduct be here?
						RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); //recaliberating after insertingBefore select element (it may have a different value)
						inptProdLine.addEventListener('change', function () { RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); });
						//NewSingleProduct2(false);
						//PopulateProductLine(inptProdLine);
						this.innerHTML = 'New';
						inptProdlineChangeBool = true;
					}
				});
			})(divAddPL);

			var inptDelProdLine = document.createElement('input');
			inptDelProdLine.setAttribute('type', 'button');
			inptDelProdLine.setAttribute('value', 'Delete');
			(function () {
				inptDelProdLine.addEventListener('click', function () { console.log(this.parentNode); var pLNode = this.parentNode.parentNode.parentNode.parentNode; pLNode.removeChild(this.parentNode.parentNode.parentNode); console.log(pLNode); RearrangePL(pLNode, pLName); })
			})();

			var inptProdLine = document.createElement('input');
			inptProdLine.setAttribute('placeholder', 'New Product Line');
			console.log('Name of line before: ' + pLName.strPL);
			inptProdLine.setAttribute('name', pLName.strPL + '[ProdLine]');
			console.log('Name of line after: ' + pLName.strPL);
			console.log('Name: ' + inptProdLine.name);


			//xmlAutoInptProdLine(xmlAuto,inptProdLine);

			inptProdLine.addEventListener('click', function () { console.log(this.name); console.log(typeof (this.name)); });



			var inptProdLineCat = document.createElement('select');
			inptProdLineCat.setAttribute('placeholder', 'Line Category');
			inptProdLineCat.setAttribute('name', pLName.strPL + '[ProdLineCat]');
			//inptProdLineCat.setAttribute('id', 'newProdLineCat');

			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineDF = document.createElement('select');
			inptProdLineDF.setAttribute('placeholder', 'Dosage Form');
			inptProdLineDF.setAttribute('name', pLName.strPL + '[DosageForm]');
			for (var a = 0; a < DERDFArr.length; a++) {
				inptProdLineDF.options[a] = new Option(DERDFArr[a]);
				inptProdLineDF.options[a].value = DERDFArr[a];
			}

			var inptProdLineInspType = document.createElement('select');
			inptProdLineInspType.setAttribute('name', pLName.strPL + '[ProdLineInspType]');
			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
				inptProdLineInspType.options[a].value = inspTypeArr[a];
			}

			inptProdLineCat.addEventListener('click', function () { console.log(this.name) });
			inptProdLineInspType.addEventListener('click', function () { console.log(this.name); });


			var inptProdButAdd = document.createElement('input');
			inptProdButAdd.setAttribute('type', 'button');
			inptProdButAdd.setAttribute('value', 'Add Product');

			(function (divAddPL, pLName, inptProdLine, inptProdLineDF) {
				inptProdButAdd.addEventListener('click', function () {
					console.log('No NoC');
					AddProductsDERNewNoCName(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));

				});
			})(divAddPL, pLName, inptProdLine, inptProdLineDF)

			//Adding Product Line Fields

			divAddPL.appendChild(inptDelProdLine);
			divAddPL.appendChild(inptProdLine);
			//divAddPL.appendChild(inptProdLineCat);
			divAddPL.appendChild(inptProdLineDF);
			divAddPL.appendChild(inptProdLineInspType);
			//divAddPL.appendChild(selProdLine);
			divAddPL.appendChild(inptProdButAdd);


			//Row declaration
			var FindsRow = document.createElement('tr');
			FindsRow.setAttribute('name', 'PLRow[]');
			FindsRow.setAttribute('class', 'PLRow2');
			var FindsCell1 = document.createElement('td');
			var FindsCell2 = document.createElement('td');
			FindsCell2.appendChild(divAddPL);

			FindsRow.appendChild(FindsCell1);
			FindsRow.appendChild(FindsCell2);

			regFormTabGrab.insertBefore(FindsRow, regFormTabRowAGrab);

			//If this thing works, you may want to clean off the gmp2

			console.log('Name3 ' + inptProdLine.name);
			AddProductsDERNewNoCName(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));
		}


		function AddRegulatedProductLineNoCNewNoCNameA(gmp2) {

			//numInpts++; //incrementing index to be used in 'name' of inputs

			console.log(regFormTabAGrab);


			console.log('Selected Regulated product: ' + regRegProdAGrab.value);

			var regProdSC = (regRegProdAGrab.value == 'Drug') ? DERSCArr : FSANSCArr;

			console.log('...adding...');
			//Div declarations
			var divAddPL = document.createElement('div');
			divAddPL.setAttribute('id', 'divPL');
			//divAddPL.setAttribute('id','ProductLineDiv'); //you can delete

			pLName = new Object();
			pLName.pLNum = numInpts++;
			console.log('pLName.pLNum: ' + pLName.pLNum);
			//console.log('pLName.pLNum: '+pLName.pLNum++);
			pLName.strPL = 'regPLL[' + (pLName.pLNum) + '][PL]';
			console.log(pLName.strPL);
			pLName.prodNumber = 0;

			divAddPL.setAttribute('class', pLName.strPL);

			var newLink = document.createElement('a');
			newLink.setAttribute('href', '#');
			newLink.setAttribute('id', 'regLink');
			newLink.setAttribute('name', 'regLink');
			newLink.innerHTML = "New?";
			(function (divAddPL) {
				newLink.addEventListener('click', function () {
					console.log('Ive been clickedWithoutNoC!');
					if (inptProdlineChangeBool == true) {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						inptProdLine = document.createElement('input');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateDosageForm(inptProdLine, inptProdLineDF, true);

						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//NewSingleProduct2(true);
						inptProdLineDF.removeEventListener('change', DFRecaliberateProducts);
						this.innerHTML = 'Old ?';
						inptProdlineChangeBool = false;
					} else {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						console.log('Removed');
						inptProdLine = document.createElement('select');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateProductLine(inptProdLine);
						//PopulateDosageForm(inptProdLine, inptProdLineDF, false); // this is handled by RecaliberateLineAndProduct function
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						//Should this RecaliberateLineAndProduct be here?
						RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); //recaliberating after insertingBefore select element (it may have a different value)
						inptProdLine.addEventListener('change', function () { RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); });
						//NewSingleProduct2(false);
						//PopulateProductLine(inptProdLine);
						this.innerHTML = 'New';
						inptProdlineChangeBool = true;
					}
				});
			})(divAddPL);

			var inptDelProdLine = document.createElement('input');
			inptDelProdLine.setAttribute('type', 'button');
			inptDelProdLine.setAttribute('value', 'Delete');
			(function () {
				inptDelProdLine.addEventListener('click', function () { console.log(this.parentNode); var pLNode = this.parentNode.parentNode.parentNode.parentNode; pLNode.removeChild(this.parentNode.parentNode.parentNode); console.log(pLNode); RearrangePL(pLNode, pLName); })
			})();

			var inptProdLine = document.createElement('input');
			inptProdLine.setAttribute('placeholder', 'New Product Line');
			console.log('Name of line before: ' + pLName.strPL);
			inptProdLine.setAttribute('name', pLName.strPL + '[ProdLine]');
			console.log('Name of line after: ' + pLName.strPL);
			console.log('Name: ' + inptProdLine.name);


			//xmlAutoInptProdLine(xmlAuto,inptProdLine);

			inptProdLine.addEventListener('click', function () { console.log(this.name); console.log(typeof (this.name)); });



			var inptProdLineCat = document.createElement('select');
			inptProdLineCat.setAttribute('placeholder', 'Line Category');
			inptProdLineCat.setAttribute('name', pLName.strPL + '[ProdLineCat]');
			//inptProdLineCat.setAttribute('id', 'newProdLineCat');

			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineDF = document.createElement('select');
			inptProdLineDF.setAttribute('placeholder', 'Dosage Form');
			inptProdLineDF.setAttribute('name', pLName.strPL + '[DosageForm]');
			for (var a = 0; a < DERDFArr.length; a++) {
				inptProdLineDF.options[a] = new Option(DERDFArr[a]);
				inptProdLineDF.options[a].value = DERDFArr[a];
			}

			var inptProdLineInspType = document.createElement('select');
			inptProdLineInspType.setAttribute('name', pLName.strPL + '[ProdLineInspType]');

			for (var a = 0; a < inspTypeArrNewLine.length; a++) {
				inptProdLineInspType.options[a] = new Option(inspTypeArrNewLine[a]);
				inptProdLineInspType.options[a].value = inspTypeArrNewLine[a];
			}
			console.log(inspTypeArrNewLine);

			inptProdLineCat.addEventListener('click', function () { console.log(this.name) });
			inptProdLineInspType.addEventListener('click', function () { console.log(this.name); });


			var inptProdButAdd = document.createElement('input');
			inptProdButAdd.setAttribute('type', 'button');
			inptProdButAdd.setAttribute('value', 'Add Product');

			(function (divAddPL, pLName, inptProdLine, inptProdLineDF) {
				inptProdButAdd.addEventListener('click', function () {
					console.log('No NoC');
					AddProductsDERNewNoCNameA(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));

				});
			})(divAddPL, pLName, inptProdLine, inptProdLineDF)

			//Adding Product Line Fields

			divAddPL.appendChild(inptDelProdLine);
			divAddPL.appendChild(inptProdLine);
			//divAddPL.appendChild(inptProdLineCat);
			divAddPL.appendChild(inptProdLineDF);
			divAddPL.appendChild(inptProdLineInspType);
			//divAddPL.appendChild(selProdLine);
			divAddPL.appendChild(inptProdButAdd);


			//Row declaration
			var FindsRow = document.createElement('tr');
			FindsRow.setAttribute('name', 'PLRow[]');
			FindsRow.setAttribute('class', 'PLRow2');
			var FindsCell1 = document.createElement('td');
			var FindsCell2 = document.createElement('td');
			FindsCell2.appendChild(divAddPL);

			FindsRow.appendChild(FindsCell1);
			FindsRow.appendChild(FindsCell2);

			regFormTabAGrab.insertBefore(FindsRow, regFormTabRowAGrab);

			//If this thing works, you may want to clean off the gmp2

			console.log('Name3 ' + inptProdLine.name);
			AddProductsDERNewNoCNameA(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));
		}

		function RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF) {
			console.log('Name of productLine field: ' + this.name);
			//EnumerateProduct2(this);
			EnumerateProdLineDF(inptProdLine, inptProdLineDF);
			console.log(divAddPL.getElementsByTagName('DIV').length);
			for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
				console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
				if (divAddPL.getElementsByTagName('DIV')[d].id == 'men') {
					if ((divAddPL.getElementsByTagName('DIV')[d].children[3].name).substr(20) == '[ProductName]') {
						//if (inptProdLineDF.value) {
						//EnumerateProdLineDF(inptProdLine, inptProdLineDF);
						console.log(divAddPL.getElementsByTagName('DIV')[d].children[3]);
						EnumerateProduct2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF);
						console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
						console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
						ResetStrength2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
						ResetNRN2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
						//}
					}
				}
			}
		}

		function RecaliberateProduct(divAddProductCollection, divAddPL2, inptProdlineChangeBool) {
			console.log('Array of Product Divs, right: ' + divAddProductCollection);
			console.log('This is length of Array of products: ' + divAddProductCollection.length);
			NewSingleProduct3(divAddProductCollection, divAddPL2, inptProdlineChangeBool);
		}






		function AddRegulatedProductLine() {

			//numInpts++; //incrementing index to be used in 'name' of inputs

			console.log(regFormTabGrab);


			console.log('Selected Regulated product: ' + regRegProdGrab.value);

			var regProdSC = (regRegProdGrab.value == 'Drug') ? DERSCArr : FSANSCArr;

			console.log('...adding...');
			//Div declarations
			var divAddPL = document.createElement('div');
			divAddPL.setAttribute('id', 'divPL');
			//divAddPL.setAttribute('id','ProductLineDiv'); //you can delete

			pLName = new Object();
			pLName.pLNum = ++numInpts;
			pLName.strPL = 'regPLL[' + (pLName.pLNum++) + '][PL]';
			pLName.prodNumber = 0;

			divAddPL.setAttribute('class', pLName.strPL);

			var newLink = document.createElement('a');
			newLink.setAttribute('href', '#');
			newLink.setAttribute('id', 'regLink');
			newLink.setAttribute('name', 'regLink');
			newLink.innerHTML = "New?";
			(function (divAddPL) {
				newLink.addEventListener('click', function () {
					console.log('Ive been clickedNoC!');
					if (inptProdlineChangeBool == true) {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						inptProdLine = document.createElement('input');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateDosageForm(inptProdLine, inptProdLineDF, true);
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						this.innerHTML = 'Old ?';
						inptProdlineChangeBool = false;
					} else {
						console.log(inptProdlineChangeBool);
						tempNameNewProdLine = inptProdLine.name;
						divAddPL.removeChild(inptProdLine);
						console.log('Removed');
						inptProdLine = document.createElement('select');
						inptProdLine.setAttribute('name', tempNameNewProdLine);
						inptProdLine.setAttribute('id', 'newProdLine');
						divAddPL.insertBefore(inptProdLine, inptProdLineDF);
						PopulateProductLine(inptProdLine);
						RecaliberateProduct(divAddPL.getElementsByTagName('DIV'), divAddPL, !(inptProdlineChangeBool));
						RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); //recaliberating after insertingBefore select element (it may have a different value)
						inptProdLine.addEventListener('change', function () { RecaliberateLineAndProduct(divAddPL, inptProdLine, inptProdLineDF); });
						//inptProdLineDF.addEventListener('change', function(){RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF);} );
						//PopulateDosageForm(inptProdLine, inptProdLineDF, false);
						this.innerHTML = 'New';
						inptProdlineChangeBool = true;
					}
				});
			})(divAddPL);

			var inptDelProdLine = document.createElement('input');
			inptDelProdLine.setAttribute('type', 'button');
			inptDelProdLine.setAttribute('value', 'Delete');
			(function () {
				inptDelProdLine.addEventListener('click', function () { console.log(this.parentNode); var pLNode = this.parentNode.parentNode.parentNode.parentNode; pLNode.removeChild(this.parentNode.parentNode.parentNode); console.log(pLNode); RearrangePL(pLNode, pLName); })
			})();

			var inptProdLine = document.createElement('select');
			inptProdLine.setAttribute('placeholder', 'New Product Line');
			inptProdLine.setAttribute('name', pLName.strPL + '[ProdLine]');
			PopulateProductLine(inptProdLine);


			//xmlAutoInptProdLine(xmlAuto,inptProdLine);

			inptProdLine.addEventListener('click', function () { console.log(this.name); console.log(typeof (this.name)); });
			inptProdLine.addEventListener('change', function () {
				//console.log('Name of productLine field: '+this.name);
				//EnumerateProduct2(this);
				EnumerateProdLineDF(inptProdLine, inptProdLineDF);
				console.log(divAddPL.getElementsByTagName('DIV').length);

				for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
					console.log((divAddPL.getElementsByTagName('DIV')[0].children[3].name).substr(20));
					if ((divAddPL.getElementsByTagName('DIV')[d].children[3].name).substr(20) == '[ProductName]') {
						//if (inptProdLineDF.value) {
						EnumerateProdLineDF(inptProdLine, inptProdLineDF);
						EnumerateProduct2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF);
						console.log(divAddPL.getElementsByTagName('DIV')[0].children[13]);
						console.log(divAddPL.getElementsByTagName('DIV')[0].children[16]);
						ResetStrength2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
						ResetNRN2(this, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);

						//}
					}
				}
			});

			var inptProdLineCat = document.createElement('select');
			inptProdLineCat.setAttribute('placeholder', 'Line Category');
			inptProdLineCat.setAttribute('name', pLName.strPL + '[ProdLineCat]');
			//inptProdLineCat.setAttribute('id', 'newProdLineCat');

			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineDF = document.createElement('select');
			inptProdLineDF.setAttribute('placeholder', 'Dosage Form');
			inptProdLineDF.setAttribute('name', pLName.strPL + '[DosageForm]');

			inptProdLineDF.addEventListener('change', function () {
				//RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF);

				console.log(this.name);
				for (var d = 0; d < divAddPL.getElementsByTagName('DIV').length; d++) {
					EnumerateProduct2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], this);
					console.log('DOING IT 2');
					//ResetStrength2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
					//ResetNRN2(inptProdLine, divAddPL.getElementsByTagName('DIV')[d].children[3], inptProdLineDF, divAddPL.getElementsByTagName('DIV')[d].children[7], divAddPL.getElementsByTagName('DIV')[d].children[10], divAddPL.getElementsByTagName('DIV')[d].children[13], divAddPL.getElementsByTagName('DIV')[d].children[16]);
				}

				//EnumerateProdLineDF(inptProdLine, inptProdLineDF)
			});

			EnumerateProdLineDF(inptProdLine, inptProdLineDF);


			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineCat.options[a] = new Option(regulatedProductsArr[a]);
				inptProdLineCat.options[a].value = regulatedProductsArr[a];
			}

			var inptProdLineInspType = document.createElement('select');
			inptProdLineInspType.setAttribute('name', pLName.strPL + '[ProdLineInspType]');
			for (var a = 0; a < regulatedProductsArr.length; a++) {
				inptProdLineInspType.options[a] = new Option(inspTypeArr[a]);
				inptProdLineInspType.options[a].value = inspTypeArr[a];
			}

			inptProdLineCat.addEventListener('click', function () { console.log(this.name) });
			inptProdLineInspType.addEventListener('click', function () { console.log(this.name); });
			/*
			var selProdLine = document.createElement('select');
				selProdLine.setAttribute('name','regSelPL[]');
			*/
			var inptProdButAdd = document.createElement('input');
			inptProdButAdd.setAttribute('type', 'button');
			inptProdButAdd.setAttribute('value', 'Add Product');

			(function (pLName) {
				inptProdButAdd.addEventListener('click', function () {
					console.log('From the LineProdNoC');
					AddProductsDER(divAddPL, pLName, inptProdLine, inptProdLineDF, ReArrangeProduct(divAddPL, pLName, this.parentNode));
					if (inptProdLineInspType.value == 'GMP Reassessment') {
						console.log('ENTERED HERE GMP Reassessment');
						EnumerateFindings(regNoCDiv.value, divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, inptProdLineInspType.value);
					}

				});
			})(pLName)
			//Adding Product Line Fields

			divAddPL.appendChild(newLink);
			divAddPL.appendChild(inptDelProdLine);
			divAddPL.appendChild(inptProdLine);
			//divAddPL.appendChild(inptProdLineCat);
			divAddPL.appendChild(inptProdLineDF);
			divAddPL.appendChild(inptProdLineInspType);
			//divAddPL.appendChild(selProdLine);
			divAddPL.appendChild(inptProdButAdd);


			//Row declaration
			var FindsRow = document.createElement('tr');
			FindsRow.setAttribute('name', 'PLRow[]');
			FindsRow.setAttribute('class', 'PLRow2');
			var FindsCell1 = document.createElement('td');
			var FindsCell2 = document.createElement('td');
			FindsCell2.appendChild(divAddPL);

			FindsRow.appendChild(FindsCell1);
			FindsRow.appendChild(FindsCell2);

			regFormTabGrab.insertBefore(FindsRow, regFormTabRowAGrab);

			if (regFormTabGrab.contains(FindsRow)) {
				console.log('The row is a child');
				console.log(FindsRow);
				console.log('This is the name of the row ' + FindsRow.getAttribute('name'));
				console.log('This is the name of the table ' + regFormTabGrab.name);
			}

			console.log('...Added.');

		}

		function xmlAutoInptProdLine(xmlAuto2, selText) {
			//regPLGrab = document.getElementById('regPL');
			//emptying select box
			/*
			while (regPLGrab.length>0) {
					regPLGrab.remove(0);
			}
			*/
			productLineArr = [], productLineArr2 = [];
			//xmlAuto2Det = xmlAuto2.companyName;


			for (var a = 0; a < xmlAuto2.companyName.length; a++) {
				console.log('Naming...');
				if (xmlAuto2.companyName[a.name] == selText) {
					productLineArr.push(xmlAuto2.productLineName[a]);
					xmlAuto2.companyName[a.add]
					emailAddy = xmlAuto2.companyEmail[a];
					contactPersVal = xmlAuto2.contactPerson[a];
					stateVal = xmlAuto2.state[a];

				}

			}
			regCompAddressGrab.value = companyAddy;
			regEmailGrab.value = emailAddy;
			regContPersGrab.value = contactPersVal;
			regPlaceGrab.value = stateVal;

			productLineArr.sort();

			for (var b = 0; b < productLineArr.length; b++) {
				if (productLineArr[b] == productLineArr[b + 1]) {
					delete productLineArr[b];
				}
			}

			for (var d = 0; d < productLineArr.length; d++) {
				if (productLineArr[d] != undefined) {
					productLineArr2.push(productLineArr[d]);
				}
			}


			for (var d = 0; d < productLineArr2.length; d++) {
				//regPLGrab.options[d] = new Option (productLineArr2[d]);
			}


			console.log(xmlAuto2);
			console.log('This is selected Text: ' + selText);
			console.log('This is productLine Arr: ' + productLineArr2);
			/*
			if (regPLGrab.options.length==0) {
				console.log('Reverting to text inputs');
			}
			*/

		}

		function xmlAutoInptProdLine2(xmlAuto2, regNoCDivVal, selText) {
			console.log('Entered xmlAutoInpt...');
			console.log('This is selText: ' + selText);
			console.log('This is regNoCDiv:' + regNoCDivVal);
			productLineArr = [], productLineArr2 = [];

			for (var a = 0; a < xmlAuto2.companyName.length; a++) {
				console.log('Inside FOR');
				if (xmlAuto2.companyName[a].name == regNoCDivVal) {
					if (xmlAuto2.companyName[a].add == (regCompAddressBool ? regCompAddressGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Lat and Lng: ', xmlAuto2.latitude[a], xmlAuto2.longitude[a]);
						console.log('Did I make it in?');
						console.log(regNoCDivVal, selText);
						console.log(xmlAuto2);
						productLineArr.push(xmlAuto2.productLineName[a]);
						companyAddy = xmlAuto2.companyName[a].add;
						companyLat = xmlAuto2.latitude[a];
						companyLng = xmlAuto2.longitude[a];
						console.log('Lat2 and Lng2: ', companyLat, companyLng);
						emailAddy = xmlAuto2.companyEmail[a];
						contactPersVal = xmlAuto2.contactPerson[a];
						stateVal = xmlAuto2.state[a];
					}
				}

			}
			console.log('This is Name of Company: ' + xmlAuto2.companyName[0].name);
			console.log('This is company Address: ' + companyAddy);
			console.log('This is company Address: ' + emailAddy);
			regCompAddressGrab.value = companyAddy;
			//regLatGrab.value = companyLat;
			//regLngGrab.value = companyLng;
			regEmailGrab.value = emailAddy;
			regContPersGrab.value = contactPersVal;
			regPlaceGrab.value = stateVal;

			productLineArr.sort();
			console.log('This is productLineArr: ');
			console.log(productLineArr);

			for (var b = 0; b < productLineArr.length; b++) {
				if (productLineArr[b] == productLineArr[b + 1]) {
					delete productLineArr[b];
				}
			}

			for (var d = 0; d < productLineArr.length; d++) {
				if (productLineArr[d] != undefined) {
					productLineArr2.push(productLineArr[d]);
				}
			}


			for (var d = 0; d < productLineArr2.length; d++) {
				//regPLGrab.options[d] = new Option (productLineArr2[d]);
			}


			console.log(xmlAuto2);
			console.log('This is selected Text: ' + selText);
			console.log('This is productLine Arr: ' + productLineArr2);
			/*
			if (regPLGrab.options.length==0) {
				console.log('Reverting to text inputs');
			}
			*/

		}

		function xmlAutoInptProdLine2A(xmlAuto2, regNoCDivVal, selText) {
			console.log('Entered xmlAutoInpt...');
			console.log('This is selText: ' + selText);
			console.log('This is regNoCADiv:' + regNoCDivVal);
			productLineArr = [], productLineArr2 = [];

			for (var a = 0; a < xmlAuto2.companyName.length; a++) {
				console.log('Inside FOR');
				if (xmlAuto2.companyName[a].name == regNoCDivVal) {
					if (xmlAuto2.companyName[a].add == (regCompAddressBoolA ? regCompAddressAGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Did I make it in?');
						console.log(regNoCDivVal, selText);
						console.log(xmlAuto2);
						productLineArr.push(xmlAuto2.productLineName[a]);
						companyAddy = xmlAuto2.companyName[a].add;
						companyLat = xmlAuto2.latitude[a];
						companyLng = xmlAuto2.longitude[a];
						emailAddy = xmlAuto2.companyEmail[a];
						contactPersVal = xmlAuto2.contactPerson[a];
						stateVal = xmlAuto2.state[a];
					}
				}

			}
			console.log('This is Name of Company: ' + xmlAuto2.companyName[0].name);
			console.log('This is company Address: ' + companyAddy);
			console.log('This is company Address: ' + emailAddy);
			console.log('This is state ', stateVal);
			regCompAddressAGrab.value = companyAddy;
			regLatAGrab.value = companyLat;
			regLngAGrab.value = companyLng;
			regEmailAGrab.value = emailAddy;
			regContPersAGrab.value = contactPersVal;
			regPlaceAGrab.value = stateVal;
			console.log('This is stateOption ', regPlaceAGrab.value);

			productLineArr.sort();
			console.log('This is productLineArr: ');
			console.log(productLineArr);

			for (var b = 0; b < productLineArr.length; b++) {
				if (productLineArr[b] == productLineArr[b + 1]) {
					delete productLineArr[b];
				}
			}

			for (var d = 0; d < productLineArr.length; d++) {
				if (productLineArr[d] != undefined) {
					productLineArr2.push(productLineArr[d]);
				}
			}


			for (var d = 0; d < productLineArr2.length; d++) {
				//regPLGrab.options[d] = new Option (productLineArr2[d]);
			}


			console.log(xmlAuto2);
			console.log('This is selected Text: ' + selText);
			console.log('This is productLine Arr: ' + productLineArr2);
			/*
			if (regPLGrab.options.length==0) {
				console.log('Reverting to text inputs');
			}
			*/

		}


		function PopulateProductLine(inptProdLine2, plOpt) {
			console.log('Populating, Dosage Form');
			alert(plOpt);
			alert(productLineArr2[plOpt]);
			while (inptProdLine2.length > 0) {
				inptProdLine2.remove(0);
			}

			console.log(productLineArr2);

			for (var d = 0; d < productLineArr2.length; d++) {
				inptProdLine2.options[d] = new Option(productLineArr2[d]);
			}

			if (editPass) {
				inptProdLine2.value = productLineArr2[plOpt]; //for editing
			}

		}

		function PopulateDosageForm(inptProdLine, inptProdLineDF2, boolVal) {
			console.log('Populating productLine...!');
			if (boolVal) {
				while (inptProdLineDF2.length > 0) {
					inptProdLineDF2.remove(0);
				}

				for (var d = 0; d < DERDFArr.length; d++) {
					inptProdLineDF2.options[d] = new Option(DERDFArr[d]);
				}
			} else {
				while (inptProdLineDF2.length > 0) {
					inptProdLineDF2.remove(0);
				}

				for (var d = 0; d < dosFormArr2.length; d++) {
					inptProdLineDF2.options[d] = new Option(dosFormArr2[d]);
				}

			}
		}



		function EnumerateProdLineDF(inptProdLine2, inptProdLineDF2) {
			console.log('Enumerating Dosage Forms...');
			dosFormArr = [];
			dosFormArr2 = [];

			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCDiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBool ? regCompAddressGrab.value : xmlAuto.companyName[a].add)) {
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							dosFormArr.push(xmlAuto.dosFormsType[a]);

						}
					}
				} else {
					console.log('Not product line');
				}

			}


			dosFormArr.sort();
			for (var b = 0; b < dosFormArr.length; b++) {
				if (dosFormArr[b] == dosFormArr[b + 1]) {
					delete dosFormArr[b];
				}
			}

			for (var d = 0; d < dosFormArr.length; d++) {
				if (dosFormArr[d] != undefined) {
					dosFormArr2.push(dosFormArr[d]);
				}
			}


			while (inptProdLineDF2.length > 0) {
				inptProdLineDF2.remove(0);
			}

			for (var d = 0; d < dosFormArr2.length; d++) {
				inptProdLineDF2.options[d] = new Option(dosFormArr2[d]);
			}

			console.log('This is dosForm Array: ' + dosFormArr2);


		}



		function EnumerateProdLineDFA(inptProdLine2, inptProdLineDF2) {
			console.log('Enumerating Dosage Forms...');
			dosFormArr = [];
			dosFormArr2 = [];

			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCADiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBoolA ? regCompAddressAGrab.value : xmlAuto.companyName[a].add)) {
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							dosFormArr.push(xmlAuto.dosFormsType[a]);

						}
					}
				} else {
					console.log('Not product line');
				}

			}


			dosFormArr.sort();
			for (var b = 0; b < dosFormArr.length; b++) {
				if (dosFormArr[b] == dosFormArr[b + 1]) {
					delete dosFormArr[b];
				}
			}

			for (var d = 0; d < dosFormArr.length; d++) {
				if (dosFormArr[d] != undefined) {
					dosFormArr2.push(dosFormArr[d]);
				}
			}


			while (inptProdLineDF2.length > 0) {
				inptProdLineDF2.remove(0);
			}

			for (var d = 0; d < dosFormArr2.length; d++) {
				inptProdLineDF2.options[d] = new Option(dosFormArr2[d]);
			}

			console.log('This is dosForm Array: ' + dosFormArr2);


		}





		function EnumerateProduct2(inptProdLine2, inptProdName, inptProdLineDF) {
			//console.log(regPLGrab.options[regPLGrab.selectedIndex].text);
			console.log('xmlAuto info (Object of Arrays): ');
			console.log(xmlAuto);
			console.log('Array of Object: ');
			console.log(productArrWholeAlt2);
			//console.log('productLine information: '+inptProdLine2.options[inptProdLine2.selectedIndex].text);
			productArr = [];
			productArr2 = [];
			productArrWhole = [];


			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCDiv.value) {
					console.log('Entered Comp name:');
					if (xmlAuto.companyName[a].add == (regCompAddressBool ? regCompAddressGrab.value : xmlAuto.companyName[a].add)) { //accounting for new address
						console.log('Company name info: ', xmlAuto.companyName[a], regNoCDiv.value);
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product Line info: ', xmlAuto.productLineName[a], inptProdLine2.options[inptProdLine2.selectedIndex].text);
							//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
							if (xmlAuto.dosFormsType[a] == inptProdLineDF.value) {
								productArr.push(xmlAuto.productName[a]);
								console.log(productArr);
								productArrWhole.push(xmlAuto.productName[a]); //for use with Renewal; has all the information
								//use another array to store
							}
						}
					}
				} else {
					console.log('Not Company');
				}

			}


			//Trimming productArr
			console.log('Trimming for Product Name...');
			productArr.sort();
			//	dosFormArr.sort();

			//console.log(autoArr);
			for (var b = 0; b < productArr.length; b++) {
				if (productArr[b] == productArr[b + 1]) {
					delete productArr[b];
				}
			}

			for (var d = 0; d < productArr.length; d++) {
				if (productArr[d] != undefined) {
					productArr2.push(productArr[d]);
				}
			}

			if (inptProdName != null) {
				while (inptProdName.length > 0) {
					inptProdName.remove(0);
				}

				for (var c = 0; c < productArr2.length; c++) {
					console.log(productArr2[c]);
					inptProdName.options[c] = new Option(productArr2[c]);
					console.log('Updating Product Name NOW...');
				}
			}
			/*	
			var removeFinds = inptProdName.parentNode.getElementsByTagName('div'); //if any findings
			while (removeFinds.length) {
				removeFinds[0].parentNode.removeChild(removeFinds[0]);
			}
			*/

		}

		function EnumerateProduct2A(inptProdLine2, inptProdName, inptProdLineDF) {
			//console.log(regPLGrab.options[regPLGrab.selectedIndex].text);
			console.log('xmlAuto info (Object of Arrays): ');
			console.log(xmlAuto);
			console.log('Array of Object: ');
			console.log(productArrWholeAlt2);
			//console.log('productLine information: '+inptProdLine2.options[inptProdLine2.selectedIndex].text);
			productArr = [];
			productArr2 = [];
			productArrWhole = [];


			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCADiv.value) {
					console.log('Entered Comp name:');
					if (xmlAuto.companyName[a].add == (regCompAddressBoolA ? regCompAddressAGrab.value : xmlAuto.companyName[a].add)) { //accounting for new address
						console.log('Company name info: ', xmlAuto.companyName[a], regNoCADiv.value);
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product Line info: ', xmlAuto.productLineName[a], inptProdLine2.options[inptProdLine2.selectedIndex].text);
							//dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
							if (xmlAuto.dosFormsType[a] == inptProdLineDF.value) {
								productArr.push(xmlAuto.productName[a]);
								console.log(productArr);
								productArrWhole.push(xmlAuto.productName[a]); //for use with Renewal; has all the information
								//use another array to store
							}
						}
					}
				} else {
					console.log('Not Company');
				}

			}


			//Trimming productArr
			console.log('Trimming for Product Name...');
			productArr.sort();
			//	dosFormArr.sort();

			//console.log(autoArr);
			for (var b = 0; b < productArr.length; b++) {
				if (productArr[b] == productArr[b + 1]) {
					delete productArr[b];
				}
			}

			for (var d = 0; d < productArr.length; d++) {
				if (productArr[d] != undefined) {
					productArr2.push(productArr[d]);
				}
			}

			if (inptProdName != null) {
				while (inptProdName.length > 0) {
					inptProdName.remove(0);
				}

				for (var c = 0; c < productArr2.length; c++) {
					console.log(productArr2[c]);
					inptProdName.options[c] = new Option(productArr2[c]);
					console.log('Updating Product Name NOW...');
				}
			}
			/*	
			var removeFinds = inptProdName.parentNode.getElementsByTagName('div'); //if any findings
			while (removeFinds.length) {
				removeFinds[0].parentNode.removeChild(removeFinds[0]);
			}
			*/

		}



		function ResetStrength2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric) {
			console.log(inptProdLine2);
			strengthArr = [], strengthArr2 = [];
			console.log('I have been clicked for Strength...');
			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCDiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBool ? regCompAddressGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Product: I have been clicked. Company', xmlAuto.companyName[a].add);
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product: I have been clicked. ProductLine');
							console.log(xmlAuto.productName[a]);
							if (xmlAuto.productName[a] == inptProdName.value) {
								console.log('Product: I have been clicked. Product');

								if (xmlAuto.dosFormsType[a] == inptProdLineDF2.value) {
									//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
									strengthArr.push(xmlAuto.productStrength[a]);
									//regStGrab.value = xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data;
									console.log('This is ResetStrength return value1: ' + a);
									console.log('Pushed into strengthArr');
									console.log(strengthArr);


								} else {
									strengthArr = [];
								}
							}
						}
					}
				}

			}


			console.log('We are sorting now!');
			strengthArr.sort();

			for (var b = 0; b < strengthArr.length; b++) {
				if (strengthArr[b] == strengthArr[b + 1]) {
					delete strengthArr[b];
				}
			}
			for (var d = 0; d < strengthArr.length; d++) {
				if (strengthArr[d] != undefined) {
					strengthArr2.push(strengthArr[d]);
				}
			}
			while (inptStrength.length > 0) {
				inptStrength.remove(0);
			}
			console.log('Populating select box');
			for (var c = 0; c < strengthArr2.length; c++) {
				inptStrength.options[c] = new Option(strengthArr2[c]);
			}

			ResetNRN2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
		}


		function ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric) {
			console.log(inptProdLine2);
			strengthArr = [], strengthArr2 = [];
			console.log('I have been clicked for Strength...');
			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCADiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBoolA ? regCompAddressAGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Product: I have been clicked. Company', xmlAuto.companyName[a].add);
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product: I have been clicked. ProductLine');
							console.log(xmlAuto.productName[a]);
							if (xmlAuto.productName[a] == inptProdName.value) {
								console.log('Product: I have been clicked. Product');

								if (xmlAuto.dosFormsType[a] == inptProdLineDF2.value) {
									//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStAGrab.value) 
									strengthArr.push(xmlAuto.productStrength[a]);
									//regStGrab.value = xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data;
									console.log('This is ResetStrength return value1: ' + a);
									console.log('Pushed into strengthArr');
									console.log(strengthArr);


								} else {
									strengthArr = [];
								}
							}
						}
					}
				}

			}


			console.log('We are sorting now!');
			strengthArr.sort();

			for (var b = 0; b < strengthArr.length; b++) {
				if (strengthArr[b] == strengthArr[b + 1]) {
					delete strengthArr[b];
				}
			}
			for (var d = 0; d < strengthArr.length; d++) {
				if (strengthArr[d] != undefined) {
					strengthArr2.push(strengthArr[d]);
				}
			}
			while (inptStrength.length > 0) {
				inptStrength.remove(0);
			}
			console.log('Populating select box');
			for (var c = 0; c < strengthArr2.length; c++) {
				inptStrength.options[c] = new Option(strengthArr2[c]);
			}

			ResetNRN2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
		}

		function ResetNRN2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric) {
			console.log('Strength AUTOCOMPLETE');
			nrnArr = [], nrnArr2 = [];
			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCDiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBool ? regCompAddressGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Product: I have been clicked. Company');
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product: I have been clicked. ProductLine');
							if (xmlAuto.productName[a] == inptProdName.value) {
								console.log('Product: I have been clicked. Product');

								if (xmlAuto.dosFormsType[a] == inptProdLineDF2.value) {
									//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
									if (xmlAuto.productStrength[a] == inptStrength.value) {
										nrnArr.push(xmlAuto.NRN[a]);
										console.log(nrnArr);
										console.log('Above is nrnArr: ' + nrnArr);
										console.log(xmlAuto.subClassName[a]);
										console.log(xmlAuto.genName[a]);
										inptNRN.value = nrnArr[0];
										inptSubClass.value = xmlAuto.subClassName[a];
										inptGeneric.value = xmlAuto.genName[a];
									} else {
										inptNRN.value = "";
										inptNRN.setAttribute('placeholder', 'No Matching NRN');
									}

								} else {
									inptNRN.value = "";
									inptNRN.setAttribute('placeholder', 'No Matching NRN');
								}
							}
						}
					}
				}

			}

		}

		function ResetNRN2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric) {
			console.log('Strength AUTOCOMPLETE');
			nrnArr = [], nrnArr2 = [];
			for (var a = 0; a < xmlAuto.companyName.length; a++) {
				if (xmlAuto.companyName[a].name == regNoCADiv.value) {
					if (xmlAuto.companyName[a].add == (regCompAddressBoolA ? regCompAddressAGrab.value : xmlAuto.companyName[a].add)) {
						console.log('Product: I have been clicked. Company');
						if (xmlAuto.productLineName[a] == inptProdLine2.options[inptProdLine2.selectedIndex].text) {
							console.log('Product: I have been clicked. ProductLine');
							if (xmlAuto.productName[a] == inptProdName.value) {
								console.log('Product: I have been clicked. Product');

								if (xmlAuto.dosFormsType[a] == inptProdLineDF2.value) {
									//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStAGrab.value) 
									if (xmlAuto.productStrength[a] == inptStrength.value) {
										nrnArr.push(xmlAuto.NRN[a]);
										console.log(nrnArr);
										console.log('Above is nrnArr: ' + nrnArr);
										console.log(xmlAuto.subClassName[a]);
										console.log(xmlAuto.genName[a]);
										inptNRN.value = nrnArr[0];
										inptSubClass.value = xmlAuto.subClassName[a];
										inptGeneric.value = xmlAuto.genName[a];
									} else {
										inptNRN.value = "";
										inptNRN.setAttribute('placeholder', 'No Matching NRN');
									}

								} else {
									inptNRN.value = "";
									inptNRN.setAttribute('placeholder', 'No Matching NRN');
								}
							}
						}
					}
				}

			}

		}


		function NewSingleProduct3(divAddProductCollection, divAddPL2, newRegPNGrabBool2) {
			console.log('Under NewSingleProduct3:' + newRegPNGrabBool2);
			//console.log (divAddProductCollection[1].className);
			for (var c = 0; c < divAddProductCollection.length; c++) {
				//divAddPL.getElementsByTagName('DIV')[c].children[3].name).substr(20)
				//var transInptProdName = divAddProductCollection.getElementsByTagName('DIV')[c].children[3].name;//inptProdName.name;
				if (divAddProductCollection[c].id == 'men') {
					//console.log(divAddProductCollection);
					console.log(divAddProductCollection[c]);

					divAddProduct = divAddProductCollection[c];

					console.log(divAddProductCollection[c].children[3]);
					var transInptProdName = divAddProduct.children[3].name;//inptProdName.name;
					var transInptStrength = divAddProduct.children[7].name;//inptStrength.name;
					var transInptNRN = divAddProduct.children[10].name;//inptNRN.name;
					var transSubClass = divAddProduct.children[13].name;//inptSubClass.name;
					var transGeneric = divAddProduct.children[16].name;//inptGeneric.name;


					if (newRegPNGrabBool2 == false) {
						divAddProduct.children[4].style.display = 'none'; //Making Link invisible
						console.log('About to remove extra Product');
						//divAddPL2.removeChild(divAddProductCollection[c]);


						divAddProduct.removeChild(divAddProduct.children[3]);
						inptProdName = document.createElement('input');
						inptProdName.setAttribute('type', 'text');
						inptProdName.setAttribute('required', true);
						inptProdName.setAttribute('name', transInptProdName);
						inptProdName.setAttribute('placeholder', 'Input additional Product');
						//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});
						inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });
						divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);

						divAddProduct.removeChild(divAddProduct.children[7]);
						inptStrength = document.createElement('input');
						inptStrength.setAttribute('type', 'number');
						inptStrength.setAttribute('required', true);
						inptStrength.setAttribute('name', transInptStrength);
						inptStrength.setAttribute('placeholder', 'Number only');
						inptStrength.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);

						divAddProduct.removeChild(divAddProduct.children[10]);
						inptNRN = document.createElement('input');
						inptNRN.setAttribute('value', 'nil');
						inptNRN.setAttribute('name', transInptNRN);
						inptNRN.setAttribute('readonly', 'true');
						divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);


						divAddProduct.removeChild(divAddProduct.children[13]);
						inptSubClass = document.createElement('select');
						inptSubClass.setAttribute('name', transSubClass);
						inptSubClass.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
						for (var a = 0; a < DERSCArr.length; a++) {
							inptSubClass.options[a] = new Option(DERSCArr[a]);
							inptSubClass.options[a].value = DERSCArr[a];
						}


						divAddProduct.removeChild(divAddProduct.children[16]);
						inptGeneric = document.createElement('select');
						inptGeneric.setAttribute('name', transGeneric);
						inptGeneric.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
						for (var a = 0; a < DERGenArr.length; a++) {
							inptGeneric.options[a] = new Option(DERGenArr[a]);
							inptGeneric.options[a].value = DERGenArr[a];
						}

						/*
						inptProdName.addEventListener('change', function () {
																		console.log('Adding additional product...');
																		ProdAutoComp();
																		ResetStrength();
																		ResetNRN();
																		});
						*/
						console.log('-------');
						console.log('Removing event listener from DF');
						console.log('-------');
						if (divAddPL2.children[3].addEventListener('change', DFReset)) {
							divAddPL2.children[3].removeEventListener('change', DFReset);
						}


						console.log('Inputting additional Prod Element');
						console.log('After: ' + newRegPNGrabBool2);
						newRegPNGrabBool2Another = false;
					} else {
						console.log('boolean is truyeeeee');
						divAddProduct.children[4].style.display = 'inline';
						divAddProduct.removeChild(divAddProduct.children[3]);
						inptProdName = document.createElement('select');
						inptProdName.setAttribute('name', transInptProdName);
						//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});
						inptProdName.addEventListener('click', function () { console.log('This is the product seconid name' + this.name); console.log(typeof (this.name)); });


						divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);

						divAddProduct.removeChild(divAddProduct.children[7]);
						inptStrength = document.createElement('select');
						inptStrength.setAttribute('name', transInptStrength);
						inptStrength.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);

						divAddProduct.removeChild(divAddProduct.children[10]);
						inptNRN = document.createElement('input');
						inptNRN.setAttribute('value', 'nil');
						inptNRN.setAttribute('name', transInptNRN);
						inptNRN.setAttribute('readonly', 'true');
						divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);


						divAddProduct.removeChild(divAddProduct.children[13]);
						inptSubClass = document.createElement('input');
						inptSubClass.setAttribute('name', transSubClass);
						inptSubClass.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
						/*
						for (var a=0;a<DERSCArr.length;a++) {
							inptSubClass.options[a] = new Option(DERSCArr[a]);
							inptSubClass.options[a].value = DERSCArr[a];
						}
						*/

						divAddProduct.removeChild(divAddProduct.children[16]);
						inptGeneric = document.createElement('input');
						inptGeneric.setAttribute('name', transGeneric);
						inptGeneric.addEventListener('click', function () { console.log(this.name) });
						divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);


						(function (inptProdName, inptStrength, inptNRN, inptSubClass, inptGeneric) {
							inptProdName.addEventListener('change', function () {
								console.log('Added back...');
								console.log('Name of product field: ' + this.name);
								//ProdAutoComp();
								ResetStrength2(divAddPL2.children[2], inptProdName, divAddPL2.children[3], inptStrength, inptNRN, inptSubClass, inptGeneric);
								ResetNRN2(divAddPL2.children[2], inptProdName, divAddPL2.children[3], inptStrength, inptNRN, inptSubClass, inptGeneric);
							});

						})(inptProdName, inptStrength, inptNRN, inptSubClass, inptGeneric);




						//EnumerateProduct2(inptProdLine2,inptProdName,inptProdLineDF2); //consider extruding this so that it can be called by a 'change' in prodLine to affect product select population
						EnumerateProduct2(divAddPL2.children[2], inptProdName, divAddPL2.children[3]); //consider extruding this so that it can be called by a 'change' in prodLine to affect product select population




						ResetStrength2(divAddPL2.children[2], inptProdName, divAddPL2.children[3], inptStrength, inptNRN, inptSubClass, inptGeneric);



						//inptProdName.addEventListener ('click', function () {console.log('Name is: '+this.name)});

						//inptProdLineDF2


						//divAddPL2.children[3].addEventListener ('change', DFReset);
						function DFReset() {
							console.log('Name of productLineDF field: ' + this.name);
							ResetStrength2(divAddPL2.children[2], inptProdName, divAddPL2.children[3], inptStrength, inptNRN, inptSubClass, inptGeneric);
							ResetNRN2(divAddPL2.children[2], inptProdName, divAddPL2.children[3], inptStrength, inptNRN, inptSubClass, inptGeneric);
						}



						console.log('Select Prod Element');
						console.log('PL' + newRegPLGrabBool);
						console.log('PN' + newRegPNGrabBool);

						//this.innerHTML = 'New';												
						//newRegPNGrabBool=true;
						//newRegPNGrabBool2= true;
						newRegPNGrabBool2Another = true;
					}
				}

				for (var d = 0; d < divAddProductCollection.length; d++) {
					console.log('!!!!!!');
					console.log('Removing Finds...');
					var prodFinds = divAddProductCollection[d].getElementsByTagName('div');
					while (prodFinds.length) {
						divAddProductCollection[d].removeChild(prodFinds[0]);
					}
					console.log('!!!!!!');
				}
			}
		}




		function AddProductsDER(divAddPL, thisName, inptProdLine2, inptProdLineDF2, gmp3, newRegPNGrabBool2, productArrWholePassed) {

			console.log('VAL OF Boolean: ' + newRegPNGrabBool2);
			console.log('This is the real name of pl Input: ' + inptProdLine2.name);

			console.log('This is the name of parent Product Line: ' + thisName.strPL);
			console.log('Selected Regulated product: ' + regRegProdGrab.value);

			var regProdSC = (regRegProdGrab.value == 'Drug') ? DERSCArr : FSANSCArr;
			var regProdGen = (regRegProdGrab.value == 'Drug') ? DERGenArr : FSANGenArr;
			var prodCat = (regRegProdGrab.value == 'Drug') ? 'Drug' : 'Food';

			var divAddProduct = document.createElement('div');
			divAddProduct.setAttribute('id', 'men');
			divAddProduct.setAttribute('name', 'menClass');
			//divAddProduct.setAttribute('class', pRName.strPR);
			divAddProduct.addEventListener('click', function () { console.log('Product Div has this many elements: ' + divAddProduct.children.length); console.log('Name of productclass:' + divAddProduct.className) });

			//partialName = thisName.strPL +'[Pr]'+ '[' + (thisName.prodNumber++)+']';
			partialName = divAddPL.className + '[Pr]' + '[' + (thisName.prodNumber++) + ']';
			console.log('This is partialName: ' + partialName);
			var pRName = new Object();
			pRName.pRNum = ++numInptsFinds;
			pRName.strPR = partialName;
			pRName.findsNumber = 0;
			var thisProdNumber = thisName.prodNumber;
			console.log('----------');
			divAddProduct.prPRName = pRName;
			console.log(divAddProduct.prPRNumber);
			//Declaring product fields
			var inptProdDel = document.createElement('input');
			inptProdDel.setAttribute('type', 'button');
			inptProdDel.setAttribute('value', 'Delete Product');
			inptProdDel.setAttribute('class', 'formButs');

			(function (divAddProduct, inptProdDel, inptBreak10, thisProdNumber) {
				//inptProdDel.addEventListener('click', function() {console.log(this.parentNode.id);if (divAddPL.contains(inptBreak10)) {console.log('Contains break');console.log('Number to be deleted: '+(--thisProdNumber)); divAddPL.removeChild(inptBreak10);};divAddPL.removeChild(divAddProduct);});
				inptProdDel.addEventListener('click', function () { console.log(this.parentNode.parentNode.nodeName); console.log(this.parentNode.parentNode.id); DeleteProduct(this, this.parentNode.parentNode, thisName, inptBreak10); });
			})(divAddProduct, inptProdDel, inptBreak10, thisProdNumber);

			//thisName.prodNumber = ++numInpts2;


			transitName = thisName; //used in storing value for future comparison

			var inptProdName = document.createElement('input');
			inptProdName.setAttribute('type', 'text');
			inptProdName.setAttribute('Placeholder', 'Name of Product');
			inptProdName.setAttribute('name', partialName + '[ProductName]');
			inptProdName.setAttribute('required', true);
			inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

			var inptProdNameLab = document.createElement('label');
			inptProdNameLab.innerHTML = 'Product Name: ';
			inptProdNameLab.className = 'labDer';

			var inptProdLink = document.createElement('a');
			inptProdLink.setAttribute('href', '#');
			inptProdLink.innerHTML = "New?";

			console.log('Before: ' + newRegPNGrabBool2);
			(function (newRegPNGrabBool2) {
				inptProdLink.addEventListener('click', function () { console.log('Changing...' + newRegPNGrabBool2); NewSingleProduct2(!newRegPNGrabBool2); console.log('Changed...' + newRegPNGrabBool2); newRegPNGrabBool2 = !newRegPNGrabBool2 });
			})(newRegPNGrabBool2);
			console.log('After: ' + newRegPNGrabBool2);
			//NewSingleProduct2(false);

			function NewSingleProduct2(newRegPNGrabBool2) {
				console.log('...Product New Manipulation!');
				console.log(newRegPNGrabBool2);
				var transInptProdName = inptProdName.name;
				var transInptStrength = inptStrength.name;
				var transInptNRN = divAddProduct.children[10].name;
				var transSubClass = inptSubClass.name;
				var transGeneric = inptGeneric.name;
				console.log('Name of product field: ' + transInptProdName);
				console.log(divAddProduct.children[3].name);

				if (divAddProduct.children[3].nodeName != 'INPUT') {// ||inptProdlineChangeBool==true ||newRegPNGrabBool2==false

					console.log('nodeName is: ' + divAddProduct.children[3].nodeName);
					console.log('About to remove extra Product');
					console.log(divAddProduct);

					console.log('If you have more problems do it for the other segment of the if');


					divAddProduct.removeChild(divAddProduct.children[3]); //removing inptProdName
					inptProdName = document.createElement('input');
					inptProdName.setAttribute('type', 'text');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.setAttribute('placeholder', 'Input additional Product');
					inptProdName.setAttribute('required', true);
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);
					//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});
					inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

					/*
					inptProdName.addEventListener('change', function () {
																	console.log('Adding additional product...');
																	ProdAutoComp();
																	ResetStrength();
																	ResetNRN();
																	});
					*/
					divAddProduct.removeChild(divAddProduct.children[7]); //removing inptProdName
					inptStrength = document.createElement('input');
					inptStrength.setAttribute('type', 'number');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.setAttribute('placeholder', 'Number only');
					inptStrength.setAttribute('required', true);
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);
					inptStrength.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN.value = 'nil';
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);

					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('select');
					inptSubClass.setAttribute('name', transSubClass);
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('select');
					inptGeneric.setAttribute('name', transGeneric);
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });

					for (var a = 0; a < regProdSC.length; a++) {
						inptSubClass.options[a] = new Option(regProdSC[a]);
						inptSubClass.options[a].value = regProdSC[a];
					}

					for (var a = 0; a < regProdGen.length; a++) {
						inptGeneric.options[a] = new Option(regProdGen[a]);
						inptGeneric.options[a].value = regProdGen[a];
					}

					console.log('Inputting additional Prod Element');
					console.log('After: ' + newRegPNGrabBool2);
					inptProdLink.innerHTML = 'Old';
				} else {
					console.log('Boolean value for additional product: ' + newRegPNGrabBool2);

					divAddProduct.removeChild(divAddProduct.children[3]);
					inptProdName = document.createElement('select');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.addEventListener('click', function () { console.log('This is the product seconid name' + this.name); console.log(typeof (this.name)); });
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);

					divAddProduct.removeChild(divAddProduct.children[7]);
					inptStrength = document.createElement('select');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN = document.createElement('input');
					inptNRN.setAttribute('value', 'nil');
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);


					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('input');
					inptSubClass.setAttribute('name', transSubClass);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('input');
					inptGeneric.setAttribute('name', transGeneric);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);


					if (gmp3 == 'Renewal') {
						EnumerateProduct2(inptProdLine2, null, inptProdLineDF2);
					} else {
						EnumerateProduct2(inptProdLine2, inptProdName, inptProdLineDF2); //consider extruding this so that it can be called by a 'change' in prodLine to affect product select population

						ResetStrength2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}

					//inptProdLineDF2.addEventListener ('change', DFReset);
					function DFReset() {
						//RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF);

						console.log('Name of productLineDF field: ' + this.name);
						EnumerateProduct2(inptProdLine2, inptProdName, inptProdLineDF2);
						ResetStrength2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}


					inptProdName.addEventListener('change', function () {
						console.log('Added back...');
						console.log('Name of product field: ' + this.name);
						//ProdAutoComp();
						ResetStrength2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
					});

					//What is this for??
					/*
						regStGrab = document.createElement('select');
						regStGrab.setAttribute('name','regPLL[0][PL][Pr][0][ProductStrength]');
						regStGrab.addEventListener('click', function() {console.log('I have been clicked');ResetStrength2();});
						regStGrab.addEventListener('click', ResetNRN2);
					*/


					//inptProdLineDF2.addEventListener('change', RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF));

					//Is this necessary??
					inptProdLineDF2.addEventListener('click', ResetStrength2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric));


					console.log('Select Prod Element');
					console.log('PL' + newRegPLGrabBool);
					console.log('PN' + newRegPNGrabBool);
					inptProdLink.innerHTML = 'New';

				}
			}

			function NewSingleProduct2A(newRegPNGrabBool2) {
				console.log('...Product New Manipulation!');
				console.log(newRegPNGrabBool2);
				var transInptProdName = inptProdName.name;
				var transInptStrength = inptStrength.name;
				var transInptNRN = divAddProduct.children[10].name;
				var transSubClass = inptSubClass.name;
				var transGeneric = inptGeneric.name;
				console.log('Name of product field: ' + transInptProdName);
				console.log(divAddProduct.children[3].name);

				if (divAddProduct.children[3].nodeName != 'INPUT') {// ||inptProdlineChangeBool==true ||newRegPNGrabBool2==false

					console.log('nodeName is: ' + divAddProduct.children[3].nodeName);
					console.log('About to remove extra Product');
					console.log(divAddProduct);

					console.log('If you have more problems do it for the other segment of the if');


					divAddProduct.removeChild(divAddProduct.children[3]); //removing inptProdName
					inptProdName = document.createElement('input');
					inptProdName.setAttribute('type', 'text');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.setAttribute('placeholder', 'Input additional Product');
					inptProdName.setAttribute('required', true);
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);
					//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});
					inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

					/*
					inptProdName.addEventListener('change', function () {
																	console.log('Adding additional product...');
																	ProdAutoComp();
																	ResetStrength();
																	ResetNRN();
																	});
					*/
					divAddProduct.removeChild(divAddProduct.children[7]); //removing inptProdName
					inptStrength = document.createElement('input');
					inptStrength.setAttribute('type', 'number');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.setAttribute('placeholder', 'Number only');
					inptStrength.setAttribute('required', true);
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);
					inptStrength.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN.value = 'nil';
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);

					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('select');
					inptSubClass.setAttribute('name', transSubClass);
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('select');
					inptGeneric.setAttribute('name', transGeneric);
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });

					for (var a = 0; a < regProdSC.length; a++) {
						inptSubClass.options[a] = new Option(regProdSC[a]);
						inptSubClass.options[a].value = regProdSC[a];
					}

					for (var a = 0; a < regProdGen.length; a++) {
						inptGeneric.options[a] = new Option(regProdGen[a]);
						inptGeneric.options[a].value = regProdGen[a];
					}

					console.log('Inputting additional Prod Element');
					console.log('After: ' + newRegPNGrabBool2);
					inptProdLink.innerHTML = 'Old';
				} else {
					console.log('Boolean value for additional product: ' + newRegPNGrabBool2);

					divAddProduct.removeChild(divAddProduct.children[3]);
					inptProdName = document.createElement('select');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.addEventListener('click', function () { console.log('This is the product seconid name' + this.name); console.log(typeof (this.name)); });
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);

					divAddProduct.removeChild(divAddProduct.children[7]);
					inptStrength = document.createElement('select');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN = document.createElement('input');
					inptNRN.setAttribute('value', 'nil');
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);


					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('input');
					inptSubClass.setAttribute('name', transSubClass);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('input');
					inptGeneric.setAttribute('name', transGeneric);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);


					if (gmp3 == 'Renewal') {
						EnumerateProduct2(inptProdLine2, null, inptProdLineDF2);
					} else {
						EnumerateProduct2A(inptProdLine2, inptProdName, inptProdLineDF2); //consider extruding this so that it can be called by a 'change' in prodLine to affect product select population

						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}

					//inptProdLineDF2.addEventListener ('change', DFReset);
					function DFReset() {
						//RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF);

						console.log('Name of productLineDF field: ' + this.name);
						EnumerateProduct2A(inptProdLine2, inptProdName, inptProdLineDF2);
						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}


					inptProdName.addEventListener('change', function () {
						console.log('Added back...');
						console.log('Name of product field: ' + this.name);
						//ProdAutoComp();
						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
					});

					//What is this for??
					/*
						regStGrab = document.createElement('select');
						regStGrab.setAttribute('name','regPLL[0][PL][Pr][0][ProductStrength]');
						regStGrab.addEventListener('click', function() {console.log('I have been clicked');ResetStrength2A();});
						regStGrab.addEventListener('click', ResetNRN2);
					*/


					//inptProdLineDF2.addEventListener('change', RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF));

					//Is this necessary??
					inptProdLineDF2.addEventListener('click', ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric));


					console.log('Select Prod Element');
					console.log('PL' + newRegPLGrabBool);
					console.log('PN' + newRegPNGrabBool);
					inptProdLink.innerHTML = 'New';

				}
			}




			var selProdName = document.createElement('select');
			selProdName.setAttribute('name', 'regPNSel[]');
			var selProdNameLab = document.createElement('Label');
			selProdNameLab.innerHTML = 'Product Name: '
			selProdNameLab.className = 'labDer';

			//Drug segment
			var inptDosageForm = document.createElement('select');
			//inptDosageForm.setAttribute('name','regPLL[0][DosageForm]');
			inptDosageForm.setAttribute('name', partialName + '[DosageForm]');
			inptDosageForm.addEventListener('click', function () { console.log('This is the Dosage Form name' + this.name) });

			var inptDosageFormLab = document.createElement('Label');
			inptDosageFormLab.setAttribute('name', 'regPL[0][Dosage]');
			inptDosageFormLab.innerHTML = 'Dos. Form: ';
			inptDosageFormLab.className = 'labDer';


			var inptStrength = document.createElement('input');
			inptStrength.setAttribute('name', partialName + '[ProductStrength]');
			inptStrength.setAttribute('required', true);
			inptStrength.addEventListener('click', function () { console.log('This is the strength: ' + this.name) });
			var inptStrengthLab = document.createElement('Label');
			inptStrengthLab.innerHTML = 'Strength: ';
			inptStrengthLab.className = 'labDer';
			//end of drug segment

			var inptNRN = document.createElement('input');
			inptNRN.setAttribute('name', partialName + '[NRN]');
			inptNRN.addEventListener('click', function () { console.log('This is the name of NRN: ' + this.name) });
			var inptNRNLab = document.createElement('Label');
			inptNRNLab.innerHTML = 'NRN: ';
			inptNRNLab.className = 'labDer';

			var inptProductClass = document.createElement('input');
			inptProductClass.setAttribute('type', 'text');
			inptProductClass.setAttribute('readonly', 'true');
			inptProductClass.setAttribute('value', prodCat);
			inptProductClass.setAttribute('name', partialName + '[ProductClass]');
			inptProductClass.addEventListener('click', function () { console.log('This is the product class name: ' + this.name) });
			var inptProductClassLab = document.createElement('label');
			inptProductClassLab.innerHTML = 'Product Class: '
			inptProductClassLab.className = 'labDer';

			var inptSubClass = document.createElement('select');
			inptSubClass.setAttribute('name', partialName + '[SubClass]');
			inptSubClass.addEventListener('click', function () { console.log('This is the SubClass name: ' + this.name) });
			var inptSubClassLab = document.createElement('Label');
			inptSubClassLab.innerHTML = 'SubClass';
			inptSubClassLab.className = 'labDer';

			var inptGeneric = document.createElement('select');
			inptGeneric.setAttribute('name', partialName + '[Generic]');
			inptGeneric.addEventListener('click', function () { console.log('This is the Generic name' + this.name) });
			var inptGenericLab = document.createElement('label');
			inptGenericLab.innerHTML = 'Generic';
			inptGenericLab.className = 'labDer';

			var inptInspType = document.createElement('select');
			inptInspType.setAttribute('name', partialName + '[InspType]');
			var inptInspTypeLab = document.createElement('label');
			inptInspTypeLab.innerHTML = 'Insp. Type: ';
			inptInspTypeLab.className = 'labDer';

			var addFindingsBut = document.createElement('input');
			addFindingsBut.setAttribute('type', 'button');
			addFindingsBut.setAttribute('value', 'Add Findings');
			addFindingsBut.setAttribute('class', 'formButs');


			var inptBreak = document.createElement('br');
			var inptBreak1 = document.createElement('br');
			var inptBreak2 = document.createElement('br');
			var inptBreak3 = document.createElement('br');
			var inptBreak4 = document.createElement('br');
			var inptBreak5 = document.createElement('br');
			var inptBreak6 = document.createElement('br');
			var inptBreak7 = document.createElement('br');
			var inptBreak8 = document.createElement('br');
			var inptBreak9 = document.createElement('br');
			inptBreak10 = document.createElement('br');
			inptBreak10.setAttribute('class', 'menBreak');

			//var inptBreak11 = document.createElement('br');

			//Adding Product Fields to DIV
			divAddProduct.appendChild(inptProdDel);
			divAddProduct.appendChild(inptBreak8);
			divAddProduct.appendChild(inptProdNameLab);
			divAddProduct.appendChild(inptProdName);
			divAddProduct.appendChild(inptProdLink);
			//divAddProduct.appendChild(inptProdButAdd);
			divAddProduct.appendChild(inptBreak);
			//divAddProduct.appendChild(selProdNameLab);
			//divAddProduct.appendChild(selProdName);
			//divAddProduct.appendChild(inptBreak2);
			if (regRegProdGrab.value == 'Drug') {
				//divAddProduct.appendChild(inptDosageFormLab);
				//divAddProduct.appendChild(inptDosageForm);
				//divAddProduct.appendChild(inptBreak3);
				divAddProduct.appendChild(inptStrengthLab);
				divAddProduct.appendChild(inptStrength);
				divAddProduct.appendChild(inptBreak4);
			}
			divAddProduct.appendChild(inptNRNLab);
			divAddProduct.appendChild(inptNRN);
			divAddProduct.appendChild(inptBreak1);
			//divAddProduct.appendChild(inptProductClassLab);
			//divAddProduct.appendChild(inptProductClass);
			//divAddProduct.appendChild(inptBreak5);
			divAddProduct.appendChild(inptSubClassLab);
			divAddProduct.appendChild(inptSubClass);
			divAddProduct.appendChild(inptBreak6);
			divAddProduct.appendChild(inptGenericLab);
			divAddProduct.appendChild(inptGeneric);
			divAddProduct.appendChild(inptBreak7);
			//divAddProduct.appendChild(inptInspTypeLab);
			//divAddProduct.appendChild(inptInspType);
			divAddProduct.appendChild(addFindingsBut);
			divAddProduct.appendChild(inptBreak9);


			(function (divAddProduct, addFindingsBut, pRName, partialName) {
				addFindingsBut.addEventListener('click', function () {
					AddFindingsDER(divAddProduct, divAddPL, pRName, partialName);
					RearrangeFindings(this.parentNode, partialName);
				});
			})(divAddProduct, addFindingsBut, pRName, partialName);


			divAddPL.appendChild(divAddProduct);
			divAddPL.appendChild(inptBreak10);

			//populating inspection type
			for (var a = 0; a < inspTypeArr.length; a++) {
				inptInspType.options[a] = new Option(inspTypeArr[a]);
				inptInspType.options[a].value = inspTypeArr[a];
			}

			for (var a = 0; a < regProdSC.length; a++) {
				inptSubClass.options[a] = new Option(regProdSC[a]);
				inptSubClass.options[a].value = regProdSC[a];
			}

			for (var a = 0; a < DERDFArr.length; a++) {
				inptDosageForm.options[a] = new Option(DERDFArr[a]);
				inptDosageForm.options[a].value = DERDFArr[a];
			}

			for (var a = 0; a < regProdGen.length; a++) {
				inptGeneric.options[a] = new Option(regProdGen[a]);
				inptGeneric.options[a].value = regProdGen[a];
			}
			console.log('Val of newRegPNGrabBool2 just before adding Product segment: ' + newRegPNGrabBool2);
			console.log('Val of newRegPNGrabBool2Another : ' + newRegPNGrabBool2Another);
			NewSingleProduct2(newRegPNGrabBool2Another);
			console.log(gmp3);

			if (gmp3 == 'GMP Reassessment') {
				inptProdLink.style.display = 'none';
				console.log('findsNumber Just before: ' + divAddProduct.prPRName.findsNumber);
				//console.log('Is this productDiv: '+divAddPL.children[6])
				EnumerateFindings(regNoCDiv.value, divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, gmp3);

			} else if (gmp3 == 'Renewal') {
				NewSingleProduct2(false);
				console.log('Using productArrWholeAlt3: ');
				console.log(productArrWholeAlt3);

				inptProdName.setAttribute('type', 'text');
				inptProdName.setAttribute('readonly', 'true');
				inptProdName.setAttribute('value', productArrWholePassed.productName);

				//inptStrength = document.createElement('input');
				//inptStrength.setAttribute('type','number');
				inptStrength.readOnly = true;
				inptStrength.setAttribute('value', productArrWholePassed.productStrength);

				inptNRN.value = 'nil';
				if (productArrWholePassed.NRN == 'nil') {
					inptNRN.style.backgroundColor = 'red';
					inptNRN.readOnly = false;
				}

				var transSubClass2 = inptSubClass.name;
				divAddProduct.removeChild(divAddProduct.children[13]);
				var inptSubClass = document.createElement('input');
				inptSubClass.setAttribute('type', 'text');
				inptSubClass.setAttribute('name', transSubClass2);
				inptSubClass.setAttribute('value', productArrWholePassed.subClassName);
				divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
				inptSubClass.addEventListener('click', function () { console.log(this.name) });
				inptSubClass.readOnly = true;

				var transGeneric2 = inptGeneric.name;
				divAddProduct.removeChild(divAddProduct.children[16]);
				var inptGeneric = document.createElement('input');
				inptGeneric.setAttribute('type', 'text');
				inptGeneric.setAttribute('name', transGeneric2);
				inptGeneric.setAttribute('value', productArrWholePassed.genName);
				divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
				inptGeneric.addEventListener('click', function () { console.log(this.name) });
				inptGeneric.readOnly = true;

				//inptGeneric.readOnly = true;

				var inptProdKeyLab = document.createElement('Label');
				inptProdKeyLab.innerHTML = 'ProductKey: ';
				inptProdKeyLab.className = 'labDer';

				var inptProdKey = document.createElement('input');
				inptProdKey.setAttribute('type', 'text');
				inptProdKey.setAttribute('name', partialName + '[ProductKey]');
				inptProdKey.setAttribute('value', productArrWholePassed.prodKey);
				inptProdKey.setAttribute('readonly', true);
				inptProdKey.addEventListener('click', function () { console.log(this.name) });
				//inptProdKey.style.display = 'none';
				var inptProdKeyBrk = document.createElement('br');
				divAddProduct.insertBefore(inptProdKeyBrk, addFindingsBut);
				divAddProduct.insertBefore(inptProdKeyLab, addFindingsBut);
				divAddProduct.insertBefore(inptProdKey, addFindingsBut);

				//addFindingsBut.style.display = 'none';
				inptProdLink.style.display = 'none';


				console.log('Just called a change...!');
			}
		}

		function AddProductsDERA(divAddPL, thisName, inptProdLine2, inptProdLineDF2, gmp3, newRegPNGrabBool2, productArrWholePassed) {

			console.log('VAL OF Boolean: ' + newRegPNGrabBool2);
			console.log('This is the real name of pl Input: ' + inptProdLine2.name);

			console.log('This is the name of parent Product Line: ' + thisName.strPL);
			console.log('Selected Regulated product: ' + regRegProdAGrab.value);

			var regProdSC = (regRegProdAGrab.value == 'Drug') ? DERSCArr : FSANSCArr;
			var regProdGen = (regRegProdAGrab.value == 'Drug') ? DERGenArr : FSANGenArr;
			var prodCat = (regRegProdAGrab.value == 'Drug') ? 'Drug' : 'Food';

			var divAddProduct = document.createElement('div');
			divAddProduct.setAttribute('id', 'men');
			divAddProduct.setAttribute('name', 'menClass');
			//divAddProduct.setAttribute('class', pRName.strPR);
			divAddProduct.addEventListener('click', function () { console.log('Product Div has this many elements: ' + divAddProduct.children.length); console.log('Name of productclass:' + divAddProduct.className) });

			//partialName = thisName.strPL +'[Pr]'+ '[' + (thisName.prodNumber++)+']';
			partialName = divAddPL.className + '[Pr]' + '[' + (thisName.prodNumber++) + ']';
			console.log('This is partialName: ' + partialName);
			var pRName = new Object();
			pRName.pRNum = ++numInptsFinds;
			pRName.strPR = partialName;
			pRName.findsNumber = 0;
			var thisProdNumber = thisName.prodNumber;
			console.log('----------');
			divAddProduct.prPRName = pRName;
			console.log(divAddProduct.prPRNumber);
			//Declaring product fields
			var inptProdDel = document.createElement('input');
			inptProdDel.setAttribute('type', 'button');
			inptProdDel.setAttribute('value', 'Delete Product');
			inptProdDel.setAttribute('class', 'formButs');

			(function (divAddProduct, inptProdDel, inptBreak10, thisProdNumber) {
				//inptProdDel.addEventListener('click', function() {console.log(this.parentNode.id);if (divAddPL.contains(inptBreak10)) {console.log('Contains break');console.log('Number to be deleted: '+(--thisProdNumber)); divAddPL.removeChild(inptBreak10);};divAddPL.removeChild(divAddProduct);});
				inptProdDel.addEventListener('click', function () { console.log(this.parentNode.parentNode.nodeName); console.log(this.parentNode.parentNode.id); DeleteProduct(this, this.parentNode.parentNode, thisName, inptBreak10); });
			})(divAddProduct, inptProdDel, inptBreak10, thisProdNumber);

			//thisName.prodNumber = ++numInpts2;


			transitName = thisName; //used in storing value for future comparison

			var inptProdName = document.createElement('input');
			inptProdName.setAttribute('type', 'text');
			inptProdName.setAttribute('Placeholder', 'Name of Product');
			inptProdName.setAttribute('name', partialName + '[ProductName]');
			inptProdName.setAttribute('required', true);
			inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

			var inptProdNameLab = document.createElement('label');
			inptProdNameLab.innerHTML = 'Product Name: ';
			inptProdNameLab.className = 'labDer';

			var inptProdLink = document.createElement('a');
			inptProdLink.setAttribute('href', '#');
			inptProdLink.innerHTML = "New?";

			console.log('Before: ' + newRegPNGrabBool2);
			(function (newRegPNGrabBool2) {
				inptProdLink.addEventListener('click', function () { console.log('Changing...' + newRegPNGrabBool2); NewSingleProduct2A(!newRegPNGrabBool2); console.log('Changed...' + newRegPNGrabBool2); newRegPNGrabBool2 = !newRegPNGrabBool2 });
			})(newRegPNGrabBool2);
			console.log('After: ' + newRegPNGrabBool2);
			//NewSingleProduct2A(false);

			function NewSingleProduct2A(newRegPNGrabBool2) {
				console.log('...Product New Manipulation!');
				console.log(newRegPNGrabBool2);
				var transInptProdName = inptProdName.name;
				var transInptStrength = inptStrength.name;
				var transInptNRN = divAddProduct.children[10].name;
				var transSubClass = inptSubClass.name;
				var transGeneric = inptGeneric.name;
				console.log('Name of product field: ' + transInptProdName);
				console.log(divAddProduct.children[3].name);

				if (divAddProduct.children[3].nodeName != 'INPUT') {// ||inptProdlineChangeBool==true ||newRegPNGrabBool2==false

					console.log('nodeName is: ' + divAddProduct.children[3].nodeName);
					console.log('About to remove extra Product');
					console.log(divAddProduct);

					console.log('If you have more problems do it for the other segment of the if');


					divAddProduct.removeChild(divAddProduct.children[3]); //removing inptProdName
					inptProdName = document.createElement('input');
					inptProdName.setAttribute('type', 'text');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.setAttribute('placeholder', 'Input additional Product');
					inptProdName.setAttribute('required', true);
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);
					//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});
					inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

					/*
					inptProdName.addEventListener('change', function () {
																	console.log('Adding additional product...');
																	ProdAutoComp();
																	ResetStrength();
																	ResetNRN();
																	});
					*/
					divAddProduct.removeChild(divAddProduct.children[7]); //removing inptProdName
					inptStrength = document.createElement('input');
					inptStrength.setAttribute('type', 'number');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.setAttribute('placeholder', 'Number only');
					inptStrength.setAttribute('required', true);
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);
					inptStrength.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN.value = 'nil';
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);

					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('select');
					inptSubClass.setAttribute('name', transSubClass);
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('select');
					inptGeneric.setAttribute('name', transGeneric);
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });

					for (var a = 0; a < regProdSC.length; a++) {
						inptSubClass.options[a] = new Option(regProdSC[a]);
						inptSubClass.options[a].value = regProdSC[a];
					}

					for (var a = 0; a < regProdGen.length; a++) {
						inptGeneric.options[a] = new Option(regProdGen[a]);
						inptGeneric.options[a].value = regProdGen[a];
					}

					console.log('Inputting additional Prod Element');
					console.log('After: ' + newRegPNGrabBool2);
					inptProdLink.innerHTML = 'Old';
				} else {
					console.log('Boolean value for additional product: ' + newRegPNGrabBool2);

					divAddProduct.removeChild(divAddProduct.children[3]);
					inptProdName = document.createElement('select');
					inptProdName.setAttribute('name', transInptProdName);
					inptProdName.addEventListener('click', function () { console.log('This is the product seconid name' + this.name); console.log(typeof (this.name)); });
					divAddProduct.insertBefore(inptProdName, divAddProduct.children[3]);

					divAddProduct.removeChild(divAddProduct.children[7]);
					inptStrength = document.createElement('select');
					inptStrength.setAttribute('name', transInptStrength);
					inptStrength.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptStrength, divAddProduct.children[7]);

					divAddProduct.removeChild(divAddProduct.children[10]);
					inptNRN = document.createElement('input');
					inptNRN.setAttribute('value', 'nil');
					inptNRN.setAttribute('name', transInptNRN);
					inptNRN.setAttribute('readonly', 'true');
					divAddProduct.insertBefore(inptNRN, divAddProduct.children[10]);


					divAddProduct.removeChild(divAddProduct.children[13]);
					inptSubClass = document.createElement('input');
					inptSubClass.setAttribute('name', transSubClass);
					inptSubClass.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);

					divAddProduct.removeChild(divAddProduct.children[16]);
					inptGeneric = document.createElement('input');
					inptGeneric.setAttribute('name', transGeneric);
					inptGeneric.addEventListener('click', function () { console.log(this.name) });
					divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);


					if (gmp3 == 'Renewal') {
						EnumerateProduct2A(inptProdLine2, null, inptProdLineDF2);
					} else {
						EnumerateProduct2A(inptProdLine2, inptProdName, inptProdLineDF2); //consider extruding this so that it can be called by a 'change' in prodLine to affect product select population

						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}

					//inptProdLineDF2.addEventListener ('change', DFReset);
					function DFReset() {
						//RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF);

						console.log('Name of productLineDF field: ' + this.name);
						EnumerateProduct2(inptProdLine2, inptProdName, inptProdLineDF2);
						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);

					}


					inptProdName.addEventListener('change', function () {
						console.log('Added back...');
						console.log('Name of product field: ' + this.name);
						//ProdAutoComp();
						ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
						ResetNRN2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric);
					});

					//What is this for??
					/*
						regStGrab = document.createElement('select');
						regStGrab.setAttribute('name','regPLL[0][PL][Pr][0][ProductStrength]');
						regStGrab.addEventListener('click', function() {console.log('I have been clicked');ResetStrength2A();});
						regStGrab.addEventListener('click', ResetNRN2);
					*/


					//inptProdLineDF2.addEventListener('change', RecaliberateLineAndProduct(divAddPL,inptProdLine,inptProdLineDF));

					//Is this necessary??
					inptProdLineDF2.addEventListener('click', ResetStrength2A(inptProdLine2, inptProdName, inptProdLineDF2, inptStrength, inptNRN, inptSubClass, inptGeneric));


					console.log('Select Prod Element');
					console.log('PL' + newRegPLGrabBool);
					console.log('PN' + newRegPNGrabBool);
					inptProdLink.innerHTML = 'New';

				}
			}




			var selProdName = document.createElement('select');
			selProdName.setAttribute('name', 'regPNSel[]');
			var selProdNameLab = document.createElement('Label');
			selProdNameLab.innerHTML = 'Product Name: '
			selProdNameLab.className = 'labDer';

			//Drug segment
			var inptDosageForm = document.createElement('select');
			//inptDosageForm.setAttribute('name','regPLL[0][DosageForm]');
			inptDosageForm.setAttribute('name', partialName + '[DosageForm]');
			inptDosageForm.addEventListener('click', function () { console.log('This is the Dosage Form name' + this.name) });

			var inptDosageFormLab = document.createElement('Label');
			inptDosageFormLab.setAttribute('name', 'regPL[0][Dosage]');
			inptDosageFormLab.innerHTML = 'Dos. Form: ';
			inptDosageFormLab.className = 'labDer';


			var inptStrength = document.createElement('input');
			inptStrength.setAttribute('name', partialName + '[ProductStrength]');
			inptStrength.setAttribute('required', true);
			inptStrength.addEventListener('click', function () { console.log('This is the strength: ' + this.name) });
			var inptStrengthLab = document.createElement('Label');
			inptStrengthLab.innerHTML = 'Strength: ';
			inptStrengthLab.className = 'labDer';
			//end of drug segment

			var inptNRN = document.createElement('input');
			inptNRN.setAttribute('name', partialName + '[NRN]');
			inptNRN.addEventListener('click', function () { console.log('This is the name of NRN: ' + this.name) });
			var inptNRNLab = document.createElement('Label');
			inptNRNLab.innerHTML = 'NRN: ';
			inptNRNLab.className = 'labDer';

			var inptProductClass = document.createElement('input');
			inptProductClass.setAttribute('type', 'text');
			inptProductClass.setAttribute('readonly', 'true');
			inptProductClass.setAttribute('value', prodCat);
			inptProductClass.setAttribute('name', partialName + '[ProductClass]');
			inptProductClass.addEventListener('click', function () { console.log('This is the product class name: ' + this.name) });
			var inptProductClassLab = document.createElement('label');
			inptProductClassLab.innerHTML = 'Product Class: '
			inptProductClassLab.className = 'labDer';

			var inptSubClass = document.createElement('select');
			inptSubClass.setAttribute('name', partialName + '[SubClass]');
			inptSubClass.addEventListener('click', function () { console.log('This is the SubClass name: ' + this.name) });
			var inptSubClassLab = document.createElement('Label');
			inptSubClassLab.innerHTML = 'SubClass';
			inptSubClassLab.className = 'labDer';

			var inptGeneric = document.createElement('select');
			inptGeneric.setAttribute('name', partialName + '[Generic]');
			inptGeneric.addEventListener('click', function () { console.log('This is the Generic name' + this.name) });
			var inptGenericLab = document.createElement('label');
			inptGenericLab.innerHTML = 'Generic';
			inptGenericLab.className = 'labDer';

			var inptInspType = document.createElement('select');
			inptInspType.setAttribute('name', partialName + '[InspType]');
			var inptInspTypeLab = document.createElement('label');
			inptInspTypeLab.innerHTML = 'Insp. Type: ';
			inptInspTypeLab.className = 'labDer';

			var addFindingsBut = document.createElement('input');
			addFindingsBut.setAttribute('type', 'button');
			addFindingsBut.setAttribute('value', 'Add Findings');
			addFindingsBut.setAttribute('class', 'formButs');


			var inptBreak = document.createElement('br');
			var inptBreak1 = document.createElement('br');
			var inptBreak2 = document.createElement('br');
			var inptBreak3 = document.createElement('br');
			var inptBreak4 = document.createElement('br');
			var inptBreak5 = document.createElement('br');
			var inptBreak6 = document.createElement('br');
			var inptBreak7 = document.createElement('br');
			var inptBreak8 = document.createElement('br');
			var inptBreak9 = document.createElement('br');
			inptBreak10 = document.createElement('br');
			inptBreak10.setAttribute('class', 'menBreak');

			//var inptBreak11 = document.createElement('br');

			//Adding Product Fields to DIV
			divAddProduct.appendChild(inptProdDel);
			divAddProduct.appendChild(inptBreak8);
			divAddProduct.appendChild(inptProdNameLab);
			divAddProduct.appendChild(inptProdName);
			divAddProduct.appendChild(inptProdLink);
			//divAddProduct.appendChild(inptProdButAdd);
			divAddProduct.appendChild(inptBreak);
			//divAddProduct.appendChild(selProdNameLab);
			//divAddProduct.appendChild(selProdName);
			//divAddProduct.appendChild(inptBreak2);
			if (regRegProdAGrab.value == 'Drug') {
				//divAddProduct.appendChild(inptDosageFormLab);
				//divAddProduct.appendChild(inptDosageForm);
				//divAddProduct.appendChild(inptBreak3);
				divAddProduct.appendChild(inptStrengthLab);
				divAddProduct.appendChild(inptStrength);
				divAddProduct.appendChild(inptBreak4);
			}
			divAddProduct.appendChild(inptNRNLab);
			divAddProduct.appendChild(inptNRN);
			divAddProduct.appendChild(inptBreak1);
			//divAddProduct.appendChild(inptProductClassLab);
			//divAddProduct.appendChild(inptProductClass);
			//divAddProduct.appendChild(inptBreak5);
			divAddProduct.appendChild(inptSubClassLab);
			divAddProduct.appendChild(inptSubClass);
			divAddProduct.appendChild(inptBreak6);
			divAddProduct.appendChild(inptGenericLab);
			divAddProduct.appendChild(inptGeneric);
			divAddProduct.appendChild(inptBreak7);
			//divAddProduct.appendChild(inptInspTypeLab);
			//divAddProduct.appendChild(inptInspType);
			divAddProduct.appendChild(addFindingsBut);
			divAddProduct.appendChild(inptBreak9);


			(function (divAddProduct, addFindingsBut, pRName, partialName) {
				addFindingsBut.addEventListener('click', function () {
					AddFindingsDER(divAddProduct, divAddPL, pRName, partialName);
					RearrangeFindings(this.parentNode, partialName);
				});
			})(divAddProduct, addFindingsBut, pRName, partialName);


			divAddPL.appendChild(divAddProduct);
			divAddPL.appendChild(inptBreak10);

			//populating inspection type
			for (var a = 0; a < inspTypeArr.length; a++) {
				inptInspType.options[a] = new Option(inspTypeArr[a]);
				inptInspType.options[a].value = inspTypeArr[a];
			}

			for (var a = 0; a < regProdSC.length; a++) {
				inptSubClass.options[a] = new Option(regProdSC[a]);
				inptSubClass.options[a].value = regProdSC[a];
			}

			for (var a = 0; a < DERDFArr.length; a++) {
				inptDosageForm.options[a] = new Option(DERDFArr[a]);
				inptDosageForm.options[a].value = DERDFArr[a];
			}

			for (var a = 0; a < regProdGen.length; a++) {
				inptGeneric.options[a] = new Option(regProdGen[a]);
				inptGeneric.options[a].value = regProdGen[a];
			}
			console.log('Val of newRegPNGrabBool2 just before adding Product segment: ' + newRegPNGrabBool2);
			console.log('Val of newRegPNGrabBool2Another : ' + newRegPNGrabBool2Another);
			NewSingleProduct2A(newRegPNGrabBool2Another);
			console.log(gmp3);

			if (gmp3 == 'GMP Reassessment') {
				inptProdLink.style.display = 'none';
				console.log('findsNumber Just before: ' + divAddProduct.prPRName.findsNumber);
				//console.log('Is this productDiv: '+divAddPL.children[6])
				EnumerateFindings(regNoCADiv.value, divAddPL.children[2].options[divAddPL.children[2].selectedIndex].text, divAddPL, gmp3);

			} else if (gmp3 == 'Renewal') {
				NewSingleProduct2A(false);
				console.log('Using productArrWholeAlt3: ');
				console.log(productArrWholeAlt3);

				inptProdName.setAttribute('type', 'text');
				inptProdName.setAttribute('readonly', 'true');
				inptProdName.setAttribute('value', productArrWholePassed.productName);

				//inptStrength = document.createElement('input');
				//inptStrength.setAttribute('type','number');
				inptStrength.readOnly = true;
				inptStrength.setAttribute('value', productArrWholePassed.productStrength);

				inptNRN.value = 'nil';
				if (productArrWholePassed.NRN == 'nil') {
					inptNRN.style.backgroundColor = 'red';
					inptNRN.readOnly = false;
				}

				var transSubClass2 = inptSubClass.name;
				divAddProduct.removeChild(divAddProduct.children[13]);
				var inptSubClass = document.createElement('input');
				inptSubClass.setAttribute('type', 'text');
				inptSubClass.setAttribute('name', transSubClass2);
				inptSubClass.setAttribute('value', productArrWholePassed.subClassName);
				divAddProduct.insertBefore(inptSubClass, divAddProduct.children[13]);
				inptSubClass.addEventListener('click', function () { console.log(this.name) });
				inptSubClass.readOnly = true;

				var transGeneric2 = inptGeneric.name;
				divAddProduct.removeChild(divAddProduct.children[16]);
				var inptGeneric = document.createElement('input');
				inptGeneric.setAttribute('type', 'text');
				inptGeneric.setAttribute('name', transGeneric2);
				inptGeneric.setAttribute('value', productArrWholePassed.genName);
				divAddProduct.insertBefore(inptGeneric, divAddProduct.children[16]);
				inptGeneric.addEventListener('click', function () { console.log(this.name) });
				inptGeneric.readOnly = true;

				//inptGeneric.readOnly = true;

				var inptProdKeyLab = document.createElement('Label');
				inptProdKeyLab.innerHTML = 'ProductKey: ';
				inptProdKeyLab.className = 'labDer';

				var inptProdKey = document.createElement('input');
				inptProdKey.setAttribute('type', 'text');
				inptProdKey.setAttribute('name', partialName + '[ProductKey]');
				inptProdKey.setAttribute('value', productArrWholePassed.prodKey);
				inptProdKey.setAttribute('readonly', true);
				inptProdKey.addEventListener('click', function () { console.log(this.name) });
				//inptProdKey.style.display = 'none';
				var inptProdKeyBrk = document.createElement('br');
				divAddProduct.insertBefore(inptProdKeyBrk, addFindingsBut);
				divAddProduct.insertBefore(inptProdKeyLab, addFindingsBut);
				divAddProduct.insertBefore(inptProdKey, addFindingsBut);

				//addFindingsBut.style.display = 'none';
				inptProdLink.style.display = 'none';


				console.log('Just called a change...!');
			}
		}

		function AddProductsDERNewNoCName(divAddPL, thisName, inptProdLine2, inptProdLineDF2, gmp3, newRegPNGrabBool2, productArrWhole2) {


			var regProdSC = (regRegProdGrab.value == 'Drug') ? DERSCArr : FSANSCArr;
			var regProdGen = (regRegProdGrab.value == 'Drug') ? DERGenArr : FSANGenArr;
			var prodCat = (regRegProdGrab.value == 'Drug') ? 'Drug' : 'Food';

			var divAddProduct = document.createElement('div');
			divAddProduct.setAttribute('id', 'men');
			divAddProduct.setAttribute('name', 'menClass');
			//divAddProduct.setAttribute('class', pRName.strPR);
			divAddProduct.addEventListener('click', function () { console.log('Product Div has this many elements: ' + divAddProduct.children.length); console.log('Name of productclass:' + divAddProduct.className) });

			//partialName = thisName.strPL +'[Pr]'+ '[' + (thisName.prodNumber++)+']';
			partialName = divAddPL.className + '[Pr]' + '[' + (thisName.prodNumber++) + ']';
			console.log('This is partialName: ' + partialName);
			var pRName = new Object();
			pRName.pRNum = ++numInptsFinds;
			pRName.strPR = partialName;
			pRName.findsNumber = 0;
			var thisProdNumber = thisName.prodNumber;
			console.log('----------');
			divAddProduct.prPRName = pRName;
			console.log(divAddProduct.prPRNumber);
			//Declaring product fields
			var inptProdDel = document.createElement('input');
			inptProdDel.setAttribute('type', 'button');
			inptProdDel.setAttribute('value', 'Delete Product');
			(function (divAddProduct, inptProdDel, inptBreak10, thisProdNumber) {
				//inptProdDel.addEventListener('click', function() {console.log(this.parentNode.id);if (divAddPL.contains(inptBreak10)) {console.log('Contains break');console.log('Number to be deleted: '+(--thisProdNumber)); divAddPL.removeChild(inptBreak10);};divAddPL.removeChild(divAddProduct);});
				inptProdDel.addEventListener('click', function () { console.log(this.parentNode.parentNode.nodeName); console.log(this.parentNode.parentNode.id); DeleteProduct(this, this.parentNode.parentNode, thisName, inptBreak10); });
			})(divAddProduct, inptProdDel, inptBreak10, thisProdNumber);

			//thisName.prodNumber = ++numInpts2;


			transitName = thisName; //used in storing value for future comparison

			var inptProdName = document.createElement('input');
			inptProdName.setAttribute('type', 'text');
			inptProdName.setAttribute('Placeholder', 'Name of Product');
			inptProdName.setAttribute('name', partialName + '[ProductName]');

			inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

			var inptProdNameLab = document.createElement('label');
			inptProdNameLab.innerHTML = 'Product Name: ';
			inptProdNameLab.className = 'labDer';

			//Drug segment
			var inptDosageForm = document.createElement('select');
			//inptDosageForm.setAttribute('name','regPLL[0][DosageForm]');
			inptDosageForm.setAttribute('name', partialName + '[DosageForm]');
			inptDosageForm.addEventListener('click', function () { console.log('This is the Dosage Form name' + this.name) });

			var inptDosageFormLab = document.createElement('Label');
			inptDosageFormLab.setAttribute('name', 'regPL[0][Dosage]');
			inptDosageFormLab.innerHTML = 'Dos. Form: ';
			inptDosageFormLab.className = 'labDer';


			var inptStrength = document.createElement('input');
			inptStrength.setAttribute('type', 'number');
			inptStrength.setAttribute('placeholder', 'Number only');
			inptStrength.setAttribute('name', partialName + '[ProductStrength]');
			inptStrength.addEventListener('click', function () { console.log('This is the strength: ' + this.name) });
			var inptStrengthLab = document.createElement('Label');
			inptStrengthLab.innerHTML = 'Strength: ';
			inptStrengthLab.className = 'labDer';
			//end of drug segment

			var inptNRN = document.createElement('input');
			inptNRN.setAttribute('value', 'nil');
			inptNRN.setAttribute('readonly', 'true');
			inptNRN.setAttribute('name', partialName + '[NRN]');
			inptNRN.addEventListener('click', function () { console.log('This is the name of NRN: ' + this.name) });
			var inptNRNLab = document.createElement('Label');
			inptNRNLab.innerHTML = 'NRN: ';
			inptNRNLab.className = 'labDer';

			var inptSubClass = document.createElement('select');
			inptSubClass.setAttribute('name', partialName + '[SubClass]');
			inptSubClass.addEventListener('click', function () { console.log('This is the SubClass name: ' + this.name) });
			var inptSubClassLab = document.createElement('Label');
			inptSubClassLab.innerHTML = 'SubClass';
			inptSubClassLab.className = 'labDer';

			var inptGeneric = document.createElement('select');
			inptGeneric.setAttribute('name', partialName + '[Generic]');
			inptGeneric.addEventListener('click', function () { console.log('This is the Generic name' + this.name) });
			var inptGenericLab = document.createElement('label');
			inptGenericLab.innerHTML = 'Generic';
			inptGenericLab.className = 'labDer';


			var addFindingsBut = document.createElement('input');
			addFindingsBut.setAttribute('type', 'button');
			addFindingsBut.setAttribute('value', 'Add Findings');


			var inptBreak = document.createElement('br');
			var inptBreak1 = document.createElement('br');
			var inptBreak2 = document.createElement('br');
			var inptBreak3 = document.createElement('br');
			var inptBreak4 = document.createElement('br');
			var inptBreak5 = document.createElement('br');
			var inptBreak6 = document.createElement('br');
			var inptBreak7 = document.createElement('br');
			var inptBreak8 = document.createElement('br');
			var inptBreak9 = document.createElement('br');
			inptBreak10 = document.createElement('br');
			inptBreak10.setAttribute('class', 'menBreak');

			//var inptBreak11 = document.createElement('br');

			//Adding Product Fields to DIV
			divAddProduct.appendChild(inptProdDel);
			divAddProduct.appendChild(inptBreak8);
			divAddProduct.appendChild(inptProdNameLab);
			divAddProduct.appendChild(inptProdName);
			divAddProduct.appendChild(inptBreak);
			//divAddProduct.appendChild(selProdNameLab);
			//divAddProduct.appendChild(selProdName);
			//divAddProduct.appendChild(inptBreak2);
			if (regRegProdGrab.value == 'Drug') {
				//divAddProduct.appendChild(inptDosageFormLab);
				//divAddProduct.appendChild(inptDosageForm);
				//divAddProduct.appendChild(inptBreak3);
				divAddProduct.appendChild(inptStrengthLab);
				divAddProduct.appendChild(inptStrength);
				divAddProduct.appendChild(inptBreak4);
			}
			divAddProduct.appendChild(inptNRNLab);
			divAddProduct.appendChild(inptNRN);
			divAddProduct.appendChild(inptBreak1);
			//divAddProduct.appendChild(inptProductClassLab);
			//divAddProduct.appendChild(inptProductClass);
			//divAddProduct.appendChild(inptBreak5);
			divAddProduct.appendChild(inptSubClassLab);
			divAddProduct.appendChild(inptSubClass);
			divAddProduct.appendChild(inptBreak6);
			divAddProduct.appendChild(inptGenericLab);
			divAddProduct.appendChild(inptGeneric);
			divAddProduct.appendChild(inptBreak7);
			//divAddProduct.appendChild(inptInspTypeLab);
			//divAddProduct.appendChild(inptInspType);
			divAddProduct.appendChild(addFindingsBut);
			divAddProduct.appendChild(inptBreak9);


			(function (divAddProduct, addFindingsBut, pRName, partialName) {
				addFindingsBut.addEventListener('click', function () {
					AddFindingsDER(divAddProduct, divAddPL, pRName, partialName);
					RearrangeFindings(this.parentNode, partialName);
				});
			})(divAddProduct, addFindingsBut, pRName, partialName);


			divAddPL.appendChild(divAddProduct);
			divAddPL.appendChild(inptBreak10);

			//populating inspection type


			for (var a = 0; a < regProdSC.length; a++) {
				inptSubClass.options[a] = new Option(regProdSC[a]);
				inptSubClass.options[a].value = regProdSC[a];
			}

			for (var a = 0; a < DERDFArr.length; a++) {
				inptDosageForm.options[a] = new Option(DERDFArr[a]);
				inptDosageForm.options[a].value = DERDFArr[a];
			}

			for (var a = 0; a < regProdGen.length; a++) {
				inptGeneric.options[a] = new Option(regProdGen[a]);
				inptGeneric.options[a].value = regProdGen[a];
			}

		}


		function AddProductsDERNewNoCNameA(divAddPL, thisName, inptProdLine2, inptProdLineDF2, gmp3, newRegPNGrabBool2, productArrWhole2) {


			var regProdSCA = (regRegProdAGrab.value == 'Drug') ? DERSCArr : FSANSCArr;
			var regProdGenA = (regRegProdAGrab.value == 'Drug') ? DERGenArr : FSANGenArr;
			var prodCat = (regRegProdAGrab.value == 'Drug') ? 'Drug' : 'Food';

			var divAddProduct = document.createElement('div');
			divAddProduct.setAttribute('id', 'men');
			divAddProduct.setAttribute('name', 'menClass');
			//divAddProduct.setAttribute('class', pRName.strPR);
			divAddProduct.addEventListener('click', function () { console.log('Product Div has this many elements: ' + divAddProduct.children.length); console.log('Name of productclass:' + divAddProduct.className) });

			//partialName = thisName.strPL +'[Pr]'+ '[' + (thisName.prodNumber++)+']';
			partialName = divAddPL.className + '[Pr]' + '[' + (thisName.prodNumber++) + ']';
			console.log('This is partialName: ' + partialName);
			var pRName = new Object();
			pRName.pRNum = ++numInptsFinds;
			pRName.strPR = partialName;
			pRName.findsNumber = 0;
			var thisProdNumber = thisName.prodNumber;
			console.log('----------');
			divAddProduct.prPRName = pRName;
			console.log(divAddProduct.prPRNumber);
			//Declaring product fields
			var inptProdDel = document.createElement('input');
			inptProdDel.setAttribute('type', 'button');
			inptProdDel.setAttribute('value', 'Delete Product');
			(function (divAddProduct, inptProdDel, inptBreak10, thisProdNumber) {
				//inptProdDel.addEventListener('click', function() {console.log(this.parentNode.id);if (divAddPL.contains(inptBreak10)) {console.log('Contains break');console.log('Number to be deleted: '+(--thisProdNumber)); divAddPL.removeChild(inptBreak10);};divAddPL.removeChild(divAddProduct);});
				inptProdDel.addEventListener('click', function () { console.log(this.parentNode.parentNode.nodeName); console.log(this.parentNode.parentNode.id); DeleteProduct(this, this.parentNode.parentNode, thisName, inptBreak10); });
			})(divAddProduct, inptProdDel, inptBreak10, thisProdNumber);

			//thisName.prodNumber = ++numInpts2;


			transitName = thisName; //used in storing value for future comparison

			var inptProdName = document.createElement('input');
			inptProdName.setAttribute('type', 'text');
			inptProdName.setAttribute('Placeholder', 'Name of Product');
			inptProdName.setAttribute('name', partialName + '[ProductName]');

			inptProdName.addEventListener('click', function () { console.log('This is the product name' + this.name); console.log(typeof (this.name)); });

			var inptProdNameLab = document.createElement('label');
			inptProdNameLab.innerHTML = 'Product Name: ';
			inptProdNameLab.className = 'labDer';

			//Drug segment
			var inptDosageForm = document.createElement('select');
			//inptDosageForm.setAttribute('name','regPLL[0][DosageForm]');
			inptDosageForm.setAttribute('name', partialName + '[DosageForm]');
			inptDosageForm.addEventListener('click', function () { console.log('This is the Dosage Form name' + this.name) });

			var inptDosageFormLab = document.createElement('Label');
			inptDosageFormLab.setAttribute('name', 'regPL[0][Dosage]');
			inptDosageFormLab.innerHTML = 'Dos. Form: ';
			inptDosageFormLab.className = 'labDer';


			var inptStrength = document.createElement('input');
			inptStrength.setAttribute('type', 'number');
			inptStrength.setAttribute('placeholder', 'Number only');
			inptStrength.setAttribute('name', partialName + '[ProductStrength]');
			inptStrength.addEventListener('click', function () { console.log('This is the strength: ' + this.name) });
			var inptStrengthLab = document.createElement('Label');
			inptStrengthLab.innerHTML = 'Strength: ';
			inptStrengthLab.className = 'labDer';
			//end of drug segment

			var inptNRN = document.createElement('input');
			inptNRN.setAttribute('value', 'nil');
			inptNRN.setAttribute('readonly', 'true');
			inptNRN.setAttribute('name', partialName + '[NRN]');
			inptNRN.addEventListener('click', function () { console.log('This is the name of NRN: ' + this.name) });
			var inptNRNLab = document.createElement('Label');
			inptNRNLab.innerHTML = 'NRN: ';
			inptNRNLab.className = 'labDer';

			var inptSubClass = document.createElement('select');
			inptSubClass.setAttribute('name', partialName + '[SubClass]');
			inptSubClass.addEventListener('click', function () { console.log('This is the SubClass name: ' + this.name) });
			var inptSubClassLab = document.createElement('Label');
			inptSubClassLab.innerHTML = 'SubClass';
			inptSubClassLab.className = 'labDer';

			var inptGeneric = document.createElement('select');
			inptGeneric.setAttribute('name', partialName + '[Generic]');
			inptGeneric.addEventListener('click', function () { console.log('This is the Generic name' + this.name) });
			var inptGenericLab = document.createElement('label');
			inptGenericLab.innerHTML = 'Generic';
			inptGenericLab.className = 'labDer';


			var addFindingsBut = document.createElement('input');
			addFindingsBut.setAttribute('type', 'button');
			addFindingsBut.setAttribute('value', 'Add Findings');


			var inptBreak = document.createElement('br');
			var inptBreak1 = document.createElement('br');
			var inptBreak2 = document.createElement('br');
			var inptBreak3 = document.createElement('br');
			var inptBreak4 = document.createElement('br');
			var inptBreak5 = document.createElement('br');
			var inptBreak6 = document.createElement('br');
			var inptBreak7 = document.createElement('br');
			var inptBreak8 = document.createElement('br');
			var inptBreak9 = document.createElement('br');
			inptBreak10 = document.createElement('br');
			inptBreak10.setAttribute('class', 'menBreak');

			//var inptBreak11 = document.createElement('br');

			//Adding Product Fields to DIV
			divAddProduct.appendChild(inptProdDel);
			divAddProduct.appendChild(inptBreak8);
			divAddProduct.appendChild(inptProdNameLab);
			divAddProduct.appendChild(inptProdName);
			divAddProduct.appendChild(inptBreak);
			//divAddProduct.appendChild(selProdNameLab);
			//divAddProduct.appendChild(selProdName);
			//divAddProduct.appendChild(inptBreak2);
			if (regRegProdAGrab.value == 'Drug') {
				//divAddProduct.appendChild(inptDosageFormLab);
				//divAddProduct.appendChild(inptDosageForm);
				//divAddProduct.appendChild(inptBreak3);
				divAddProduct.appendChild(inptStrengthLab);
				divAddProduct.appendChild(inptStrength);
				divAddProduct.appendChild(inptBreak4);
			}
			divAddProduct.appendChild(inptNRNLab);
			divAddProduct.appendChild(inptNRN);
			divAddProduct.appendChild(inptBreak1);
			//divAddProduct.appendChild(inptProductClassLab);
			//divAddProduct.appendChild(inptProductClass);
			//divAddProduct.appendChild(inptBreak5);
			divAddProduct.appendChild(inptSubClassLab);
			divAddProduct.appendChild(inptSubClass);
			divAddProduct.appendChild(inptBreak6);
			divAddProduct.appendChild(inptGenericLab);
			divAddProduct.appendChild(inptGeneric);
			divAddProduct.appendChild(inptBreak7);
			//divAddProduct.appendChild(inptInspTypeLab);
			//divAddProduct.appendChild(inptInspType);
			divAddProduct.appendChild(addFindingsBut);
			divAddProduct.appendChild(inptBreak9);


			(function (divAddProduct, addFindingsBut, pRName, partialName) {
				addFindingsBut.addEventListener('click', function () {
					AddFindingsDER(divAddProduct, divAddPL, pRName, partialName);
					RearrangeFindings(this.parentNode, partialName);
				});
			})(divAddProduct, addFindingsBut, pRName, partialName);


			divAddPL.appendChild(divAddProduct);
			divAddPL.appendChild(inptBreak10);

			//populating inspection type


			for (var a = 0; a < regProdSCA.length; a++) {
				inptSubClass.options[a] = new Option(regProdSCA[a]);
				inptSubClass.options[a].value = regProdSCA[a];
			}

			for (var a = 0; a < DERDFArr.length; a++) {
				inptDosageForm.options[a] = new Option(DERDFArr[a]);
				inptDosageForm.options[a].value = DERDFArr[a];
			}

			for (var a = 0; a < regProdGenA.length; a++) {
				inptGeneric.options[a] = new Option(regProdGenA[a]);
				inptGeneric.options[a].value = regProdGenA[a];
			}

		}




		function EnumerateFindings(NoCVal, PLVal, divAddPL, gmp3) {
			console.log('Findings Counter: ' + (++enumerateFindingsCounter));
			console.log(divAddPL.children[6]);
			getProduct = divAddPL.getElementsByTagName('div');
			console.log(getProduct[0].prPRName);
			getProduct[0].prPRName.findsNumber = 0;
			productLineFindsArr = [];
			var retFindsFirstRadioArr = [];
			var retFindsSecondRadioArr = [];
			var retFinds;
			var retFindsInptGrab;

			console.log(getProduct[0]);
			console.log(PLVal);
			console.log('This is name of company: ' + NoCVal);

			var findsGMPArr = [];
			var findsGMPArr2 = [];

			/*
			for (var g=0;g<xmlAuto.companyName.length;g++){
				findsGMPArr[g] = [];
				findsGMPArr2[g] = [];
			}
			*/

			console.log('This is the multidimensional arr: ');
			console.log(findsGMPArr);

			for (var a = 0; a < xmlAuto.companyName.length; a++) { //companyName tallies with other details
				if (xmlAuto.companyName[a].name == NoCVal) {
					if (xmlAuto.companyName[a].add == regCompAddressAGrab.value) {
						if (xmlAuto.productLineName[a] == PLVal) { //we stop at Product Line here, as results are for the entire produt line, and CompanyName and ProductLine are sufficient to differentiate product
							if (xmlAuto.FindObservation[a] != 'resolve' && xmlAuto.FindCat[a] != 'Satisfactory') {
								findsGMPArr[a] = [];
								findsGMPArr[a].push(xmlAuto.companyName[a]);
								findsGMPArr[a].push(xmlAuto.FindingDets[a]);
								findsGMPArr[a].push(xmlAuto.FindingImg[a]); //something is wrong with this from server code. Fix.
								findsGMPArr[a].push(xmlAuto.FindCat[a]);
								findsGMPArr[a].push(xmlAuto.FindObservation[a]);
								findsGMPArr[a].push(xmlAuto.FindingID[a]);
								//You can later add more! As from here, else you'll have to change index in array to reference FindingID
							}
						}
					}//address
				} else {
					console.log('Not product line');
				}

			}



			console.log('Before-----');
			console.log(findsGMPArr);

			findsGMPArr.sort(
				function (a, b) {
					a = a[5];
					b = b[5];
					return a - b;
				}
			);
			console.log('After-----');
			console.log(findsGMPArr);

			for (var b = 0; b < findsGMPArr.length - 1; b++) { // so that it won't look for getElementsByTagName('FindKey')[0].firstChild.data of undefined
				if (findsGMPArr[b + 1] != undefined) {
					if (findsGMPArr[b][5] == findsGMPArr[b + 1][5]) { //comparing FindingID
						delete findsGMPArr[b];
					}
				}
			}

			for (var d = 0; d < findsGMPArr.length; d++) {
				if (findsGMPArr[d] != undefined) {
					findsGMPArr2.push(findsGMPArr[d]);
				}
			}


			console.log('After2-----');
			console.log(findsGMPArr2);



			for (var a = 0; a < findsGMPArr2.length; a++) { //We need to take care of the findings (ID, CAT, Obs...) that are null;
				if (findsGMPArr2[a][1] != null) {
					retFindsFirstRadioArr = [];
					retFindsSecondRadioArr = [];
					console.log('******************');
					console.log(getProduct[0]);
					console.log('******************');
					retFinds = AddFindingsDER(getProduct[0], divAddPL, getProduct[0].prPRName, getProduct[0].prPRName.strPR, gmp3); //(divProduct, divAddPL, pRName, partialName, gmp3)
					console.log(retFinds);
					retFindsInptGrab = retFinds.getElementsByTagName('input');
					console.log('!!!!!!!!!!!!!!');
					console.log(retFinds.children);
					console.log(retFinds.children.length);

					for (var b = 0; b < retFindsInptGrab.length; b++) {
						if (retFindsInptGrab[b].className == 'firstRadios') {
							retFindsFirstRadioArr.push(retFindsInptGrab[b]);
						} else if (retFindsInptGrab[b].className == 'secondRadios') {
							retFindsSecondRadioArr.push(retFindsInptGrab[b]);
						}
					}

					for (var c = 0; c < retFindsFirstRadioArr.length; c++) {
						console.log(retFindsFirstRadioArr[c]);
						console.log(findsGMPArr2[a][3]);
						if (retFindsFirstRadioArr[c].value == findsGMPArr2[a][3]) {
							retFindsFirstRadioArr[c].checked = true;
							//retFindsFirstRadioArr[c].setAttribute('disabled', false);
							console.log('VALUE FIRST: ' + findsGMPArr2[a][3]);
						} else {
							retFindsFirstRadioArr[c].setAttribute('disabled', true);

						}
					}
					console.log(retFindsFirstRadioArr);
					console.log(retFindsSecondRadioArr);

					for (var c = 0; c < retFindsSecondRadioArr.length; c++) {
						console.log(retFindsSecondRadioArr[c]);
						if (retFindsSecondRadioArr[c].value == findsGMPArr2[a][4]) {
							retFindsSecondRadioArr[c].checked = true;
							//retFindsSecondRadioArr[c].setAttribute('disabled', false);
							//retFindsSecondRadioArr[c].setAttribute('readonly',true);
							console.log('VALUE SECOND: ' + findsGMPArr2[a][4]);
						} else {
							retFindsSecondRadioArr[c].setAttribute('disabled', true);
						}

					}

					retFindsInptGrab[0].style.display = "none";
					//console.log('This is key of finds: '+findsGMPArr2[a].children[14].firstChild.data);
					//console.log(retFindsInptGrab[14]);
					console.log(retFindsInptGrab[15]);
					console.log(retFindsInptGrab[1]);
					console.log(retFindsInptGrab);
					retFindsInptGrab[1].value = findsGMPArr2[a][1];
					retFindsInptGrab[1].setAttribute('readonly', true);
					retFindsInptGrab[15].value = findsGMPArr2[a][5];
					//retFindsInptGrab[2].value = "";
					//retFindsInptGrab[2].style.display = "none";
					console.log('******************');
					console.log(retFindsInptGrab[14].value);
					//retFindsInptGrab[14].value = findsGMPArr[a].children[13].firstChild.data;  //skipping delete, starting from findDetails
					//retFindsInptGrab[1].setAtrribute('readonly', true);
					//retFindsInptGrab[2].setAtrribute('readonly', 'true');
				}//not null
			}

			//RearrangeFindings(divAddPL.children[6], divAddPL.children[6].className); //i.e., RearrangeFindings(divAddProduct, divAddProduct.className);
		}


		function RearrangePL(div, partialName2) {

			var pLVar = 0;
			partialName2.pLNum = 0;


			//console.log('REARRANGING...!');
			console.log(div);

			for (var e = 0; e < div.children.length; e++) {
				//console.log('FINDING TRs');
				//console.log(div.children[e]);
				for (var d = 0; d < div.children[e].children.length; d++) {
					//console.log(div.children[e].children[d]);
					//console.log('Coming close');
					for (var f = 0; f < div.children[e].children[d].children.length; f++) {
						//console.log(div.children[e].children[d].children[f]);
						if (div.children[e].children[d].children[f].id == "divPL") {
							var prodVar = 0;
							//console.log('Found PL Divs');
							var divPLFound = div.children[e].children[d].children[f];
							divPLFound.className = 'regPLL[' + (partialName2.pLNum++) + '][PL]';
							//divPLFound.className = partialName2.strPL;
							for (var h = 0; h < divPLFound.children.length; h++) {
								if ((divPLFound.children[h].nodeName == 'INPUT') || (divPLFound.children[h].nodeName == 'SELECT')) { //should only accept Inputs and Selects
									//console.log('This is now element name: '+partialName2.strPL);
									//console.log('This is element type: '+ divPLFound.children[h].nodeName);
									divPLFound.children[h].setAttribute('name', divPLFound.className + (divPLFound.children[h].name).substr(13));

									divPLFound.addEventListener('click', function () { console.log(this.name); });
									//check if it has products
									//console.log(divPLFound);
									if (div.children[e].children[d].children[f].contains(divAddProduct)) {
										console.log('Contains PRODUCT');
									} else {
										//console.log('Does not contain PRODUCT');
										//console.log(div.children[e].children[d].children[f]);
									}
								}


								if ((divPLFound.children[h].id == 'men')) {
									divPLFound.children[h].className = divPLFound.className + '[Pr][' + (prodVar++) + ']';
									console.log('ENTERED DIV');
									DrillingPLProd(divPLFound.children[h], divPLFound, partialName2.strPL); //Look into sending partialName2.strPL as parameter for use as prefix
									//console.log()
								}



							}

						}
					}
				}
			}

		}


		function DrillingPLProd(prodNode, pLNodefunc, preFix) {

			console.log('To be used for prefix: ' + pLNodefunc.children[1].name.substr(0, 13));
			//var pLNodeNamePrefix = pLNodefunc.children[1].name.substr(0,13); //first element in the productLine Div; just to get the name

			//pLNodeNamePrefix = preFix;
			pLNodeNamePrefix = prodNode.className;
			//partialName = pLNodeNamePrefix;
			console.log('Prefix: ' + pLNodeNamePrefix);
			//console.log('Suffix: '+pLNodeNameSuffix);
			console.log('ID of ProdNode: ' + prodNode.id);
			//console.log(prodNode);
			for (var a = 0; a < prodNode.children.length; a++) {
				if ((prodNode.children[a].nodeName == 'INPUT') || (prodNode.children[a].nodeName == 'SELECT')) {
					//console.log('Full name: '+prodNode.children[a].name);
					console.log('Trucated name of prodDiv: ' + (prodNode.children[a].name).substr(20));
					prodNode.children[a].name = pLNodeNamePrefix + (prodNode.children[a].name).substr(20);

				}

				if (prodNode.children[a].className == 'DivFinds') {
					//pLName.strPL = pLNodeNamePrefix;
					console.log('How many findings');
					var findElements = prodNode.children[a].children[0].children[0].children[0];
					console.log(findElements);
					console.log(findElements.children.length);

					for (var b = 0; b < findElements.children.length; b++) {
						console.log('Number of tds');
						findElements.children[b].children[0].name = pLNodeNamePrefix + (findElements.children[b].children[0].name).substr(20);
						console.log((findElements.children[b].children[0].name));
					}

				}
			}

		}



		function DeleteProduct(this2, div, thisName2, brk) {

			if (this2) {
				var delVar = div.removeChild(this2.parentNode);

				if (div.contains(brk)) { //brk exists
					div.removeChild(brk);
				}
			}

			console.log('This is type of thisName2: ' + typeof (thisName2));
			thisName2.prodNumber = 0;

			//var prodRearrangeCounter = 0;
			console.log('Entered DeleteProduct');
			for (var a = 0; a < div.children.length; a++) {
				//console.log('Entered DeleteProduct a');
				if (div.children[a].nodeName == 'DIV') {
					partialName = thisName2.strPL + '[Pr]' + '[' + (thisName2.prodNumber++) + ']';
					div.children[a].className = partialName;  //Naming the divs
					//console.log(div.children[a]);
					console.log('Entered DeleteProduct DIV');
					var productDiv = div.children[a];
					//console.log(div.children.length);
					//console.log(productDiv.children.length);
					for (var b = 0; b < productDiv.children.length; b++) {

						findsVar = 0; //findings variable

						console.log('RIGHT HERE');
						console.log(productDiv.children.length);
						console.log(productDiv);
						//console.log('Entered DeleteProduct b');
						//console.log('Entered productInpt and Div');
						if ((productDiv.children[b].nodeName == 'INPUT') || (productDiv.children[b].nodeName == 'SELECT')) {
							//console.log(productDiv.children[b].value);

							console.log(productDiv.children[b].name);
							console.log((productDiv.children[b].name).substr(20));
							var productInfo = (productDiv.children[b].name).substr(20); //this will only work if PL number under 10.  For two digit PLs, increase substr to 21
							(productDiv.children[b]).setAttribute('name', partialName + ((productDiv.children[b].name).substr(20)));
							(productDiv.children[b]).addEventListener('click', function () { console.log('HERE is name: ' + this.name); });

						}

						var DivFindsGrab = productDiv.getElementsByTagName('Div');
						console.log(DivFindsGrab.length);
						for (var e = 0; e < DivFindsGrab.length; e++) {

							if (DivFindsGrab[e].className == "DivFinds") {
								console.log('Found');
								console.log(partialName);
								var DivFindsGrabRow = DivFindsGrab[e].children[0].children[0].children[0];
								for (var g = 0; g < DivFindsGrabRow.children.length; g++) {
									//DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName+ ((DivFindsGrabRow.children[g].children[0].name).substr(20)));
									//DivFindsGrabRow.children[g].children[0].setAttribute('name', productDiv.className+ ((DivFindsGrabRow.children[g].children[0].name).substr(20)));
									DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName + '[Finds][' + (findsVar) + ']' + ((DivFindsGrabRow.children[g].children[0].name).substr(30)));
									console.log('New Name: ' + DivFindsGrabRow.children[g].children[0].name);
								}


								findsVar++;
							}
						}

					}
				}
			}

		}


		function ReArrangeProduct(divAddPL, pLName) {
			pLName.prodNumber = 0;
			for (var a = 0; a < divAddPL.children.length; a++) {
				if (divAddPL.children[a].id == 'men') {
					var suffixNos = (pLName.prodNumber++);
					//var prefix = divAddPL.className + '[Pr][';
					divAddPL.children[a].className = divAddPL.className + '[Pr][' + (suffixNos) + ']'; //assigning product Div a className

					console.log('How many Div;');
					var productDiv = divAddPL.children[a];
					for (var b = 0; b < productDiv.children.length; b++) {
						if ((productDiv.children[b].nodeName == 'INPUT') || (productDiv.children[b].nodeName == 'SELECT')) {
							productDiv.children[b].name = divAddPL.className + '[Pr][' + suffixNos + (productDiv.children[b].name).substr(19);
						}

						var productName = divAddPL.className + '[Pr][' + suffixNos + ']';

						if ((productDiv.children[b].className == 'DivFinds')) {
							console.log('Many DivFinds');
							RearrangeFindings(productDiv, productName);

						}
					}
				}
			}
		}

		function RearrangeFindings(div, partialName2) {

			var findsVar = 0;

			console.log('REARRANGING2...!');
			console.log(div);
			for (var e = 0; e < div.children.length; e++) {
				console.log('FINDING FINDS');
				console.log('ClassName of ProdDiv: ' + div.className);
				if (div.children[e].className == "DivFinds") {
					var partialName2Finds = partialName2 + '[Finds][' + (findsVar)++ + ']';
					console.log('This is partialNamesFinds: ' + partialName2Finds);
					console.log('Found');
					var DivFindsGrabRow = div.children[e].children[0].children[0].children[0];
					for (var g = 0; g < DivFindsGrabRow.children.length; g++) {
						var divEl = DivFindsGrabRow.children[g].children[0];
						console.log(divEl);
						console.log('This is partialName2: ' + partialName2);
						if (findsVar < 10) {
							DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName2Finds + (divEl.name.substr(30)));
						} else if (findsVar >= 10 && findsVar < 100) { //catering up to 99 findings per ProductionLine
							DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName2Finds + (divEl.name.substr(31)));
						} else if (findsVar >= 100 && findsVar < 1000) { //catering up to 999 findings per ProductionLine
							DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName2Finds + (divEl.name.substr(32)));
						} else if (findsVar >= 1000 && findsVar < 10000) { //catering up to 9,999 findings per ProductionLine
							DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName2Finds + (divEl.name.substr(33)));
						}
						//DivFindsGrabRow.children[g].children[0].setAttribute('name', partialName2+partialName2Finds + '['+ (divEl.value) +']');
						//console.log(DivFindsGrabRow.children[g].children[0]);
					}
				}

			}

		}




		function AddFindingsDER(divAddProduct, divAddPL, pRName2, partialName2, gmpFinds) {
			console.log(divAddProduct);
			//console.log(divAddPL);
			//console.log(pRName2);
			//console.log('This is pRName2.strPR: '+pRName2.strPR);
			console.log('This is partialName2: ' + partialName2);
			DERCounter = DERCounter + 1;
			FSANCounter = FSANCounter + 1;

			var AddFindingTab = document.createElement('table');
			AddFindingTab.setAttribute('border', '1');
			AddFindingTab.className = "FindingsBackGround";


			var AddFindingRow = AddFindingTab.insertRow(-1);
			var AddFindingCell = AddFindingRow.insertCell(-1);
			var AddFindingCell2 = AddFindingRow.insertCell(-1);
			var AddFindingCell3 = AddFindingRow.insertCell(-1);
			var AddFindingCell4 = AddFindingRow.insertCell(-1);
			var AddFindingCell5 = AddFindingRow.insertCell(-1);
			var AddFindingCell6 = AddFindingRow.insertCell(-1);
			var AddFindingCell7 = AddFindingRow.insertCell(-1);
			var AddFindingCell8 = AddFindingRow.insertCell(-1);
			var AddFindingCell9 = AddFindingRow.insertCell(-1);
			var AddFindingCell13 = AddFindingRow.insertCell(-1);
			//AddFindingCell13.style.display = 'none';
			var AddFindingCell10 = AddFindingRow.insertCell(-1);
			var AddFindingCell11 = AddFindingRow.insertCell(-1);
			var AddFindingCell12 = AddFindingRow.insertCell(-1);


			var divAddFindings = document.createElement('div');
			divAddFindings.setAttribute('class', 'DivFinds');
			var divAddFindingsBreak = document.createElement('br');
			var divAddFindingsBreak2 = document.createElement('br');
			var divAddFindingsBreak3 = document.createElement('br');

			//Declaring Findings fields
			var inptFindsDel = document.createElement('input');
			inptFindsDel.setAttribute('type', 'button');
			inptFindsDel.setAttribute('value', 'Delete');

			var partialNameFind = pRName2.strPR + '[Finds]' + '[' + (pRName2.findsNumber++) + ']';
			console.log('This is partialNameFind: ' + partialNameFind);
			var inptFindsField = document.createElement('input');
			inptFindsField.setAttribute('type', 'text');
			inptFindsField.setAttribute('name', partialNameFind + '[FindDetail]');
			inptFindsField.setAttribute('placeholder', 'Input Findings');
			inptFindsField.setAttribute('required', true);
			inptFindsField.addEventListener('click', function () { console.log(this.name); });

			var inptFindsAdd = document.createElement('input');
			inptFindsAdd.setAttribute('type', 'button');
			inptFindsAdd.setAttribute('value', 'Add Findings');
			var inptFindsBr = document.createElement('br');
			var inptFindsBr2 = document.createElement('br');
			var inptFindsBr3 = document.createElement('br');

			/*
			var inptImgField = document.createElement('input');
				inptImgField.setAttribute('type','file');
				inptImgField.setAttribute('name', partialNameFind+'[FindImg]');
				inptImgField.setAttribute('value','Choose Image File...');
				inptImgField.setAttribute('required',true);
				inptImgField.addEventListener('click',function () {console.log(this.name);});
			*/

			var inptImgField = document.createElement('input');
			inptImgField.setAttribute('type', 'button');
			inptImgField.setAttribute('name', partialNameFind + '[FindImg]');
			inptImgField.setAttribute('value', 'Add Image');
			inptImgField.addEventListener('click', function () {
				console.log(this.name);
				this.setAttribute('type', 'file');
				this.setAttribute('value', 'Choose Image File...');
				this.setAttribute('required', true);
				this.addEventListener('click', function () { console.log(this.name); });
			});

			(function (divAddFindings, inptFindsDel) {
				//var div =inptFindsDel.parentNode.parentNode.parentNode.parentNode.parentNode;
				//console.log(div);
				inptFindsDel.addEventListener('click', function () { console.log(divAddProduct); console.log(this.parentNode.parentNode.parentNode); divAddProduct.removeChild(divAddFindings); RearrangeFindings(divAddProduct, partialName2); });
			})(divAddFindings, inptFindsDel);

			//DER specific
			if (regRegProdAGrab.value == 'Drug') {
				var inptFindsCheckQM = document.createElement('input');
				inptFindsCheckQM.setAttribute('type', 'radio');
				//inptFindsCheckQM.setAttribute('name', partialNameFind+'[QM]');
				inptFindsCheckQM.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckQM.setAttribute('class', 'firstRadios');
				inptFindsCheckQM.setAttribute('value', 'QM');
				inptFindsCheckQM.setAttribute('required', true);
				inptFindsCheckQM.addEventListener('click', function () { console.log('Clicked: ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); console.log('Node type = ' + this.nodeType); });

				var inptFindsCheckQE = document.createElement('input');
				inptFindsCheckQE.setAttribute('type', 'radio');
				//inptFindsCheckQE.setAttribute('name',partialNameFind+'[QE]');
				inptFindsCheckQE.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckQE.setAttribute('class', 'firstRadios');
				inptFindsCheckQE.setAttribute('value', 'QE');
				inptFindsCheckQE.setAttribute('required', true);
				inptFindsCheckQE.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckMM = document.createElement('input');
				inptFindsCheckMM.setAttribute('type', 'radio');
				inptFindsCheckMM.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckMM.setAttribute('class', 'firstRadios');
				inptFindsCheckMM.setAttribute('value', 'MM');
				inptFindsCheckMM.setAttribute('required', true);
				inptFindsCheckMM.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckPR = document.createElement('input');
				inptFindsCheckPR.setAttribute('type', 'radio');
				//inptFindsCheckPR.setAttribute('name',partialNameFind+'[PROD]');
				inptFindsCheckPR.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckPR.setAttribute('class', 'firstRadios');
				inptFindsCheckPR.setAttribute('value', 'PROD');
				inptFindsCheckPR.setAttribute('required', true);
				inptFindsCheckPR.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('name of element = ' + this.name); console.log('value of clicked = ' + this.value); });

				var inptFindsCheckPL = document.createElement('input');
				inptFindsCheckPL.setAttribute('type', 'radio');
				//inptFindsCheckPL.setAttribute('name',partialNameFind+'[PL]');
				inptFindsCheckPL.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckPL.setAttribute('class', 'firstRadios');
				inptFindsCheckPL.setAttribute('value', 'PL');
				inptFindsCheckPL.setAttribute('required', true);
				inptFindsCheckPL.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); console.log(divAddProduct.getElementsByClassName('DivFinds')) });


				var inptFindsCheckQC = document.createElement('input');
				inptFindsCheckQC.setAttribute('type', 'radio');
				//inptFindsCheckQC.setAttribute('name', partialNameFind+'[QC]');
				inptFindsCheckQC.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckQC.setAttribute('class', 'firstRadios');
				inptFindsCheckQC.setAttribute('value', 'QC');
				inptFindsCheckQC.setAttribute('required', true);
				inptFindsCheckQC.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckSatis = document.createElement('input');
				inptFindsCheckSatis.setAttribute('type', 'radio');
				inptFindsCheckSatis.setAttribute('name', partialNameFind + '[radio]');
				inptFindsCheckSatis.setAttribute('class', 'firstRadios');
				inptFindsCheckSatis.setAttribute('value', 'Satisfactory');
				inptFindsCheckSatis.setAttribute('required', true);
				//inptFindsCheckSatis.style.display = 'none';
				inptFindsCheckSatis.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckCO = document.createElement('input');
				inptFindsCheckCO.setAttribute('type', 'radio');
				//inptFindsCheckQC.setAttribute('name', partialNameFind+'[QC]');
				inptFindsCheckCO.setAttribute('name', partialNameFind + '[observation]');
				inptFindsCheckCO.setAttribute('class', 'secondRadios');
				inptFindsCheckCO.setAttribute('value', 'Critical');
				inptFindsCheckCO.setAttribute('required', true);
				inptFindsCheckCO.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckMO = document.createElement('input');
				inptFindsCheckMO.setAttribute('type', 'radio');
				//inptFindsCheckQC.setAttribute('name', partialNameFind+'[QC]');
				inptFindsCheckMO.setAttribute('name', partialNameFind + '[observation]');
				inptFindsCheckMO.setAttribute('class', 'secondRadios');
				inptFindsCheckMO.setAttribute('value', 'Major');
				inptFindsCheckMO.setAttribute('required', true);
				inptFindsCheckMO.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckOO = document.createElement('input');
				inptFindsCheckOO.setAttribute('type', 'radio');
				//inptFindsCheckQC.setAttribute('name', partialNameFind+'[QC]');
				inptFindsCheckOO.setAttribute('name', partialNameFind + '[observation]');
				inptFindsCheckOO.setAttribute('class', 'secondRadios');
				inptFindsCheckOO.setAttribute('value', 'Other');
				inptFindsCheckOO.setAttribute('required', true);
				inptFindsCheckOO.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });

			}


			//General
			AddFindingCell.appendChild(inptFindsDel);
			AddFindingCell2.appendChild(inptFindsField);
			AddFindingCell3.appendChild(inptImgField);


			//Drug
			if (regRegProdAGrab.value == 'Drug') {
				AddFindingCell4.innerHTML = 'QM: ';
				AddFindingCell4.appendChild(inptFindsCheckQM);
				AddFindingCell5.innerHTML = 'QE: ';
				AddFindingCell5.appendChild(inptFindsCheckQE);
				AddFindingCell6.innerHTML = 'MM: ';
				AddFindingCell6.appendChild(inptFindsCheckMM);
				AddFindingCell7.innerHTML = 'Prod: ';
				AddFindingCell7.appendChild(inptFindsCheckPR);
				AddFindingCell8.innerHTML = 'PL: ';
				AddFindingCell8.appendChild(inptFindsCheckPL);
				AddFindingCell9.innerHTML = 'QC: ';
				AddFindingCell9.appendChild(inptFindsCheckQC);
				AddFindingCell13.innerHTML = 'Satis ';
				AddFindingCell13.appendChild(inptFindsCheckSatis);
				AddFindingCell10.innerHTML = 'Critical';
				AddFindingCell10.appendChild(inptFindsCheckCO);
				AddFindingCell11.innerHTML = 'Major';
				AddFindingCell11.appendChild(inptFindsCheckMO);
				AddFindingCell12.innerHTML = 'Other';
				AddFindingCell12.appendChild(inptFindsCheckOO);


				if (gmpFinds) {

					var inptFindsCheckRes = document.createElement('input');
					inptFindsCheckRes.setAttribute('type', 'radio');
					inptFindsCheckRes.setAttribute('name', partialNameFind + '[observation]');
					inptFindsCheckRes.setAttribute('class', 'secondRadios');
					inptFindsCheckRes.setAttribute('value', 'resolve');
					inptFindsCheckRes.setAttribute('required', true);
					inptFindsCheckRes.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });
					var AddFindingCell14 = AddFindingRow.insertCell(-1);
					AddFindingCell14.innerHTML = 'Resolve';
					AddFindingCell14.appendChild(inptFindsCheckRes);

					var inptFindsCheckMod = document.createElement('input');
					inptFindsCheckMod.setAttribute('type', 'radio');
					//inptFindsCheckQC.setAttribute('name', partialNameFind+'[QC]');
					inptFindsCheckMod.setAttribute('name', partialNameFind + '[modification]');
					inptFindsCheckMod.setAttribute('class', 'modify');
					inptFindsCheckMod.setAttribute('value', 'modify');
					inptFindsCheckMod.setAttribute('required', true);
					(function (divAddFindings) {
						inptFindsCheckMod.addEventListener('click', function () {
							console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName);

							var findsInptGrab = divAddFindings.getElementsByTagName('input');
							for (var b = 0; b < findsInptGrab.length; b++) {
								//findsInptGrab[b].setAttribute('disabled', false);
								findsInptGrab[b].disabled = false;
							}
							console.log('NOW WRITABLE2');

						});
					})(divAddFindings);
					var AddFindingCell13 = AddFindingRow.insertCell(-1);
					AddFindingCell13.innerHTML = 'Mod';
					AddFindingCell13.appendChild(inptFindsCheckMod);

					var inptFindsKey = document.createElement('input');
					inptFindsKey.setAttribute('type', 'text');
					inptFindsKey.setAttribute('name', partialNameFind + '[key]');
					inptFindsKey.setAttribute('readonly', true);
					//inptFindsKey.setAttribute('class','secondRadios');
					//inptFindsKey.setAttribute('value','resolve');
					inptFindsKey.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Clicked ' + this.value); console.log('Node name = ' + this.nodeName); });
					var AddFindingCell15 = AddFindingRow.insertCell(-1);
					AddFindingCell15.innerHTML = 'Key';
					AddFindingCell15.appendChild(inptFindsKey);

				}

			}

			if (regRegProdAGrab.value == 'Food') {

				var inptFindsCheckStorage = document.createElement('input');
				inptFindsCheckStorage.setAttribute('type', 'radio');
				inptFindsCheckStorage.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckStorage.setAttribute('value', 'Storage');
				inptFindsCheckStorage.setAttribute('readonly', true);
				inptFindsCheckStorage.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckChemical = document.createElement('input');
				inptFindsCheckChemical.setAttribute('type', 'radio');
				inptFindsCheckChemical.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckChemical.setAttribute('value', 'Chemical');
				inptFindsCheckChemical.setAttribute('readonly', true);
				inptFindsCheckChemical.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckFiltration = document.createElement('input');
				inptFindsCheckFiltration.setAttribute('type', 'radio');
				inptFindsCheckFiltration.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckFiltration.setAttribute('value', 'Filtration');
				inptFindsCheckFiltration.setAttribute('readonly', true);
				inptFindsCheckFiltration.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckOzonization = document.createElement('input');
				inptFindsCheckOzonization.setAttribute('type', 'radio');
				inptFindsCheckOzonization.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckOzonization.setAttribute('value', 'Ozonization');
				inptFindsCheckOzonization.setAttribute('readonly', true);
				inptFindsCheckOzonization.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckRO = document.createElement('input');
				inptFindsCheckRO.setAttribute('type', 'radio');
				inptFindsCheckRO.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckRO.setAttribute('value', 'RO');
				inptFindsCheckRO.setAttribute('readonly', true);
				inptFindsCheckRO.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });


				var inptFindsCheckUV = document.createElement('input');
				inptFindsCheckUV.setAttribute('type', 'radio');
				inptFindsCheckUV.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckUV.setAttribute('value', 'UV');
				inptFindsCheckUV.setAttribute('readonly', true);
				inptFindsCheckUV.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckPackaging = document.createElement('input');
				inptFindsCheckPackaging.setAttribute('type', 'radio');
				inptFindsCheckPackaging.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckPackaging.setAttribute('value', 'Packaging');
				inptFindsCheckPackaging.setAttribute('readonly', true);
				inptFindsCheckPackaging.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });

				var inptFindsCheckCoding = document.createElement('input');
				inptFindsCheckCoding.setAttribute('type', 'radio');
				inptFindsCheckCoding.setAttribute('name', 'FSANRadio' + FSANCounter);
				inptFindsCheckCoding.setAttribute('value', 'Coding');
				inptFindsCheckCoding.setAttribute('readonly', true);
				inptFindsCheckCoding.addEventListener('click', function () { console.log('Clicked ' + this.name); console.log('Node name = ' + this.nodeName); });


				AddFindingCell4.innerHTML = 'Str: ';
				AddFindingCell4.appendChild(inptFindsCheckStorage);
				AddFindingCell5.innerHTML = 'Che: ';
				AddFindingCell5.appendChild(inptFindsCheckChemical);
				AddFindingCell6.innerHTML = 'Fl: ';
				AddFindingCell6.appendChild(inptFindsCheckFiltration);
				AddFindingCell7.innerHTML = 'Oz: ';
				AddFindingCell7.appendChild(inptFindsCheckOzonization);
				AddFindingCell8.innerHTML = 'RO: ';
				AddFindingCell8.appendChild(inptFindsCheckRO);
				AddFindingCell9.innerHTML = 'UV: ';
				AddFindingCell9.appendChild(inptFindsCheckUV);
				AddFindingCell10.innerHTML = 'Pk: ';
				AddFindingCell10.appendChild(inptFindsCheckPackaging);
				AddFindingCell11.innerHTML = 'Cd: ';
				AddFindingCell11.appendChild(inptFindsCheckCoding);

			}

			//End of DER

			divAddFindings.appendChild(AddFindingTab);

			divAddProduct.appendChild(divAddFindings);

			if (gmpFinds) {
				return divAddFindings;
			}


		}


		function Directions(position2, levelComplication, scanRoute) {

			if (scanRoute) { //used with the scan button
				console.log('For scanning');
				//mapOverBoundsDirections.extend(scanRoute);
				mapOverMarkerDirection = scanRoute;
				console.log('Doing Directions for scanned results');
				//console.log(pos);//geolocation from scan
			}
			console.log('Doing Directions, then terminating');
			console.log('Doing Directions, then terminating2LaLa');
			mapOverBoundsDirections.extend(new google.maps.LatLng(position2.coords.latitude, position2.coords.longitude));
			console.log('Doing Directions, then terminatingLa');
			console.log(mapOverMarkerDirection);
			mapOverBoundsDirections.extend(mapOverMarkerDirection);
			console.log(position2.coords.latitude);
			console.log(position2.coords.longitude);
			console.log('33333333');
			console.log('Doing Directions, then terminating3...');
			var mapOverService = new google.maps.DirectionsService();
			mapOverRender = new google.maps.DirectionsRenderer({
				draggable: true,
				provideRouteAlternatives: true,
				suppressMarkers: true
			});
			mapOverRender.setMap(mapOverDisp);
			mapOverDisp.setTilt(45);
			var mapOverRequest = {
				origin: new google.maps.LatLng(position2.coords.latitude, position2.coords.longitude),
				destination: mapOverMarkerDirection,
				travelMode: google.maps.TravelMode.DRIVING
			}
			console.log(mapOverRequest.destination);
			//console.log(mapOverMarkerDirection);
			console.log('Almost there...');
			mapOverService.route(mapOverRequest, function (response, status) {
				navFormDivVar = 'panelRenderContainerGrab';
				console.log('So far...');
				if (status == google.maps.DirectionsStatus.OK) {
					console.log('...so good!');
					if (levelComplication == 'complex') {
						console.log('Number of routes ' + response.routes.length);
						StepByStep(response);
					}
					mapOverRender.setDirections(response);

					panelRenderContainerGrab = document.getElementById('panelRenderContainer');


					panelRenderGrab = document.getElementById('panelRender');
					console.log('Now panelling...');
					console.log(navFormDiv.children.length);
					console.log(navFormDiv);

					panelRenderGrab.setAttribute('class', 'panelRenderClass');
					panelRenderContainerGrab.style.height = '100%';
					panelRenderContainerGrab.style.padding = '10px';
					//panelRenderContainerGrab.style.width = '400px';

					mapOverRender.setPanel(panelRenderGrab);
					google.maps.event.addListener(mapOverRender, 'click', function () { alert('Nice!') });

					renderArr.push(mapOverRender);

					console.log('This is the bounds object ' + mapOverBoundsDirections);
					console.log('This is the bounds length ' + mapOverBoundsDirections.getLength);
					mapOverDisp.fitBounds(mapOverBoundsDirections);
					mapOverDisp.setTilt(45);

					if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
						while (navFormDiv.children.length) {
							navFormDiv.removeChild(navFormDiv.children[0]);

						}

						//var panelRenderGrab = document.createElement('div');
						navFormDivVar = 'panelRenderContainerGrab';
						navFormDiv.appendChild(panelRenderContainerGrab);
						navFormDiv.style.width = "100%";

						timesSymbol = document.createElement('a');
						timesSymbol.setAttribute('href', 'javascript:void(0)');
						timesSymbol.setAttribute('class', 'closeNavForm');
						timesSymbol.setAttribute('id', 'closeNavForm');
						timesSymbol.addEventListener('click', closeNavForm);
						timesSymbol.innerHTML = '&times';

						navFormDiv.appendChild(timesSymbol);

						//mapOverRender.setPanel(panelRenderGrab);
					}

				}
			});


		}

		(function (chartBarStates, chartPieStates) {
			window.addEventListener('resize', function () { //just in case anyone is playing with resizing windows		
				console.log(phoneSize);
				closeNavForm2();
				timesSymbol = document.createElement('a');
				timesSymbol.setAttribute('href', 'javascript:void(0)');
				timesSymbol.setAttribute('class', 'closeNavForm');
				timesSymbol.setAttribute('id', 'closeNavForm');
				timesSymbol.addEventListener('click', closeNavForm);
				timesSymbol.innerHTML = '&times';
				//GeolocateOver(a, markerPosition);
				console.log('RESIZING...');
				console.log('This is navFormDivVar ' + navFormDivVar);
				if (Math.max(document.documentElement.clientWidth, window.innerWidth || 0) < 650) {
					chartDivClassGrab1 = document.getElementsByClassName('chartDivClass1');
					chartDivClassGrab2 = document.getElementsByClassName('chartDivClass2');
					console.log('Entering small screen test');
					console.log(phoneSize);
					if (phoneSize == false) {
						console.log('Entered');
						if (navFormDivVar == 'chartDivGrab') {
							console.log('ABOUT CHARTS');
							console.log(chartDivClassGrab1[0]);
							navFormDiv.appendChild(chartDivClassGrab1[0]);
							navFormDiv.appendChild(chartDivClassGrab2[0]);

							console.log(timesSymbol);
							navFormDiv.appendChild(timesSymbol);
							openNav();
							console.log(navFormDiv);
						} else if (navFormDivVar == 'navFormDivTrans') {
							console.log('ABOUT GEOLOCATION');
							navFormDiv.appendChild(navFormDivTrans);
							navFormDiv.appendChild(timesSymbol)
							openNav();
						} else if (navFormDivVar == 'panelRenderContainerGrab') {
							navFormDiv.appendChild(panelRenderContainerGrab);
							navFormDiv.appendChild(timesSymbol);
							console.log('PANEL RENDER');
							openNav();
						}
						console.log('Before: ' + phoneSize);
						phoneSize = true;
						console.log('After: ' + phoneSize);
					} else {
						console.log(phoneSize);
						console.log('Failed');
					}
				} else {
					phoneSize = false;
					if (navFormDivVar == 'chartDivGrab') {
						console.log('This is navFormDiv');
						//console.log(navFormDiv);

						if (navFormDivCloseVar == false) {
							console.log('For False');
							console.log(navFormDiv);
							console.log(chartDisplayArr.length);
							console.log(chartDisplayArr);

							var ch = document.getElementById('chartDiv');
							var ch2 = document.getElementById('chartDiv2');
							var barChartsGrabTest = document.getElementById('Charts');
							var pieChartsGrabTest = document.getElementById('Charts2');
							var barChartsGrabTest2 = document.getElementById('Charts3');
							var pieChartsGrabTest2 = document.getElementById('Charts4');

							console.log('-----++++++++++--------');
							console.log(ch);
							console.log(ch2);
							console.log(barChartsGrabTest);
							console.log(pieChartsGrabTest);
							console.log(barChartsGrabTest2);
							console.log(pieChartsGrabTest2);

							for (var a = 0; a < chartDisplayArr.length; a++) {
								console.log('Clearing each chart...');
								console.log(chartDisplayArr[a]);
								console.log(chartDisplayArr.length);
								if (chartDisplayArr[a] != undefined) {
									chartDisplayArr[a].clearChart();
								}
							}
							console.log(chartDisplayArr);
							chartDisplayArr = [];
							console.log(chartDisplayArr);
							console.log(chartDisplayArr.length);

							console.log('After -----++++++++++--------');
							console.log(barChartsGrabTest);
							console.log(barChartsGrabTest.parentNode);
							console.log(pieChartsGrabTest.parentNode);
							console.log(barChartsGrabTest2);
							console.log(barChartsGrabTest2);
							console.log(barChartsGrabTest2.parentNode);
							console.log(pieChartsGrabTest2);

							//var testEl = document.createElement('input');
							//testEl.setAttribute('type', 'text');
							//testEl.setAttribute('value', 'NothingThere');
							//barChartsGrabTest.appendChild(testEl);

							console.log('Before removing...');
							console.log(chartDisplayButArr);
							console.log('Length of chartDisplayButArr: ' + chartDisplayButArr.length)

							for (var a = 0; a < chartDisplayButArr.length; a++) {
								console.log('Removing Buttons...!' + a);
								console.log(chartDisplayButArr[a].parentNode);
								console.log(chartDisplayButArr[a].parentNode.children.length);
								chartDisplayButArr[a].parentNode.removeChild(chartDisplayButArr[a]);
							}

							chartDisplayButArr = [];

							console.log('After removing...');
							console.log(chartDisplayButArr);
							console.log('Length of chartDisplayButArr: ' + chartDisplayButArr.length)

							console.log(chartCellClassGrab1);
							console.log(chartCellClassGrab2);
							console.log('Large screen;uncharted');
							console.log(phoneSize);
							console.log(navFormDiv);

						} else {
							console.log(navFormDiv);
							console.log('True state');
							chartDivClassGrab1 = navFormDiv.getElementsByClassName('chartDivClass1');
							chartDivClassGrab2 = navFormDiv.getElementsByClassName('chartDivClass2');

							chartCellClassGrab1 = document.getElementById('chartCell');
							chartCellClassGrab2 = document.getElementById('chartCell2');

							console.log(navFormDiv);

							console.log(chartDivClassGrab1[0]);
							chartCellClassGrab1.appendChild(chartDivClassGrab1[0]);
							chartCellClassGrab2.appendChild(chartDivClassGrab2[0]);

							console.log('In the canceled state');
							console.log(chartCellClassGrab1);
							console.log(chartCellClassGrab2);



							console.log(chartCellClassGrab1);
							console.log(chartCellClassGrab2);
							console.log('Large screen;charted');
							console.log(phoneSize);
						}
						/*
						var chartDivClassGroup = navFormDiv.getElementsByClassName('chartDivClass'); //this is used to display both charts in pc view.  If one chart only is active, the other is flat and nobody notices anyway.
						console.log(chartDivClassGroup);
						console.log('Length of chartDivClassGroup: '+chartDivClassGroup.length);
						var chartCellClassGroup = document.getElementsByClassName('chartCellClass');
						console.log(chartCellClassGroup);
						console.log('Length of chartCellClassGroup: '+chartCellClassGroup.length);
						console.log(chartCellClassGroup);
							
							while (chartDivClassGroup.length) {
								console.log(chartDivClassGroup.length);
								console.log('Looping How ManyTimes');
								console.log(chartDivClassGroup);
								console.log(chartDivClassGroup.item(chartCellClassGroupCounter++));
								chartCellClassGroup[chartCellClassGroupCounter++].innerHTML = (chartDivClassGroup.item(chartCellClassGroupCounter++));
								
							}
							*/
						//chartCellGeneral.appendChild(chartDivGeneral);
						//chartCell2Grab.appendChild();
					} else if (navFormDivVar == 'navFormDivTrans') {
						geoMarkerOverInfo.setContent(navFormDivTrans);
						geoMarkerOverInfo.open(mapOverDisp, geoMarkerOver);
						//chartCellGrab.appendChild(chartDivGrab);
					} else if (navFormDivVar == 'panelRenderContainerGrab') {
						panelRenderContainerGrabBut = document.createElement('input');
						panelRenderContainerGrabBut.setAttribute('type', 'button');
						panelRenderContainerGrabBut.setAttribute('value', 'Done');
						panelRenderContainerGrabBut.addEventListener('click', ClosePanelRenderContainer);
						panelCellGrab.appendChild(panelRenderContainerGrabBut);
						panelCellGrab.appendChild(panelRenderContainerGrab);
					}
				}
			});
		})(chartBarStates, chartPieStates);


		function CloseChart(chartBarStates, chartPieStates) {
			console.log(chartBarStates);
			console.log(chartPieStates);
			chartBarStates.clearChart();
			chartPieStates.clearChart();

			this.style.display = 'none';

			//this.parentNode.innerHTML = null;
		}


		function ClosePanelRenderContainer() {
			console.log('Closing instructions...');
			console.log(this);
			mapOverRender.setPanel(null);
			this.parentNode.removeChild(this);

		}


		function StepByStep(response2) {
			console.log('This is response ' + response2);
			var shortResponse = response2.routes[0].legs[0];

			for (var a = 0; a < shortResponse.steps.length; a++) {
				var markerComplex = new google.maps.Marker({
					map: mapOverDisp,
					position: shortResponse.steps[a].start_location
				});

				markerComplexArr.push(markerComplex);

				(function (a, markerComplex) {
					google.maps.event.addListener(markerComplex, 'click', function () {
						alert('Clicked!');
						alert(stepInfo);
						stepInfo.setContent(shortResponse.steps[a].instructions);
						stepInfo.open(mapOverDisp, markerComplex);
					});
				})(a, markerComplex);

				//txtDirectionsDiv.innerHTML += shortResponse.steps[a].instructions + '</br>';
			}
		}


		function ProductInspReflect() {
			console.log('Entered focus');
			ProductReflect();
		}


		//Did I use this at all?
		function BounceForm() {
			alert(mapOverMarkerArrBounce);
			var b = mapOverMarkerArrBounce.toString();
			alert('And in string form = ' + b);

			var f = document.createElement('form');
			f.setAttribute('action', 'dynaForms2.php');
			f.setAttribute('method', 'POST');

			var inp1 = document.createElement('input');
			inp1.setAttribute('name', 'firstName');
			inp1.setAttribute('value', b);

			f.appendChild(inp1);

			f.submit();
			alert('Submitted');
			document.getElementsByTagName('body')[0].appendChild(f);

		}


		function Post(infoArrayIdNoAttr) { // Because this is a function within a function, it'll intitiate a new request
			//alert('Inside POST; attr = ' +infoArrayIdNoAttr);

			var XMLHttpRequestObj3; //I think it is possible not to var it here, but as global, so you don't need to 'delete' as

			if (window.XMLHttpRequest) {
				//alert ('Firefox et al');
				XMLHttpRequestObj3 = new XMLHttpRequest();
			} else {
				alert('You should change your explorer');
				XMLHttpRequestObj3 = new ActiveXObject('Microsoft.XMLHTTP');
			}

			if (XMLHttpRequestObj3) {

				XMLHttpRequestObj3.open('POST', 'posto.php');
				XMLHttpRequestObj3.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

				XMLHttpRequestObj3.onreadystatechange = function () { // Because this is a function within a function, it'll intitiate a new request
					if (XMLHttpRequestObj3.readyState == 4 && XMLHttpRequestObj3.status == 200) {
						var postoStr = XMLHttpRequestObj3.responseText;
						//alert (postoStr);
						delete XMLHttpRequestObj3; // declaring this as a global variable, may eliminate the need for the next two lines.
						XMLHttpRequestObj3 = null;

						//alert(XMLHttpRequestObj3.responseText);
					}

				}


				XMLHttpRequestObj3.send('lVarP=' + infoArrayIdNoAttr);
			}


		}// end of post


		function CompanyOptionsCall(this2) {
			console.log('Now counting yeah...');
			if ((this2.value).length > 1) {

				if (XMLHttpRequestObj5) {
					XMLHttpRequestObj5.abort();
				}

				console.log('Calling Ajax...!');
				XMLHttpRequestObj5 = new XMLHttpRequest();
				XMLHttpRequestObj5.open('POST', 'Autocomplete', true);
				XMLHttpRequestObj5.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj5.responseType = 'json';

				XMLHttpRequestObj5.send(this2.name + '=' + this2.value);
				XMLHttpRequestObj5.onreadystatechange = function () {
					console.log('Request back');
					console.log(XMLHttpRequestObj5.readyState);
					if (XMLHttpRequestObj5.readyState == 4 && XMLHttpRequestObj5.status == 200) {
						console.log('Successfully hit server');
						xmlAuto = XMLHttpRequestObj5.response;
						console.log(xmlAuto);
						AutoProcess(xmlAuto);
					}
				}
			}

		}

		function CompanyOptionsCall2(regNoc) {
			console.log('Now counting yeah...');
			console.log('This is input: ' + regNoc.value);
			console.log('From beneath map: ' + regNoc.value);
			if ((regNoc.value).length > 1) {

				if (XMLHttpRequestObj5) {
					XMLHttpRequestObj5.abort();
				}

				console.log('Calling Ajax...!');
				XMLHttpRequestObj5 = new XMLHttpRequest();
				XMLHttpRequestObj5.open('POST', 'Autocomplete', true);
				XMLHttpRequestObj5.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj5.responseType = 'json';

				XMLHttpRequestObj5.send(regNoc.name + '=' + regNoc.value);
				XMLHttpRequestObj5.onreadystatechange = function () {
					console.log('Request back');
					console.log(XMLHttpRequestObj5.readyState);
					if (XMLHttpRequestObj5.readyState == 4 && XMLHttpRequestObj5.status == 200) {
						console.log('Successfully hit server');
						xmlAuto = XMLHttpRequestObj5.response;
						console.log(xmlAuto);
						AutoProcess(xmlAuto);
					}
				}
			}

		}

		function CompanyOptionsCall2A(regNoc) {
			console.log('Now counting yeah...');
			console.log('This is input: ' + regNoc.value);
			console.log('From beneath map: ' + regNoc.value);
			if ((regNoc.value).length > 1) {

				if (XMLHttpRequestObj5) {
					XMLHttpRequestObj5.abort();
				}

				console.log('Calling Ajax...!');
				XMLHttpRequestObj5 = new XMLHttpRequest();
				XMLHttpRequestObj5.open('POST', 'Autocomplete', true);
				XMLHttpRequestObj5.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj5.responseType = 'json';

				XMLHttpRequestObj5.send(regNoc.name + '=' + regNoc.value);
				XMLHttpRequestObj5.onreadystatechange = function () {
					console.log('Request back');
					console.log(XMLHttpRequestObj5.readyState);
					if (XMLHttpRequestObj5.readyState == 4 && XMLHttpRequestObj5.status == 200) {
						console.log('Successfully hit server');
						xmlAuto = XMLHttpRequestObj5.response;
						console.log(xmlAuto);
						AutoProcessA(xmlAuto);
					}
				}
			}

		}

		function AutoProcess(xmlAuto2) { //for processing Company Name and Company Address
			nocSelAddGrab = document.getElementById('nocSelAdd');
			// Emptying select box
			console.log(nocSelName);
			console.log(nocSelNameDiv);
			while (nocSelNameDiv.length > 0) {
				nocSelNameDiv.remove(0);
			}


			var autoArr = [];
			var autoArr2 = [];

			var autoAdd = [];
			var autoAdd2 = [];

			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.companyName;
			var xmlAutoAdd = xmlAuto2.companyAdd;
			console.log('This is the number: ' + xmlAutoDoc.length);
			console.log('This is the number: ' + xmlAutoAdd.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				autoArr.push(xmlAutoDoc[a]);
				autoAdd.push(xmlAutoAdd[a]);
			}
			autoArr.sort(function (a, b) {
				return (a.name > b.name);
			});

			autoAdd.sort();
			console.log(autoArr);
			console.log(autoAdd);
			console.log('length of autoArr', autoArr.length);
			console.log(autoArr[0]);
			console.log(autoArr[1]);
			for (var b = 0; b < autoArr.length; b++) {
				console.log('This is autoArr:')
				console.log(autoArr[b + 1]);
				if (autoArr[b].name == ((autoArr[b + 1] == undefined) ? autoArr[b + 1] : autoArr[b + 1].name)) {
					delete autoArr[b];
				}
			}

			for (var b = 0; b < autoAdd.length; b++) {
				if (autoAdd[b] == autoAdd[b + 1]) {
					delete autoAdd[b];
				}
			}

			for (var d = 0; d < autoArr.length; d++) {
				if (autoArr[d] != undefined) {
					autoArr2.push(autoArr[d]);
				}

				if (autoAdd[d] != undefined) {
					autoAdd2.push(autoAdd[d]);
				}
			}
			console.log('Final Arr: ');
			console.log(autoArr2);
			console.log(autoAdd2);
			for (var c = 0; c < autoArr2.length; c++) {
				console.log(nocSelNameDiv);
				console.log(nocSelNameDiv.length);
				nocSelNameDiv.options[c] = new Option(autoArr2[c].name);
				//nocSelAddGrab.options[c] = new Option(autoArr2[c].add);
			}

		}

		function AutoProcessA(xmlAuto2) { //for processing Company Name and Company Address
			nocSelAddGrab = document.getElementById('nocSelAdd');
			// Emptying select box
			console.log(nocSelNameA);
			console.log(nocSelNameADiv);
			while (nocSelNameADiv.length > 0) {
				nocSelNameADiv.remove(0);
			}


			var autoArr = [];
			var autoArr2 = [];

			var autoAdd = [];
			var autoAdd2 = [];

			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.companyName;
			var xmlAutoAdd = xmlAuto2.companyAdd;
			console.log('This is the number: ' + xmlAutoDoc.length);
			console.log('This is the number: ' + xmlAutoAdd.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				autoArr.push(xmlAutoDoc[a]);
				autoAdd.push(xmlAutoAdd[a]);
			}
			autoArr.sort(function (a, b) {
				return (a.name > b.name);
			});

			autoAdd.sort();
			console.log(autoArr);
			console.log(autoAdd);
			console.log('length of autoArr', autoArr.length);
			console.log(autoArr[0]);
			console.log(autoArr[1]);
			for (var b = 0; b < autoArr.length; b++) {
				console.log('This is autoArr:')
				console.log(autoArr[b + 1]);
				if (autoArr[b].name == ((autoArr[b + 1] == undefined) ? autoArr[b + 1] : autoArr[b + 1].name)) {
					delete autoArr[b];
				}
			}

			for (var b = 0; b < autoAdd.length; b++) {
				if (autoAdd[b] == autoAdd[b + 1]) {
					delete autoAdd[b];
				}
			}

			for (var d = 0; d < autoArr.length; d++) {
				if (autoArr[d] != undefined) {
					autoArr2.push(autoArr[d]);
				}

				if (autoAdd[d] != undefined) {
					autoAdd2.push(autoAdd[d]);
				}
			}
			console.log('Final Arr: ');
			console.log(autoArr2);
			console.log(autoAdd2);
			for (var c = 0; c < autoArr2.length; c++) {
				console.log(nocSelNameADiv);
				console.log(nocSelNameADiv.length);
				nocSelNameADiv.options[c] = new Option(autoArr2[c].name);
				//nocSelAddGrab.options[c] = new Option(autoArr2[c].add);
			}

		}

		function AutoProcessAddress(xmlAuto2, selNoC) { //for processing Company Name and Company Address
			nocSelAddGrab = document.getElementById('nocSelAdd');
			// Emptying select box
			while (nocSelAddGrab.length > 0) {
				nocSelAddGrab.remove(0);
			}

			var autoArrAdd = [];
			var autoArrAdd2 = [];

			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.companyName;
			//var xmlAutoAdd = xmlAuto2.companyAdd;
			console.log('This is the number: ' + xmlAutoDoc.length);
			//console.log('This is the number: '+xmlAutoAdd.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				if (xmlAutoDoc[a].name == selNoC) {
					autoArrAdd.push(xmlAutoDoc[a]);
					//autoAdd.push(xmlAutoAdd[a]);
				}
			}

			autoArrAdd.sort(function (a, b) {
				return (a.add > b.add);
			});

			console.log(autoArrAdd);
			//console.log(autoAdd);
			console.log('length of autoArrAdd', autoArrAdd.length);
			console.log(autoArrAdd[0]);
			console.log(autoArrAdd[1]);
			for (var b = 0; b < autoArrAdd.length; b++) {
				console.log('This is autoArrAdd:')
				console.log(autoArrAdd[b + 1]);
				if (autoArrAdd[b].add == ((autoArrAdd[b + 1] == undefined) ? autoArrAdd[b + 1] : autoArrAdd[b + 1].add)) {
					delete autoArrAdd[b];
				}
			}


			for (var d = 0; d < autoArrAdd.length; d++) {
				if (autoArrAdd[d] != undefined) {
					autoArrAdd2.push(autoArrAdd[d]);
				}
			}

			console.log('Final Arr: ');
			console.log(autoArrAdd2);

			for (var c = 0; c < autoArrAdd2.length; c++) {
				console.log(nocSelAddGrab);
				console.log(nocSelAddGrab.length);
				nocSelAddGrab.options[c] = new Option(autoArrAdd2[c].add);
			}

			/*
			for (var c=0;c<autoAdd2.length;c++){
				console.log(nocSelAddGrab);
				console.log(nocSelAddGrab.length);
				nocSelAddGrab.options[c] = new Option(autoAdd2[c]);
			}
			*/
		}
		function AutoProcessAddressA(xmlAuto2, selNoC) { //for processing Company Name and Company Address
			nocSelAddAGrab = document.getElementById('nocSelAddA');
			// Emptying select box
			while (nocSelAddAGrab.length > 0) {
				nocSelAddAGrab.remove(0);
			}

			var autoArrAdd = [];
			var autoArrAdd2 = [];

			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.companyName;
			//var xmlAutoAdd = xmlAuto2.companyAdd;
			console.log('This is the number: ' + xmlAutoDoc.length);
			//console.log('This is the number: '+xmlAutoAdd.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				if (xmlAutoDoc[a].name == selNoC) {
					autoArrAdd.push(xmlAutoDoc[a]);
					//autoAdd.push(xmlAutoAdd[a]);
				}
			}

			autoArrAdd.sort(function (a, b) {
				return (a.add > b.add);
			});

			console.log(autoArrAdd);
			//console.log(autoAdd);
			console.log('length of autoArrAdd', autoArrAdd.length);
			console.log(autoArrAdd[0]);
			console.log(autoArrAdd[1]);
			for (var b = 0; b < autoArrAdd.length; b++) {
				console.log('This is autoArrAdd:')
				console.log(autoArrAdd[b + 1]);
				if (autoArrAdd[b].add == ((autoArrAdd[b + 1] == undefined) ? autoArrAdd[b + 1] : autoArrAdd[b + 1].add)) {
					delete autoArrAdd[b];
				}
			}


			for (var d = 0; d < autoArrAdd.length; d++) {
				if (autoArrAdd[d] != undefined) {
					autoArrAdd2.push(autoArrAdd[d]);
				}
			}

			console.log('Final Arr: ');
			console.log(autoArrAdd2);

			for (var c = 0; c < autoArrAdd2.length; c++) {
				console.log(nocSelAddAGrab);
				console.log(nocSelAddAGrab.length);
				nocSelAddAGrab.options[c] = new Option(autoArrAdd2[c].add);
			}

			/*
			for (var c=0;c<autoAdd2.length;c++){
				console.log(nocSelAddAGrab);
				console.log(nocSelAddAGrab.length);
				nocSelAddAGrab.options[c] = new Option(autoAdd2[c]);
			}
			*/
		}




		function CompanyOptions(pNArr) {
			console.log('Inside CompanyOptions... ');
			if (!pNArr) {
				for (var a = 0; a < nocArrClip.length; a++) {
					if (nocArrClip[a].search(regNoCDiv.value) != -1) {
						console.log('Companies: ' + nocArrClip[a]);
						nocArr2.push(nocArrClip[a]);
					}
				}

				nocSelNameDiv[0].options.length = 0; // resetting number of options in SelectBox

				for (var a = 0; a < nocArr2.length; a++) {
					nocSelNameDiv[0].options[a] = new Option(nocArr2[a]);
				}
				nocArr2 = [];

			} /*else {
			//pNSelNameDiv.options.length = 0;// resetting length of SelectBox
			
			for (var a = 0; a<pNArr.length;a++) {
				pNSelNameDiv.options[a] = new Option(pNArr[a]);
				pNSelNameDiv.selectedIndex = '1';
				pNSelNameDiv.addEventListener('click', function() {regPNDiv.value = pNSelNameDiv.options[pNSelNameDiv.selectedIndex].text;
																	AutoComplete(pNSelNameDiv.options[pNSelNameDiv.selectedIndex].text, true)}); 
																	
			}
			//pNArr = [];
		}*/
		}

		//Was this function ever called?
		/*
		function CompanyOptions2() {
		
		if (infoArrayInspTypeNoC.match(regNoCDiv.value)) {
				  var o = document.createElement('option');	
			o.innerHTML = infoArrayInspTypeNoC;
			s.appendChild(o);
		}
		
		}// end of CompanyOptions2
		
		*/

		function ProductOptions() {
			console.log('pNArrClip: ' + pNArrClip);
			console.log('Calling...');
			for (var a = 0; a < pNArrClip.length; a++) {
				console.log('Calling if...');
				if (pNArrClip[a].search(regPNDiv.value) != -1) {
					console.log('Products: ' + pNArrClip[a]);
					pNArray2.push(pNArrClip[a]);
				}
			}

			pNSelNameDiv.options.length = 0;// resetting length of SelectBox

			for (var a = 0; a < pNArray2.length; a++) {
				console.log('Working again...');
				pNSelNameDiv.options[a] = new Option(pNArray2[a]);
			}

			pNArray2 = [];

		}

		function Reflect() {

			// Reflect selected Name in the input box for posting;

			regNoCDiv.value = nocSelNameDiv[0].options[nocSelNameDiv[0].selectedIndex].text;
			AutoComplete(nocSelNameDiv[0].options[nocSelNameDiv[0].selectedIndex].text);

			/*
			if (vary=='PN') {
			   regPNDiv[0].value = pNSelNameDiv[0].options[pNSelNameDiv[0].selectedIndex].text;
			   AutoComplete(pNSelNameDiv[0].options[pNSelNameDiv[0].selectedIndex].text);
			}
		   */
		}

		function ProductReflect() {
			regPNDiv.value = pNSelNameDiv.options[pNSelNameDiv.selectedIndex].text;
			AutoComplete(pNSelNameDiv.options[pNSelNameDiv.selectedIndex].text, true);

		}

		function AutoComplete2(selVal, inptParam2) {
			var queryObj;
			latArr = []; //initializing array for holding and validating selected company lat and lng to empty


			var pNArr = [];
			//regLatGrab = document.getElementById('regLat');
			//regLngGrab = document.getElementById('regLong');

			//regCompAddressGrab = document.getElementById('regCompAddress');
			regPlaceDiv = document.getElementById('regPlace');
			regContPersDiv = document.getElementById('regContPers');
			regEmailDiv = document.getElementById('regEmail');
			regPNDiv = document.getElementById('regPN');
			//regDFDiv = document.getElementById('regDF');
			var regStDiv = document.getElementById('regSt');
			regPCDiv = document.getElementById('regPC');


			switch (selVal) {
				case 'Place':
					alert('Entered Place');
					queryObj = queryXMLPlac;
					break;
				case 'ProductClass':
					alert('Entered Product Class');
					queryObj = queryXMLPC;
					break;
				case 'Finds':
					queryObj = queryXMLFinds;
					break;
				case 'SubClass':
					queryObj = queryXMLSC;
					break;
				default:
					queryObj = queryXMLInspType;

			}


			for (var a = 0; a < queryObj.length; a++) {
				alert(queryObj[a].nodeName);
				if (queryObj[a].nodeName == selVal) {
					alert('Name of Class is: ' + queryObj[a].firstChild.data);
					pNArr.push(queryObj[a].firstChild.data);
					latArr.push(new google.maps.LatLng(queryXMLLat[a].firstChild.data, queryXMLLong[a].firstChild.data));
					//regLatGrab.value = infoArrayLat[a].firstChild.data;
					//regLngGrab.value = infoArrayLong[a].firstChild.data;
					//regCompAddressGrab.value = infoArrayCompAdd[a].firstChild.data;
					//regPlaceDiv.value = infoArrayPlac[a].firstChild.data;
					//regContPersDiv.value = infoArrayContPers[a].firstChild.data;
					//regEmailDiv.value = infoArrayEmail[a].firstChild.data;
					//regPNDiv.value = ''; //blanking it, in case another company is loaded


				}
			}

			console.log('LATLNG of Selected: ' + latArr);

			pNArrClip = NoCClip(pNArr);
			console.log('PNARRCLIP on clicking company ' + pNArrClip)
			for (var a = 0; a < pNArrClip.length; a++) {
				console.log(pNArrClip[a]);

			}



			//Autocompleting dependants on product

			//inptParam2.options = [];

			for (var a = 0; a < inptParam2.options.length; a++) { //initializing select element, emptying it.
				inptParam2.options[a] = null; //
			}


			for (var a = 0; a < pNArrClip.length; a++) {

				inptParam2.options[a] = new Option(pNArrClip[a]);

			}

			//console.log('Products associated with the company: ' + pNArr);

			//pNArrClip = NoCClip(pNArr);

			console.log('Clipped Products associated with the company: ' + pNArrClip);

			//CompanyOptions(pNArrClip)
		}


		function AutoComplete(nocAuto, vary) {
			latArr = []; //initializing array for holding and validating selected company lat and lng to empty

			console.log('This is company/Product name to generate products/Class, subclass etc. depending on value of vary, of course ' + nocAuto);

			var pNArr = [];
			//regLatGrab = document.getElementById('regLat');
			//regLngGrab = document.getElementById('regLong');

			regCompAddressGrab = document.getElementById('regCompAddress');
			regPlaceDiv = document.getElementById('regPlace');
			regContPersDiv = document.getElementById('regContPers');
			regEmailDiv = document.getElementById('regEmail');
			regPNDiv = document.getElementById('regPN');
			//regDFDiv = document.getElementById('regDF');
			var regStDiv = document.getElementById('regSt');
			regPCDiv = document.getElementById('regPC');

			if (!vary) {
				for (var a = 0; a < infoArrayInspType.length; a++) {

					if (infoArrayInspType[a].getAttribute('NoC') == nocAuto) {
						alert('Name of Product is: ' + infoArrayPN[a].firstChild.data);
						pNArr.push(infoArrayPN[a].firstChild.data);
						latArr.push(new google.maps.LatLng(infoArrayLat[a].firstChild.data, infoArrayLong[a].firstChild.data));
						//regLatGrab.value = infoArrayLat[a].firstChild.data;
						//regLngGrab.value = infoArrayLong[a].firstChild.data;
						regCompAddressGrab.value = infoArrayCompAdd[a].firstChild.data;
						regPlaceDiv.value = infoArrayPlac[a].firstChild.data;
						regContPersDiv.value = infoArrayContPers[a].firstChild.data;
						regEmailDiv.value = infoArrayEmail[a].firstChild.data;
						regPNDiv.value = ''; //blanking it, in case another company is loaded


					}
				}

				console.log('LATLNG of Selected: ' + latArr);


				polyObj.setPaths(CircleToPolygonFunction(geoMarkerOver.getPosition(), geoFreedom.getRadius(), 20));
				polyObj.setMap(mapOverDisp);
				alert(polyObj);
				alert(google.maps.geometry.poly.containsLocation(latArr[0], polyObj));
				if (google.maps.geometry.poly.containsLocation(latArr[0], polyObj)) {
					alert('Within range');
					regLatGrab.value = latArr[0].lat();
					regLngGrab.value = latArr[0].lng();
				} else {
					alert('Not within range!');
					regLatGrab.value = "Not within range";
					regLngGrab.value = "Not within range";
				}
				pNSelNameDiv.options.length = 0;// resetting length of SelectBox
				pNArrClip = NoCClip(pNArr);
				console.log('PNARRCLIP on clicking company ' + pNArrClip)
				for (var a = 0; a < pNArrClip.length; a++) {
					console.log('Working...');
					pNSelNameDiv.options[a] = new Option(pNArrClip[a]);
				}

			}

			//Autocompleting dependants on product
			if (vary == true) {
				for (var a = 0; a < infoArrayPN.length; a++) {
					if (infoArrayPN[a].firstChild.data == nocAuto) { // nocAuto representing product name in this instance actually
						console.log('Entered products auto?');
						regPCDiv.value = infoArrayPC[a].firstChild.data;
						regSCDiv.value = infoArraySC[a].firstChild.data;
						regGenDiv.value = infoArrayGen[a].firstChild.data;
						regIconDiv.value = infoArrayIcon[a].firstChild.data;

					}
				}
			}
			//console.log('Products associated with the company: ' + pNArr);

			//pNArrClip = NoCClip(pNArr);

			console.log('Clipped Products associated with the company: ' + pNArrClip);

			//CompanyOptions(pNArrClip)
		}



		function CircleToPolygonFunction(locationCenter, locationRadius, numPoints) {
			var pathsPoints = [], p = 360 / numPoints, d = 0;

			for (i = 0; i < numPoints; ++i, d += p) {
				pathsPoints.push(google.maps.geometry.spherical.computeOffset(locationCenter, locationRadius, d));
			}

			return pathsPoints;
		}



		function FindPlaces(pos, markerPos, rad, gmpScan) {
			FindPlacesAcceptableArr = [];
			console.log('This is rad: ' + rad);
			scanRadius = (rad) ? rad : 1000; //rad is radius used to recall this function on resizing the circle.  If !rad, the radius defaults to 1000meters
			console.log('I have been clicked to cater to initial inspections.');
			if (pos) {
				console.log(pos);
				var loc = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
			}

			if (markerPos) {
				var loc = markerPos;// a latlng object
			}


			var markerScan = new google.maps.Marker({ map: mapOverDisp, position: loc, title: 'Here' });
			markerScan.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
			if (gmpScan) {
				markerScan.addListener('click', function () { console.log('Finding other GMPs...') });

				console.log('Querying GMP Places...');

				console.log('Calling Ajax2...!');
				XMLHttpRequestObj7 = new XMLHttpRequest();
				XMLHttpRequestObj7.open('POST', 'SearchAjaxRandRInterfaceNoCGMP.php', true);
				XMLHttpRequestObj7.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj7.send();
				XMLHttpRequestObj7.onreadystatechange = function () {
					console.log('Request GMP back for search');
					console.log(XMLHttpRequestObj7.readyState);
					if (XMLHttpRequestObj7.readyState == 4 && XMLHttpRequestObj7.status == 200) {
						console.log('Successfully hit server');
						xmlAutoSearchComp = XMLHttpRequestObj7.responseXML;
						console.log(xmlAutoSearchComp);
						//SearchFuncAutoProcess(xmlAutoSearchComp);

						var gmpCompDet = xmlAutoSearchComp.getElementsByTagName('Det');
						console.log(gmpCompDet);
						var gmpCompPos;
						console.log(pos);
						var geoPosition2 = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);
						var gmpDist;

						for (var a = 0; a < gmpCompDet.length; a++) {
							gmpCompPos = new google.maps.LatLng(gmpCompDet[a].getElementsByTagName('Latitude')[0].firstChild.nodeValue, gmpCompDet[a].getElementsByTagName('Longitude')[0].firstChild.nodeValue);
							gmpDist = google.maps.geometry.spherical.computeDistanceBetween(geoPosition2, gmpCompPos);
							console.log(gmpCompPos);
							console.log(gmpDist);
							if (gmpDist < scanRadius) {
								console.log('Acceptable');
								console.log(gmpCompDet[a].getAttribute('NoC'));
								console.log('gmpDistance: ' + gmpDist);
								console.log('scanRadius: ' + scanRadius);
								FindPlacesAcceptableArr.push(gmpCompDet[a]);
							} else {
								console.log('Not acceptable');
								console.log(gmpCompDet[a].getAttribute('NoC'));
							}

						}
						console.log('Array for processing: ');
						console.log(FindPlacesAcceptableArr);

						FilterCompany(FindPlacesAcceptableArr, null);



						/*
						var dragendPos = new google.maps.LatLng(e.latLng.lat(), e.latLng.lng());
						var geoPosition2 =new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
						console.log('Stopped dragging marker at: ' + dragendPos);
						var dist = google.maps.geometry.spherical.computeDistanceBetween(geoPosition2,dragendPos);
						alert (dist);
						if (dist>position.coords.accuracy) {
							this.setPosition(geoPosition2);
						}
						regLatGrab.value=e.latLng.lat();
						regLngGrab.value=e.latLng.lng();
						*/
					}
				}




			}
			if (!rad) { //to prevent replotting of circle, thereby thickening of color. One will do.
				scanCirc = new google.maps.Circle({ map: mapOverDisp, center: loc, radius: 1000, fillColor: 'blue', editable: true });
			}

			scanCircArr.push(scanCirc); //for removal


			scanCirc.addListener('radius_changed', function (e) {

				FindPlaces(pos, markerPos, this.getRadius(), gmpScan);
				console.log(this.getRadius())
			});


			scanCirc.addListener('click', function (e) { scanCirc.setMap(null); FindPlaces(pos, markerPos); }); //to return to our default scan radius

			var scanService = new google.maps.places.PlacesService(mapOverDisp);
			var scanRequest = {
				location: loc,
				radius: scanRadius,
				types: ['gas_station', 'bakery', 'cemetry', 'grocery_or_supermarket']
			}
			console.log('About to enter callback');
			scanService.nearbySearch(scanRequest, callback);

			function callback(results, status) {
				if (status == google.maps.places.PlacesServiceStatus.OK) {
					console.log('Found!');
					console.log(pos);
					console.log(results);

					if (!markerPos) {
						console.log('Performing normal scan');
						MarkerPlaces(results, pos);
					} else {
						console.log('Performing remote scan');
						var posComposed = { coords: { latitude: markerPos.lat(), longitude: markerPos.lng() } } //creating a custom geoposition object. Note however that it has no timestamp
						MarkerPlaces(results, posComposed); //wow, it worked.
					}
				}

			}

		}



		function MarkerPlaces(results2, pos) {

			resultsArr = [], resultsArr2 = []; //initializing them on fresh scan action
			var scanInfo = new google.maps.InfoWindow();

			//console.log('Length of scanMarkersArr: ' + scanMarkersArr.length);
			for (var a = 0; a < scanMarkersArr.length; a++) {
				console.log('Removing scan markers...');
				scanMarkersArr[a].setMap(null);
			}

			scanMarkersArr = []; //initializing to zero;
			console.log(results2);

			for (var a = 0; a < results2.length; a++) {
				console.log('---------');
				console.log(results2[a].types);
				for (var b = 0; b < results2[a].types.length; b++) {
					resultsArr.push(results2[a].types[b]);
				}
				var marker = new google.maps.Marker({ map: mapOverDisp, position: results2[a].geometry.location, title: results2[a].types[0] }); //for title, types had to be zero, anything after threatens to hold 'establishment', the generic type we are not interested in.


				switch (marker.getTitle()) {
					case 'bakery':
						marker.setIcon('MapIcons/Bakery.png');
						break;
					case 'gas_station':
						marker.setIcon('MapIcons/gas_station.png');
						break;
					case 'cemetry':
						marker.setIcon('MapIcons/Cemetry2.png');
						break;
					case 'grocery_or_supermarket':
						marker.setIcon('MapIcons/supermarket.png');
						break;

				}

				marker.variousTypes = results2[a].types;
				console.log('The types in the markers: ' + marker.variousTypes);
				scanMarkersArr.push(marker); //for removing markers if radius of scan is shrinked.

				//console.log('Does this object property work? '+ scanMarkersArr[a].variousTypes);
				(function (a, marker) {
					google.maps.event.addListener(marker, 'click', function () {
						console.log('Should work now');

						for (var a = 0; a < renderArr.length; a++) { //removal of paths
							renderArr[a].setMap(null);
						}
						console.log('Clicked a scanned store');
						if (mapOverRender) { //checking if present, so that first click doesn't cause error in trying to remove what does not exist
							mapOverRender.setPanel(null); //clearing directions panel
						}
						console.log(pos);
						console.log('Should work 2');
						//console.log(results2[a].geometry.location);
						//Directions(pos, null, marker.getPosition());
						console.log('Got here2?');
						var scanButtons = '<div><input type="button" id = "scanMarkerButDirection" value="Direction"/><br/>' +
							'<input type="button" id = "scanMarkerBut2Direction" value="Direction(Detailed)"/>' +
							'<input type="button" id="scanMarkerDirectionDone" value="Directions Done">' +
							'<input type = "button" id = "Track" value = "Tracker">' +
							'<input type = "button" id = "EndTrack" value = " End Track"></div>';

						console.log('Got here3?');
						scanInfo.setContent(scanButtons);
						scanInfo.open(mapOverDisp, marker);


						var scanMarkerButDirectionGrab = document.getElementById('scanMarkerButDirection');
						var scanMarkerBut2DirectionGrab = document.getElementById('scanMarkerBut2Direction');
						var scanMarkerDirectionDoneGrab = document.getElementById('scanMarkerDirectionDone');

						var TrackGrab = document.getElementById('Track');
						var EndTrackGrab = document.getElementById('EndTrack');

						scanMarkerButDirectionGrab.addEventListener('click', function () { Directions(pos, null, marker.getPosition()); });
						scanMarkerBut2DirectionGrab.addEventListener('click', function () { Directions(pos, 'complex', marker.getPosition()); });
						scanMarkerDirectionDoneGrab.addEventListener('click', function () {//mapOverRender.setMap(null);
							console.log('Fonr with Directions render and panel');
							if (mapOverRender) { //checking if present, so that first click doesn't cause error in trying to remove what does not exist
								mapOverRender.setPanel(null); //clearing directions panel
							}
							for (var a = 0; a < renderArr.length; a++) {
								renderArr[a].setMap(null);
							}
							for (var a = 0; a < markerComplexArr.length; a++) { //if there are none, length=0, and it won't run
								markerComplexArr[a].setMap(null);
							}
							//txtDirectionsDiv.innerHTML='';
						});
						TrackGrab.addEventListener('click', function () {
							console.log('Clicked me!');
							console.log('This is the position: ' + marker.getPosition());
							GeolocateOver('Track', marker.getPosition());
						});

						EndTrackGrab.addEventListener('click', function () {
							console.log('End Tracking...!');
							navigator.geolocation.clearWatch(watchId);
							geoMarkerOver.setAnimation(null);
							//GeolocateOver('Track');
						});

					});

				})(a, marker);

			}
			resultsArr2 = ArrayFix(resultsArr);
			console.log('This is the ArrayFixed array BEFORE: ' + resultsArr);
			console.log('This is the ArrayFixed array AFTER: ' + resultsArr2);

			//IF THERE'S NEED TO REMOVE 'ESTABLISHMENTS';
			//resultsArr2.splice(resultsArr2.indexOf('establishment'), 1);//treating results2Arr2 to remove generic 'establishment'
			UIMaker(resultsArr2, 'scan'); //before passing it to UIMaker

		}



		function SurvMarkersDirectionsRemoval() {
			for (var a = 0; a < renderArr.length; a++) {
				renderArr[a].setMap(null);
			}

			for (var a = 0; a < scanMarkersArr.length; a++) {
				scanMarkersArr[a].setMap(null);
			}

			for (var a = 0; a < scanCircArr.length; a++) {
				scanCircArr[a].setMap(null); //removing the circle too!
			}

			for (var a = 0; a < markerComplexArr.length; a++) {
				markerComplexArr[a].setMap(null);
			}

			for (var a = 0; a < geoPositionArr.length; a++) {
				geoPositionArr[a].setMap(null);
			}
		}


		function FileInputFieldChanged() { //for multiple uploads; yet to be perfected

		}


		function AttachExtra() { // for single uploads
			//alert ('There');
			var fileEx = document.createElement('input');
			fileEx.setAttribute('type', 'file');
			fileEx.setAttribute('name', 'file[]');
			//answer this valid question
			var formUploadDiv = document.getElementById('formUpload'); //should we constantly keep 'var'ing this variable?
			formUploadDiv.appendChild(fileEx);

		}


		function ValidateForm() {

			if (!confirm('Have you reviwed information for accuracy?')) {
				return false;
			}
			else {
				var formUploadDiv = document.getElementById('formUpload');
				var inputEls = formUploadDiv.getElementsByTagName('input');
				var textAreaEls = formUploadDiv.getElementsByTagName('textarea');
				alert('Loaded!');
				alert(inputEls.length);
				alert('Text area ' + textAreaEls.length);

				for (var i = 0; i < inputEls.length; i++) {
					alert(inputEls[i].getAttribute('name'));

					if (inputEls[i].value == null || inputEls[i].value == "") {
						alert('Attend to ' + inputEls[i].name);
						inputEls[i].style.backgroundColor = "red";
						return false

					} else {
						alert('Goes');
					}
				}

				for (var i = 0; i < textAreaEls.length; i++) {
					alert(textAreaEls[i].getAttribute('name'));
					alert(textAreaEls[i].value);

					if (textAreaEls[i].value == null || textAreaEls[i].value == "") {
						alert('Attend to ' + textAreaEls[i].name);
						textAreaEls[i].style.backgroundColor = "red";
						return false

					} else {
						alert('Goes');
					}
				}
			}

		}

		function HalfQuery() {
			radioCounter = 0; //initializing at every instance of query
			//tableRowCounter = 0

			/*
			queryTable = document.createElement('Table');
			queryTable.className = 'backy';
			var qTableRow = queryTable.insertRow(0);
			var qTableCellIniDate =qTableRow.insertCell(0);
			var qTableCellFnlDate =qTableRow.insertCell(1);
			*/

			var inptInitDate = document.createElement('input');
			var inptFinalDate = document.createElement('input');
			inptInitDate.setAttribute('name', 'init');
			inptFinalDate.setAttribute('name', 'fnl');
			inptInitDate.setAttribute('type', 'date');
			inptFinalDate.setAttribute('type', 'date');
			inptFinalDate.addEventListener('change', function () { fetchWeeklyDataset(inptInitDate.value, inptFinalDate.value); });


			//qTableCellIniDate.appendChild(inptInitDate);
			//qTableCellFnlDate.appendChild(inptFinalDate);

			/*
			radioParamOr =document.createElement('input');
			radioParamAnd =document.createElement('input');
			radioParamOr.setAttribute('name','queryInptsDate');
			radioParamAnd.setAttribute('name','queryInptsDate');
			radioParamOr.setAttribute('type','radio');
			radioParamAnd.setAttribute('type','radio');
			radioParamOr.setAttribute('value','OR');
			radioParamAnd.setAttribute('value','AND');
			*/

			//document.queryForm.appendChild(queryTable);





			document.queryForm.appendChild(inptInitDate);
			document.queryForm.appendChild(inptFinalDate);


			//document.queryForm.appendChild(radioParamOr);
			//document.queryForm.appendChild(radioParamAnd);

			//radioParamOr.addEventListener ('click', function () {ContinueQuery();console.log(queryForm.elements.length)});
			//radioParamAnd.addEventListener ('click', function () {ContinueQuery();console.log(queryForm.elements.length)});

		}

		function fetchWeeklyDataset(inptInitDate, inptFinalDate) {

			console.log('Calling Query Interface!');
			var queryStr = "iniDate=" + inptInitDate + "&fnlDate=" + inptFinalDate;
			//var qInptGrab = document.getElementById('qInpt').value;
			//alert(qInptGrab);

			var XMLHttpRequestObj = new XMLHttpRequest();
			XMLHttpRequestObj.open('POST', 'query.php', true);
			XMLHttpRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

			XMLHttpRequestObj.onreadystatechange = function () {
				console.log('Changed!');
				if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {
					console.log('Coming...!');
					console.log(XMLHttpRequestObj.responseXML);
					queryXML = XMLHttpRequestObj.responseXML;
					alert(queryXML.getElementsByTagName('Det').length);

					queryXMLPlac = queryXML.getElementsByTagName('Place');
					queryXMLPC = queryXML.getElementsByTagName('ProductClass');
					queryXMLFinds = queryXML.getElementsByTagName('Finds');
					queryXMLSC = queryXML.getElementsByTagName('SubClass');
					queryXMLInspType = queryXML.getElementsByTagName('Det');
					queryXMLDF = queryXML.getElementsByTagName('DosageForm');

					queryXMLLat = queryXML.getElementsByTagName('Latitude');
					queryXMLLong = queryXML.getElementsByTagName('Longitude');

					//Adding the add parameter button
					var divParam = document.createElement('div');
					var addParams = document.createElement('button');
					addParams.innerHTML = 'Add Parameters';
					addParams.setAttribute('type', 'button');
					//addParams.setAttribute('value','Add Parameters');
					addParams.addEventListener('click', function () { ContinueQuery(); });
					document.queryForm.appendChild(addParams);

					queryButton = document.createElement('Button');
					queryButton.innerHTML = 'Query';
					queryButton.setAttribute('type', 'button');

					queryButton.addEventListener('click', function () { ElValCreate(); });

					document.queryForm.appendChild(queryButton);

				}
			}
			XMLHttpRequestObj.send(queryStr);
		}


		function ContinueQuery() {
			radioCounter = radioCounter + 1;
			//tableRowCounter = tableRowCounter + 1;

			//var qTableRow = queryTable.insertRow(tableRowCounter);

			var divForm = document.createElement('div');
			//divForm.className = "queryDivStyle";

			var breakLine = document.createElement('br');
			console.log('adding...');
			var selParam = document.createElement('select');
			var inptParam = document.createElement('select');
			selParam.setAttribute('name', 'selInputs' + radioCounter);
			inptParam.setAttribute('name', 'selInputsVal' + radioCounter);

			selParam.className = "selParamStyle";
			inptParam.className = "inptParamStyle";


			var delBut = document.createElement('button');
			delBut.className = "radParamStyle";
			//var radioParamAnd =document.createElement('input');



			var radioParamOrLab = document.createElement('label');
			var radioParamAndLab = document.createElement('label');

			radioParamOrLab.innerHTML = 'OR: ';
			radioParamAndLab.innerHTML = 'AND: ';

			radioParamOrLab.className = "radParamStyle";
			radioParamAndLab.className = "radParamStyle";

			radioParamOr = document.createElement('input');
			radioParamAnd = document.createElement('input');
			radioParamOr.setAttribute('type', 'radio');
			radioParamAnd.setAttribute('type', 'radio');
			radioParamOr.setAttribute('value', 'OR');
			radioParamAnd.setAttribute('value', 'AND');

			radioParamOr.className = "radParamStyle";
			radioParamAnd.className = "radParamStyle";

			radioParamOr.addEventListener('click', function () { ContinueQuery(); console.log(this.name); console.log(queryForm.elements.length) });
			radioParamAnd.addEventListener('click', function () { ContinueQuery(); console.log(this.name); console.log(queryForm.elements.length) });


			delBut.addEventListener('click', function () { if (queryForm.hasChildNodes()) queryForm.removeChild(this.parentNode) });
			radioParamAnd.setAttribute('type', 'radio');

			delBut.setAttribute('type', 'button'); //type 'button' will now submit.  Default is 'submit'
			//delBut.setAttribute('value','Delete');
			delBut.innerHTML = "Delete";
			radioParamOr.setAttribute('type', 'radio');
			//radioParamAnd.setAttribute('name', 'queryInputs');
			radioParamOr.setAttribute('name', 'queryInputsRad' + radioCounter);
			radioParamAnd.setAttribute('name', 'queryInputsRad' + radioCounter);

			//selParam.options = [new Option('Place'), new Option('Finds'), new Option ('ProductClass')];
			selParam.options[0] = new Option('State');
			selParam.options[0].value = 'Place';
			selParam.options[1] = new Option('Product Class');
			selParam.options[1].value = 'ProductClass';
			selParam.options[2] = new Option('Sub Class');
			selParam.options[2].value = 'SubClass';
			selParam.options[3] = new Option('Findings');
			selParam.options[3].value = 'Finds';


			(function (inptParam) {
				selParam.addEventListener('change', function () { alert(this.options[this.selectedIndex].value); AutoComplete2(this.options[this.selectedIndex].value, inptParam) });
			})(inptParam);


			divForm.appendChild(selParam);
			divForm.appendChild(inptParam);
			divForm.appendChild(radioParamOrLab);
			divForm.appendChild(radioParamOr);
			divForm.appendChild(radioParamAndLab);
			divForm.appendChild(radioParamAnd);
			divForm.appendChild(delBut);
			divForm.appendChild(breakLine);

			document.queryForm.insertBefore(divForm, queryButton);

			console.log('Changed!');

		}


		function ElVal(nameOfEl, val) {
			this.nameOfEl = nameOfEl;
			this.val = val;


		}

		function ElValCreate() {
			var queryElArr = [];//array to hold query queryEl objects.
			var queryElArr2 = [];//array to hold query queryEl objects.


			//Removing the Div
			if (queryTabOverGrab.children.length) { //if not undefined
				console.log('Query Tab HAS ELEMENTS!');

				//document.getElementsByTagName('body')[0].removeChild(queryTabOverGrab);
				//document.body.queryTabOverGrab.removeChild(queryTab);
				queryTabOverGrab.removeChild(queryTabOverSubGrab);
				//queryTabOverGrab.removeChild(queryTab);
			}

			for (var a = 0; a < queryForm.elements.length; a++) {
				//var queryEl= new ElVal(queryForm.elements[a].name, queryForm.elements[a].value,queryXML);
				if (queryForm.elements[a].nodeName == 'INPUT' || queryForm.elements[a].nodeName == 'SELECT') {
					if ((queryForm.elements[a].type == 'radio' && !queryForm.elements[a].checked) || (queryForm.elements[a].type == 'Date')) { // specifically for radio buttons
						continue;
					}

					//console.log(queryForm.elements[a].name, queryForm.elements[a].value);
					console.log('before...');
					//queryElArr.push(queryEl[queryForm.elements[a].name]= queryForm.elements[a].value);
					queryElArr.push(new ElVal(queryForm.elements[a].name, queryForm.elements[a].value));
					//queryElArr2.push(queryForm.elements[a].value);
					//pNSelNameDiv.options[pNSelNameDiv.selectedIndex].text
					console.log('after');

				}

			}
			//var what = queryEl.xmlProcess(queryXML);//we could perhaps pass the xml to a function of this object, and watch it peform some operation.
			//FilterQuery(queryEL, queryXML);
			console.log(queryElArr);
			console.log(queryElArr2);
			//what = queryEl;
			//console.log(what);

			resultQuery = FilterQuery(queryElArr, queryXML);


			console.log('Issuing query obj...');
			console.log(resultQuery);

			sortedResultQuery = ArrayFixQuery(resultQuery);
			console.log(sortedResultQuery);

			queryTab = QueryTableDisplay(sortedResultQuery);


			console.log('HAS NO ELEMENTS!');

			queryTabOverSubGrab = document.createElement('div');

			var removeTabTab = document.createElement('input');
			removeTabTab.setAttribute('type', 'button');
			removeTabTab.setAttribute('value', 'Done');
			removeTabTab.addEventListener('click', function () { this.parentNode.parentNode.removeChild(this.parentNode); });

			var removeTabTab2 = document.createElement('input');
			removeTabTab2.setAttribute('type', 'button');
			removeTabTab2.setAttribute('value', 'Done');
			removeTabTab2.addEventListener('click', function () { this.parentNode.parentNode.removeChild(this.parentNode); });

			queryTabOverSubGrab.appendChild(queryTab);
			queryTabOverSubGrab.insertBefore(removeTabTab, queryTab);
			queryTabOverSubGrab.appendChild(queryTab);
			queryTabOverSubGrab.appendChild(removeTabTab2);
			queryTabOverGrab.appendChild(queryTabOverSubGrab);
			//document.body.appendChild(queryTabOverGrab);
			//document.getElementsByTagName('body')[0].appendChild(queryTabOverGrab);


		}


		function FilterQuery(queryElArr, queryXML2) {
			console.log('Inside FilterQuery');
			var XMLArr = [];
			var queryObj;
			var valOfEl;
			var andOrBool = false;


			for (var a = 0; a < queryElArr.length; a += 2) {
				console.log('Entered this Switch');
				console.log(queryElArr[a]);
				if (queryElArr[a + 1]) {
					console.log(queryElArr[a + 1].val);
				}

				switch (queryElArr[a].val) {

					case 'Place':
						console.log('ENTERED PLACE');
						valOfEl = queryElArr[a + 1].val;
						if (andOrBool == false) { // OR
							queryObj = queryXMLPlac;
						} else { //if true, that is, AND
							queryObj = XMLArrProcess(XMLArr, queryElArr[a].val, valOfEl);
						}

						console.log('This is the El: ' + queryElArr[a]);
						console.log('This is value of El: ' + valOfEl);
						break;
					case 'ProductClass':
						console.log('ENTERED PRODUCT CLASS');
						valOfEl = queryElArr[a + 1].val;
						if (andOrBool == false) { // OR
							queryObj = queryXMLPC;
						} else { //if true, that is, AND
							queryObj = XMLArrProcess(XMLArr, queryElArr[a].val, valOfEl);
						}

						console.log('This is the El: ' + queryElArr[a]);
						console.log('This is value of El: ' + valOfEl);
						break;
					case 'Finds':
						console.log('ENTERED FINDS');
						valOfEl = queryElArr[a + 1].val;
						if (andOrBool == false) { // OR
							queryObj = queryXMLFinds;
						} else { //if true, that is, AND
							queryObj = XMLArrProcess(XMLArr, queryElArr[a].val, valOfEl);
						}

						console.log('This is the El: ' + queryElArr[a]);
						console.log('This is value of El: ' + valOfEl);

						break;
					case 'SubClass':
						console.log('ENTERED SUBCLASS');
						valOfEl = queryElArr[a + 1].val;
						if (andOrBool == false) { // OR
							queryObj = queryXMLSC;
						} else { //if true, that is, AND
							queryObj = XMLArrProcess(XMLArr, queryElArr[a].val, valOfEl);
						}

						console.log('This is the El: ' + queryElArr[a]);
						console.log('This is value of El: ' + valOfEl);
						break;
					case 'OR':
						console.log('ENTERED OR');
						a = a - 1;
						andOrBool = false;
						continue;
						break;
					case 'AND':
						console.log('ENTERED AND');
						a = a - 1;
						andOrBool = true;
						continue;
						break;
					default:
						console.log('ENTERED DEFAULT');
						queryObj = queryXMLPlac;
						valOfEl = queryElArr[a + 1].val;

				}

				if (!andOrBool) {
					for (var b = 0; b < queryXML2.getElementsByTagName('Det').length; b++) {
						console.log('Entered place!');
						console.log('This is value to compare with: ' + valOfEl);
						console.log('This is obj to compare with: ' + queryObj[b].firstChild.data);
						if (valOfEl == queryObj[b].firstChild.data) {
							console.log('Found');
							XMLArr.push(queryXML2.getElementsByTagName('Det')[b]);
						}
					}
				} else {
					XMLArr = queryObj;
				}

			} // end of 'for'
			return XMLArr;
		} //end of 'function'


		function XMLArrProcess(XMLArr, el, valOfEl) {
			var andArr = [];
			console.log(XMLArr);
			console.log(el);
			for (var a = 0; a < XMLArr.length; a++) {
				if (XMLArr[a].getElementsByTagName(el)[0].firstChild.data == valOfEl) {
					andArr.push(XMLArr[a]);
				}
			}
			console.log(andArr);
			return andArr;
		}


		function ArrayFixQuery(arr, sortParameter) {
			console.log('Before Sorting (next line)');
			console.log(arr);

			console.log('This is sortParameter ' + sortParameter);

			var sortParameter2 = (sortParameter == null) ? 'CompanyAddress' : sortParameter;
			console.log('This is sortParameter2 ' + sortParameter2);

			arrUnsort = [];
			console.log('Length of arr ' + arr.length);
			var arr2 = [];
			//Sorting, alphabetical order

			arr.sort(CompQueryID);
			//arr.sort(CompQueryID);

			console.log('After sorting(next line)');
			console.log(arr);


			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length; a++) {
				if (arr[a] == arr[a + 1]) {
					(arr2[arr[a]])++;
					//put the label counter here
					delete arr[a];
				}
			}
			console.log('This is the array after deleting ' + arr);

			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}

			console.log('This is the array after clipping ' + arr2);

			return arr2;

			function CompQueryID(a, b) {
				console.log('This is sortParameter2 in function ' + sortParameter2);
				console.log('This is Det ' + a.getAttribute('NoC'));
				//console.log('This is the Det '+ a.getElementsByTagName('Det')[0]);

				if (sortParameter == 'NoC' || sortParameter == 'InspType') {
					return (a.getAttribute(sortParameter)).localeCompare(b.getAttribute(sortParameter));
				} else {
					return (a.getElementsByTagName(sortParameter2)[0].firstChild.data).localeCompare(b.getElementsByTagName(sortParameter2)[0].firstChild.data);
				}
			}


		}


		function ArrayFixQueryChartChange(arr, sortParameter2) {

			var inspTypeTemp;

			console.log('Before Sorting (next line)');
			console.log(arr);
			console.log(arr);

			//console.log('This is sortParameter ' + sortParameter);

			//var sortParameter2 = (sortParameter==null)?'CompanyAddress':sortParameter;
			//console.log('This is sortParameter2 ' + sortParameter2);

			arrUnsort = [];
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			//var arr2 = [];

			//Sorting, alphabetical order
			arr.sort(CompQueryID);

			console.log('After sorting(next line)');

			console.log(arr);

			var arrInitialized = (sortParameter2 == 'InspType' || sortParameter2 == 'NoC') ? InitializeAttribute() : InitializeFirstChild();


			function InitializeAttribute() {
				console.log('INITIALIZING ATTRIBUTE...Here');
				var arr2 = [];
				for (var a = 0; a < arr.length; a++) {
					if (arr[a].getAttribute(sortParameter2) != (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getAttribute(sortParameter2) : '123456')) {
						console.log('CHANGE IN: ' + arr[a].getAttribute(sortParameter2));
						arr2[arr[a].getAttribute(sortParameter2)] = 1;
						console.log('Values: ' + arr2[arr[a].getAttribute(sortParameter2)]);
						console.log('Values for production ' + arr2[arr[a].getAttribute(sortParameter2)]);
					}
					console.log(arr[a].getAttribute(sortParameter2));
				}

				return arr2;
			}


			function InitializeFirstChild() {
				console.log('INITIALIZING FIRSTCHILD...Here');
				var arr2 = [];
				for (var a = 0; a < arr.length; a++) {
					if ((arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data) != (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getElementsByTagName(sortParameter2)[0].firstChild.data : '123456')) {
						console.log('CHANGE IN: ' + arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data);
						arr2[arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data] = 1;
						//console.log('Values: ' + arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data]);
						console.log('Values for sortParameter2: ' + arr2[arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data]);
					}

					console.log('Values for sortParameter2: ' + arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data + " : " + arr2[arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data]);
					console.log(arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data);
				}
				return arr2;
			}

			var arrIncrement = (sortParameter2 == 'InspType' || sortParameter2 == 'NoC') ? IncrementAttribute() : IncrementFirstChild();

			function IncrementAttribute() {
				//Assigning the number on the property and deleting
				for (var a = 0; a < arr.length; a++) {
					if (arr[a].getAttribute(sortParameter2) == (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getAttribute(sortParameter2) : '123456')) {
						(arrInitialized[arr[a].getAttribute(sortParameter2)])++;
						console.log('Incremented value: ' + (arrInitialized[arr[a].getAttribute(sortParameter2)]));
						//put the label counter here
						delete arr[a];
					}
				}
				console.log('This is the array after deleting ' + arr);
				return arrInitialized;
			}

			function IncrementFirstChild() {
				for (var a = 0; a < arr.length; a++) {
					if (arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data == (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getElementsByTagName(sortParameter2)[0].firstChild.data : '123456')) {
						(arrInitialized[arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data])++;
						console.log('Incremented value: ' + (arrInitialized[arr[a].getElementsByTagName(sortParameter2)[0].firstChild.data]));
						//put the label counter here
						delete arr[a];
					}
				}
				console.log('This is the array after deleting ' + arr);
				return arrInitialized;
			}


			var arrClipped = (sortParameter2 == 'NoC' || sortParameter2 == 'InspType') ? ClippedAttribute() : ClippedFirstChild();
			//clipping

			function ClippedAttribute() {
				for (var a = 0; a < arr.length; a++) {
					if (arr[a]) { //if it is not = to undefined, or null.
						arrIncrement.push(arr[a]);
						console.log('Adding...' + a);
					}

					console.log('LENGTH of arrIncrement ' + arrIncrement.length);
				}
				return arrIncrement;
			}

			//clipping
			function ClippedFirstChild() {
				for (var a = 0; a < arr.length; a++) {
					if (arr[a]) { //if it is not = to undefined, or null.
						arrIncrement.push(arr[a]);
						console.log('Adding...' + a);
					}

					console.log('LENGTH of arrIncrement ' + arrIncrement.length);
				}

				return arrIncrement;
			}


			console.log('This is the length of array after clipping ' + arrClipped.length);
			console.log(arrClipped);
			console.log('This is the array after clipping ' + arrClipped[0]);
			console.log(arrClipped);

			return arrClipped;
			/*
			function CompQueryID (a,b) {
					return (a.getAttribute(sortParameter2)).localeCompare(b.getAttribute(sortParameter2));
			}
			
			function CompQueryID2 (a,b) {
					return (a.getElementsByTagName('Finds')[0].firstChild.data).localeCompare(b.getElementsByTagName('Finds')[0].firstChild.data);
			}
			*/
			function CompQueryID(a, b) {
				if (sortParameter2 == 'NoC' || sortParameter2 == 'InspType') {
					return (a.getAttribute(sortParameter2)).localeCompare(b.getAttribute(sortParameter2));
				} else {
					return (a.getElementsByTagName(sortParameter2)[0].firstChild.data).localeCompare(b.getElementsByTagName(sortParameter2)[0].firstChild.data);
				}
			}
		}


		function ArrayFixQueryChart(arr) {

			var inspTypeTemp;

			console.log('Before Sorting (next line)');
			console.log(arr);
			//console.log(arr);

			//console.log('This is sortParameter ' + sortParameter);

			//var sortParameter2 = (sortParameter==null)?'CompanyAddress':sortParameter;
			//console.log('This is sortParameter2 ' + sortParameter2);

			arrUnsort = [];
			console.log('Length of arr ' + arr.length);
			console.log(arr);
			var arr2 = [];

			//Sorting, alphabetical order
			arr.sort(CompQueryID);

			console.log('After sorting(next line)');

			console.log(arr);

			for (var a = 0; a < arr.length; a++) {
				if (arr[a].getAttribute('InspType') != (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getAttribute('InspType') : '123456')) {
					console.log('CHANGE IN: ' + arr[a].getAttribute('InspType'));
					arr2[arr[a].getAttribute('InspType')] = 1;
					console.log('Values: ' + arr2[arr[a].getAttribute('InspType')]);
					console.log('Values for Inspection ' + arr2[arr[a].getAttribute('InspType')]);
				}
				console.log(arr[a].getAttribute('InspType'));
			}
			/*	
				arr.sort(CompQueryID2);
				console.log(arr);
				for (var a=0;a<arr.length;a++) {
						if ((arr[a].getElementsByTagName('Finds')[0].firstChild.data) != (inspTypeTemp = (arr[a+1])? arr[a+1].getElementsByTagName('Finds')[0].firstChild.data : '123456')) {
							console.log('CHANGE IN: ' + arr[a].getElementsByTagName('Finds')[0].firstChild.data);
							arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data] = 1;
							//console.log('Values: ' + arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data]);
							console.log('Values for Finds: '+ arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data]);
						} 
						
						console.log('Values for Finds: '+ arr[a].getElementsByTagName('Finds')[0].firstChild.data + " : " + arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data]);
						console.log(arr[a].getElementsByTagName('Finds')[0].firstChild.data);
				}
				
			*/


			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length; a++) {
				if (arr[a].getAttribute('InspType') == (inspTypeTemp = (arr[a + 1]) ? arr[a + 1].getAttribute('InspType') : '123456')) {
					(arr2[arr[a].getAttribute('InspType')])++;
					console.log('Incremented value: ' + (arr2[arr[a].getAttribute('InspType')]));
					//put the label counter here
					delete arr[a];
				}
			}
			console.log('This is the array after deleting ' + arr);



			/*
			for (var a=0;a<arr.length;a++) {
				if (arr[a].getElementsByTagName('Finds')[0].firstChild.data==(inspTypeTemp = (arr[a+1])?arr[a+1].getElementsByTagName('Finds')[0].firstChild.data: '123456')) {
				(arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data])++;
				console.log('Incremented value: ' + (arr2[arr[a].getElementsByTagName('Finds')[0].firstChild.data]));
				//put the label counter here
					delete arr[a];
				}
			}
			console.log('This is the array after deleting ' + arr);
			
			*/

			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
					console.log('Adding...' + a);
				}

				console.log('LENGTH of arr2 ' + arr2.length);
			}

			/*	
				//clipping
				for (var a=0;a<arr.length;a++) {
					if (arr[a]) { //if it is not = to undefined, or null.
						arr2.push(arr[a]);
						console.log('Adding...' + a);
					}
					
					console.log('LENGTH of arr2 ' + arr2.length);
				}
			*/

			console.log('This is the length of array after clipping ' + arr2.length);
			console.log(arr2);
			console.log('This is the array after clipping ' + arr2[0]);
			console.log(arr2);

			return arr2;

			function CompQueryID(a, b) {
				return (a.getAttribute('InspType')).localeCompare(b.getAttribute('InspType'));
			}

			function CompQueryID2(a, b) {
				return (a.getElementsByTagName('Finds')[0].firstChild.data).localeCompare(b.getElementsByTagName('Finds')[0].firstChild.data);
			}
		}



		function QueryTableDisplay(QueryResults) {
			console.log('Number of child nodes ' + QueryResults[0].childNodes.length);
			console.log('Number of attributes ' + QueryResults[0].attributes.length);
			var queryTableDisplay = document.createElement('Table');
			queryTableDisplay.setAttribute('id', 'queryTabDispId');

			//Defining header
			var qTDispTH = queryTableDisplay.createTHead();
			var qTDispTHRow = qTDispTH.insertRow(-1);
			for (var b = 0; b < QueryResults[0].attributes.length; b++) {
				if (QueryResults[0].attributes[b].nodeName != 'Seen') {
					var qTDispTHCell = qTDispTHRow.insertCell(-1);
					qTDispTHCell.innerHTML = QueryResults[0].attributes[b].nodeName;
					qTDispTHCell.addEventListener('click', function () { SortTable(this.innerHTML); });
				}
			}



			for (var b = 0; b < QueryResults[0].childNodes.length; b++) { //to skip the first node, which is a whitespace text
				if (QueryResults[0].childNodes[b].nodeType == 1) {

					if (QueryResults[0].childNodes[b].nodeName != ('Latitude') && QueryResults[0].childNodes[b].nodeName != ('Longitude') && QueryResults[0].childNodes[b].nodeName != ('Push') && QueryResults[0].childNodes[b].nodeName != ('Icon') && QueryResults[0].childNodes[b].nodeName != ('Issued') && QueryResults[0].childNodes[b].nodeName != ('InspID') && QueryResults[0].childNodes[b].nodeName != ('Result')) {
						var qTDispTHCell = qTDispTHRow.insertCell(-1);
						qTDispTHCell.innerHTML = QueryResults[0].childNodes[b].nodeName;
						//qTDispTHCell.addEventListener('click', function() {console.log('You clicked me!')});
						console.log('...by ' + QueryResults[0].childNodes[b].nodeName)

						//(function (b) {
						qTDispTHCell.addEventListener('click', function () {
							console.log(this.innerHTML);
							SortTable(this.innerHTML);
							//ArrayFixQuery(resultQuery,this.innerHTML);
						});
						//}) (b);
					}
				}
			} //header definition complete


			for (var a = 0; a < QueryResults.length; a++) {
				var qTDispRow = queryTableDisplay.insertRow(-1);

				(function (a, QueryResults) {
					qTDispRow.addEventListener('click', function () {
						console.log(QueryResults[a]);
						var rowNoC = QueryResults[a].getAttribute('NoC');
						console.log('This is rowNoC ' + QueryResults[a].getAttribute('NoC'));
						var tableCoords = new google.maps.LatLng(QueryResults[a].getElementsByTagName('Latitude')[0].firstChild.data, QueryResults[a].getElementsByTagName('Longitude')[0].firstChild.data);
						var tableMarker = new google.maps.Marker({ map: mapOverDisp, position: tableCoords, draggable: true });

						google.maps.event.addListener(tableMarker, 'click', function () {
							if (!MEInfo) {
								console.log(MEInfo);
								MEInfo = new google.maps.InfoWindow();
								console.log(MEInfo);
							}

							MEInfo.setContent(MEInterface()); // MEInterface() returns a Div node
							MEInfo.open(mapOverDisp, tableMarker);
							console.log('Clicked me!');
						});
					});
					//qTDispRow.addEventListener('mouseover', function () {this.className = 'lig';});
				})(a, QueryResults);

				//qTDispRow.addEventListener('mouseout', function () {this.className = 'nolig';});

				var alternatingRowColor = (a % 2 == 0) ? 'alt' : 'alt2';
				qTDispRow.className = alternatingRowColor;


				for (var b = 0; b < QueryResults[a].attributes.length; b++) {
					if (QueryResults[a].attributes[b].nodeName != 'Seen') {
						//var qTDispTHCell = qTDispTHRow.insertCell(-1);
						var qTDispCell = qTDispRow.insertCell(-1);
						qTDispCell.innerHTML = QueryResults[a].attributes[b].value;
						//qTDispTHCell.innerHTML = QueryResults[a].attributes[b].nodeName;
					}
				}

				for (var b = 0; b < QueryResults[a].childNodes.length; b++) { //to skip the first node, which is a whitespace text
					console.log(QueryResults[a]);
					console.log(QueryResults[a].childNodes[1]);
					console.log(QueryResults[a].childNodes[1].firstChild.data);
					console.log(QueryResults[a].childNodes[1].nodeName);
					console.log('Rowing the firstchilds...');
					console.log(QueryResults[a].childNodes[b].nodeType);
					if (QueryResults[a].childNodes[b].nodeType == 1) {

						if (QueryResults[a].childNodes[b].nodeName != ('Latitude') && QueryResults[a].childNodes[b].nodeName != ('Longitude') && QueryResults[a].childNodes[b].nodeName != ('Push') && QueryResults[a].childNodes[b].nodeName != ('Icon') && QueryResults[a].childNodes[b].nodeName != ('Issued') && QueryResults[a].childNodes[b].nodeName != ('InspID') && QueryResults[a].childNodes[b].nodeName != ('Result')) {
							console.log(QueryResults[a].childNodes[b].nodeName);
							console.log('Entered!');
							var qTDispCell = qTDispRow.insertCell(-1);
							//var qTDispTHCell = qTDispTHRow.insertCell(-1);
							qTDispCell.innerHTML = QueryResults[a].childNodes[b].firstChild.data;
							//qTDispTHCell.innerHTML = QueryResults[a].childNodes[b].firstChild.data;
						}
					}
				}
			}
			return queryTableDisplay;
		}


		function SortTable(sortCriteria) {
			if (queryTabOverGrab.children.length) { //if not undefined
				console.log('Query Tab HAS ELEMENTS!');

				queryTabOverGrab.removeChild(queryTabOverSubGrab);
			}




			sortedResultQuery = ArrayFixQuery(resultQuery, sortCriteria);
			console.log(sortedResultQuery);

			queryTab = QueryTableDisplay(sortedResultQuery);


			console.log('HAS NO ELEMENTS!');

			queryTabOverSubGrab = document.createElement('div');

			var removeTabTab = document.createElement('input');
			removeTabTab.setAttribute('type', 'button');
			removeTabTab.setAttribute('value', 'Done');
			removeTabTab.addEventListener('click', function () { this.parentNode.parentNode.removeChild(this.parentNode); });

			var removeTabTab2 = document.createElement('input');
			removeTabTab2.setAttribute('type', 'button');
			removeTabTab2.setAttribute('value', 'Done');
			removeTabTab2.addEventListener('click', function () { this.parentNode.parentNode.removeChild(this.parentNode); });

			queryTabOverSubGrab.appendChild(queryTab);
			queryTabOverSubGrab.insertBefore(removeTabTab, queryTab);
			queryTabOverSubGrab.appendChild(queryTab);
			queryTabOverSubGrab.appendChild(removeTabTab2);
			queryTabOverGrab.appendChild(queryTabOverSubGrab);
			//document.body.appendChild(queryTabOverGrab);
			//document.getElementsByTagName('body')[0].appendChild(queryTabOverGrab);
		}


		function SendSurvery() {

			if (survDivGrab.children.length > 1) {
				console.log('Has Children...');
				console.log(survDivGrab.children.length);
				console.log(survDivGrab.children[0].nodeType);
				while (survDivGrab.children.length > 1) { //fancy to remove all the children, however their number.
					console.log('Name of element to be removed: ' + survDivGrab.lastChild.nodeName);
					if (survDivGrab.lastChild.nodeName == 'DIV') {
						survDivGrab.lastChild.innerHTML = "";
					}
					survDivGrab.removeChild(survDivGrab.lastChild);
				}
			}

			console.log('This thing has changed!');
			console.log(surveySelGrab.value);
			var XMLHttpRequestObj = new XMLHttpRequest();
			console.log(XMLHttpRequestObj);

			XMLHttpRequestObj.open('POST', 'Survey.php', true);

			XMLHttpRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			XMLHttpRequestObj.onreadystatechange = function () {
				if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {
					console.log('Received by server1...');
					console.log(XMLHttpRequestObj.responseXML);
					var survXML = XMLHttpRequestObj.responseXML;
					var survDet = survXML.getElementsByTagName('Det');
					console.log(survDet.length);
					console.log(survDet);

					console.log('Creating divs...')


					survRadioDivs = document.createElement('div');
					var radSurvSC = document.createElement('input');
					var radSurvGen = document.createElement('input');
					var radTA = document.createElement('input');

					var radSurvSCLab = document.createElement('label');
					var radSurvGenLab = document.createElement('label');
					var radTALab = document.createElement('label');

					radSurvSCLab.innerHTML = "SubClass: ";
					radSurvGenLab.innerHTML = "Generic:";
					radTALab.innerHTML = "Add Survey";

					radSurvSC.setAttribute('type', 'radio');
					radSurvGen.setAttribute('type', 'radio');
					radTA.setAttribute('type', 'radio');

					radSurvSC.setAttribute('name', 'survSC');
					radSurvGen.setAttribute('name', 'survSC');
					radTA.setAttribute('name', 'survSC');

					radSurvSC.setAttribute('value', 'SubClass');
					radSurvGen.setAttribute('value', 'Generic');
					radTALab.setAttribute('value', 'TextArea');

					radSurvSC.addEventListener('click', function () { PopSurveyDualSel(this, survDet) });
					radSurvGen.addEventListener('click', function () { PopSurveyDualSel(this, survDet) });
					radTA.addEventListener('click', function () { AddTABut(this); });

					survRadioDivs.appendChild(radSurvSCLab);
					survRadioDivs.appendChild(radSurvSC);
					survRadioDivs.appendChild(radSurvGenLab);
					survRadioDivs.appendChild(radSurvGen);
					survRadioDivs.appendChild(radTALab);
					survRadioDivs.appendChild(radTA);

					survDivGrab.appendChild(survRadioDivs);

				}
			}

			//console.log('This is value of radSurvSC: ' + radSurvSCGrab.value);


			XMLHttpRequestObj.send(surveySel.name + '=' + surveySelGrab.value);

		}


		function PopSurveyDualSel(radio2, survDet2) {

			var survPC = [], survSC = [], survGen = [];
			var survDualArr = []; //to hold either survSC or survGen, depending on a ternary

			for (var a = 0; a < survDet2.length; a++) {
				survPC.push(survDet2[a].getAttribute('ProductClass'));
				survSC.push(survDet2[a].getAttribute('SubClass'));
				survGen.push(survDet2[a].getAttribute('Generic'));
				//SurvSort();
			}

			console.log(radio2.checked);
			console.log(radio2.value);

			if (radio2.value == 'SubClass') {
				var survSC2 = ArrayFix(survSC);
				console.log(survSC2);
				console.log('survSC2 Length: ' + survSC);
				survDualArr = survSC2;
			} else if (radio2.value == 'Generic') {
				var survGen2 = ArrayFix(survGen);
				console.log(survGen2);
				console.log('survGen2 Length: ' + survGen2);
				survDualArr = survGen2;
			}


			if (survDivGrab.children.length > 2) {
				console.log(survDivGrab.children.length);
				console.log('has select element');

				if (survDivGrab.contains(surveyDualSel)) {
					console.log('Contains');
					survDivGrab.removeChild(surveyDualSel);
				} else {
					console.log('Not contains');
				}

			}

			surveyDualSel = document.createElement('select'); //Do not var this again.
			surveyDualSel.setAttribute('name', 'surveyDuo');
			//surveyDualSel.addEventListener('change', function () {survDivGrab.appendChild(surveyBr);survDivGrab.appendChild(surveyTA); survDivGrab.appendChild(surveyBut);});

			surveyDualSel.addEventListener('change', function () { AddTABut(this); });

			console.log('True or False: ' + survDivGrab.surveyTADiv);


			if (surveyTADiv.children.length) {
				survDivGrab.insertBefore(surveyDualSel, surveyTADiv);
			} else {
				survDivGrab.appendChild(surveyDualSel);
			}

			for (var a = 0; a < survDualArr.length; a++) {
				surveyDualSel.options[a] = new Option(survDualArr[a]);
				surveyDualSel.options[a].value = survDualArr[a];
			}

		}


		function AddTABut(this2) {

			if ((this2.nodeName != 'SELECT') && (survDivGrab.contains(surveyDualSel))) {
				console.log('Contains');
				survDivGrab.removeChild(surveyDualSel);
			} else {
				console.log('Not Select, so selectDualSel(for SubClass or Generic, remains on screen');
			}


			if (surveyTADiv.children.length) {
				console.log('Has Children; Length of TA Div: ' + surveyTADiv.children.length);
				console.log('Adding...!');
				survDivGrab.removeChild(surveyTADiv);
			} else {
				console.log('Length of TA Div: ' + surveyTADiv.children.length);
			}

			surveyTADiv = document.createElement('div');
			surveyTADiv.setAttribute('name', 'TADiv');

			surveyTA = document.createElement('textarea');
			surveyInptSubj = document.createElement('input');
			surveyInptBr = document.createElement('br');
			surveyInptSubj.setAttribute('type', 'text');
			surveyInptSubj.setAttribute('name', 'subjectInpt');
			surveyInptSubj.setAttribute('placeholder', 'Input Subject of mail');
			surveyInptSubj.setAttribute('required', 'true');
			surveyBr = document.createElement('br');
			surveyTA.setAttribute('name', 'TA');
			surveyTA.setAttribute('placeholder', 'Paste Survey Form URL');
			surveyBut = document.createElement('Button');
			surveyBut.setAttribute('name', 'survSendBut');
			surveyBut.setAttribute('type', 'button');
			surveyBut.addEventListener('click', function () {
				console.log('clicked me!');
				console.log('Number of children: ' + survFormGrab.children.length);
				console.log('Number of elements: ' + survFormGrab.elements.length);
				for (var a = 0; a < survFormGrab.elements.length; a++) {
					console.log(survFormGrab.elements[a].nodeName);
				}
				ConcatSurvForm();
			});
			surveyBut.innerHTML = 'Do Survey';
			surveyTADiv.appendChild(surveyInptSubj);
			surveyTADiv.appendChild(surveyInptBr);
			surveyTADiv.appendChild(surveyTA);
			surveyTADiv.appendChild(surveyBr);
			surveyTADiv.appendChild(surveyBut);

			survDivGrab.appendChild(surveyTADiv);

		}

		function ConcatSurvForm() {
			var survStr = "name = value&";
			for (var a = 0; a < survFormGrab.elements.length; a++) {
				console.log(survFormGrab.elements[a].nodeName);
				console.log(survFormGrab.elements[a].type);
				if ((survFormGrab.elements[a].type == 'radio' && survFormGrab.elements[a].checked) || (survFormGrab.elements[a].nodeName == 'SELECT') || (survFormGrab.elements[a].nodeName == 'INPUT' && survFormGrab.elements[a].type == 'text') || (survFormGrab.elements[a].nodeName == 'TEXTAREA')) {
					survStr += survFormGrab.elements[a].name + '=' + survFormGrab.elements[a].value + "&";
					//survStr +=survStr;
				}
			}
			console.log(survStr);

			var XMLHttpRequestObj = new XMLHttpRequest();

			XMLHttpRequestObj.open('POST', 'querySurv.php', true);

			XMLHttpRequestObj.onreadystatechange = function () {
				if (XMLHttpRequestObj.readyState == 4 && XMLHttpRequestObj.status == 200) {
					console.log('hit server');
					var xmlText = XMLHttpRequestObj.responseText;
					console.log(xmlText);
				}
			}

			XMLHttpRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			XMLHttpRequestObj.send(survStr);

		}

		function MEInterface() {

			var MEDiv = document.createElement('Div');
			var MEChartInpt = document.createElement('input');
			MEChartInpt.setAttribute('type', 'button');
			MEChartInpt.setAttribute('value', 'Trend');
			MEChartInpt.addEventListener('click', function () {
				console.log('Charting...!');
				var resultQuery2 = [];
				console.log(resultQuery);
				for (var a = 0; a < resultQuery.length; a++) {
					resultQuery2.push(resultQuery[a]);
				}
				console.log(resultQuery2);
				var sortedForChart = ArrayFixQueryChart(resultQuery2);
				console.log('This is length of sorted: ' + sortedForChart.length);
				console.log(sortedForChart);
				console.log(sortedForChart[0]);
				console.log(sortedForChart['Production']);
				//google.setOnLoadCallback (DrawChart2(sortedForChart));
				google.setOnLoadCallback([DrawChart3(sortedForChart), DrawChart3Editor()]);
				//DrawChart2(sortedForChart);
			});
			MEDiv.appendChild(MEChartInpt);
			return MEDiv;

		}


		function closeNavForm() {

			console.log('CLOSING NAVFORM');
			navFormDiv.style.width = "0";
			navFormDivCloseVar = false;
			console.log(navFormDiv);

		}

		function closeNavForm2() {
			console.log('CLOSING NAVFORM');
			navFormDiv.style.width = "0";
		}

		function openNav() {
			console.log('Opening...');
			navFormDiv.style.width = '100%';

		}




		function SearchFunc(this2) {
			console.log('Querying Server...');
			console.log(this2.name + '=' + this2.value);
			if ((this2.value).length > 1) {

				if (XMLHttpRequestObj6) {
					XMLHttpRequestObj6.abort();
				}

				console.log('Calling Ajax2...!');
				XMLHttpRequestObj6 = new XMLHttpRequest();
				XMLHttpRequestObj6.open('POST', 'SearchAjaxRandRInterfaceNoC4.php', true);
				XMLHttpRequestObj6.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj6.send(this2.name + '=' + this2.value);
				XMLHttpRequestObj6.onreadystatechange = function () {
					console.log('Request back for search');
					console.log(XMLHttpRequestObj6.readyState);
					if (XMLHttpRequestObj6.readyState == 4 && XMLHttpRequestObj6.status == 200) {
						console.log('Successfully hit server');
						console.log(XMLHttpRequestObj6.responseXML);
						xmlAutoSearchComp = XMLHttpRequestObj6.responseXML;
						//SearchFuncAutoProcess(xmlAutoSearchComp);
						SearchInpt(xmlAutoSearchComp, this2);
					}
				}
			} else {

				inptsSearchGrab = document.getElementsByClassName('inptSearch');
				while (inptsSearchGrab.length) {
					console.log('REMOVING INPUT');
					document.body.removeChild(inptsSearchGrab[0]);
				}
			}

		}


		function SearchFuncAutoProcess(xmlAuto2) {
			//Emptying select box
			while (searchSelGrab.length > 0) {
				searchSelGrab.remove(0);
			}

			var autoArr = [];
			var autoArr2 = [];
			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.getElementsByTagName('Det');
			console.log('This is the number: ' + xmlAutoDoc.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				autoArr.push(xmlAutoDoc[a].getAttribute('NoC'));
			}
			autoArr.sort();
			console.log(autoArr);
			for (var b = 0; b < autoArr.length; b++) {
				if (autoArr[b] == autoArr[b + 1]) {
					delete autoArr[b];
				}
			}

			for (var d = 0; d < autoArr.length; d++) {
				if (autoArr[d] != undefined) {
					autoArr2.push(autoArr[d]);
				}
			}
			console.log(autoArr2);
			for (var c = 0; c < autoArr2.length; c++) {
				console.log(searchSelGrab);
				console.log(searchSelGrab.length);
				searchSelGrab.options[c] = new Option(autoArr2[c]);
				searchSelGrab.size = autoArr2.length;
			}
		}


		function SearchInpt(xmlAuto2, this3) {
			inptsSearchGrab = document.getElementsByClassName('inptSearch');
			inputStyle = window.getComputedStyle(this3);
			console.log(searchContainerGrab.children.length);
			console.log(searchContainerGrab);

			var getBounds = this3.getBoundingClientRect();
			/*
			while (searchContainerGrab2.children.length) {
				searchContainerGrab2.removeChild(searchContainerGrab2.children[0]);
			}
			*/
			while (inptsSearchGrab.length) {
				console.log('REMOVING INPUT');
				document.body.removeChild(inptsSearchGrab[0]);
			}
			console.log('Entered alternative input function...');
			var autoArr = [];
			var autoArr2 = [];
			//console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.getElementsByTagName('Det');
			console.log('This is the number: ' + xmlAutoDoc.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				autoArr.push(xmlAutoDoc[a].getAttribute('NoC'));
			}
			autoArr.sort();
			console.log(autoArr);
			for (var b = 0; b < autoArr.length; b++) {
				if (autoArr[b] == autoArr[b + 1]) {
					delete autoArr[b];
				}
			}

			for (var d = 0; d < autoArr.length; d++) {
				if (autoArr[d] != undefined) {
					autoArr2.push(autoArr[d]);
				}
			}

			for (var c = 0; c < autoArr2.length; c++) {
				var sInput = document.createElement('input');
				sInput.setAttribute('class', 'inptSearch');
				sInput.style.zIndex = '4';
				sInput.addEventListener('click', function () {
					this3.value = this.value;
					while (inptsSearchGrab.length) {
						console.log('REMOVING INPUT');
						document.body.removeChild(inptsSearchGrab[0]);
					}
				});
				sInput.addEventListener('mouseover', function () {
					this.style.backgroundColor = 'Gainsboro';
				});
				sInput.addEventListener('mouseout', function () {
					this.style.backgroundColor = 'MistyRose';
				});

				sInput.setAttribute('value', autoArr2[c]);
				//var getBounds = this3.getBoundingClientRect();
				console.log('Plotting Inputs...');
				sInput.style.position = 'absolute';
				sInput.style.backgroundColor = 'MistyRose';
				//sInput.style.top = (c * 15)+'px';

				console.log('This is left of this3: ' + this3.style.left);
				console.log('This is right of this3: ' + this3.style.right);
				console.log('This is top of this3: ' + this3.style.top);
				console.log('This is bottom of this3: ' + this3.style.bottom);
				console.log('This is bounds:');
				console.log(getBounds);
				console.log('This is left margin: ');
				console.log(this3.style.marginLeft);
				console.log(getBounds.x);
				console.log(getBounds.y);
				//sInput.style.top = (getBounds.bottom + ((getBounds.top - getBounds.bottom) * c)+'px');
				//	sInput.style.margin-top = (this3.style.margin-top + ((getBounds.top - getBounds.bottom) * c)+'px');
				console.log('This is inputStyle:');
				console.log(inputStyle);
				console.log(this3);
				console.log(this3.style.margin);
				console.log('Left margin: ' + inputStyle.marginLeft);

				//sInput.style.marginLeft = inputStyle.marginLeft;

				sInput.style.left = getBounds.left;
				sInput.style.width = getBounds.width;

				console.log('Left Margin of new input: ' + sInput.style.marginLeft);
				console.log('Left Margin of new input (using getComputedStyle): ' + (window.getComputedStyle(sInput)).marginLeft);


				console.log('Top position: ' + inputStyle.top);
				console.log('Top Margin: ' + inputStyle.marginTop);
				console.log(inputStyle.marginTop.substr(0, inputStyle.marginTop.length - 2));
				//console.log(typeof(inputStyle.marginTop.substr(0, inputStyle.marginTop.length-2)));
				//console.log(typeof(parseInt(inputStyle.marginTop.substr(0, inputStyle.marginTop.length-2))));

				console.log('Setting to this: ' + inputStyle.top.substr(0, inputStyle.top.length - 2));
				console.log('Bottom margin: ' + inputStyle.marginBottom);


				sInput.style.top = getBounds.bottom + (c * getBounds.height) + 'px';
				//sInput.style.marginTop 
				console.log('This is bottom here: ' + inputStyle.bottom);
				console.log('This is bottom margin here: ' + inputStyle.marginBottom);
				console.log('This is height here: ' + inputStyle.height);
				//console.log('This is heigth style here: '+inputStyle.style.height);
				bottomNumber = parseInt(inputStyle.marginBottom.substr(0, (inputStyle.marginBottom).length - 2));
				heightNumber = parseInt(inputStyle.height.substr(0, (inputStyle.height).length - 2));
				console.log('bottomNumber: ');
				console.log(bottomNumber);
				console.log('heightNumber: ');
				console.log(heightNumber);
				//sInput.style.top = (bottomNumber + (c*heightNumber))+'px';
				console.log(sInput.style.top);
				//console.log('That is, the type');
				//console.log(inputStyle.marginLeft.substr(0, (inputStyle.marginLeft).length-2));
				//console.log(parseInt(inputStyle.marginLeft.substr(0, (inputStyle.marginLeft).length-2)));
				//console.log(typeof(sInput.style.marginTop));
				getBounds.bottom + (c * getBounds.height) + 'px';


				console.log('Current sInput top: ' + sInput.style.top);
				console.log('OPERATING TOP MARGIN: ' + getBounds.bottom + (c * getBounds.height));
				console.log('Bottom: ' + inputStyle.marginBottom);
				console.log(this3.name);
				console.log(this3.style.marginRight);
				//sInput.style.marginLeft = this3.style.marginLeft;
				//searchContainerGrab2.appendChild();


				console.log('This is top by bounds: ' + getBounds.top);
				console.log('This is bottom by bounds: ' + getBounds.bottom);
				//console.log(getBounds.left);
				//console.log(getBounds);
				console.log(this3);
				sInput.style.borderTop = 'none';
				if (c == autoArr2.length - 1) {
					//sInput.style.borderBottom = 'none';
				} else {
					sInput.style.borderBottom = 'none';
				}

				(function (sInput) {
					sInput.addEventListener('click', function () { PlotHistory(sInput.value); });
				})(sInput);

				function PlotHistory(sInputValue) {
					console.log('Length of Marker Array: ' + mapOverMarkerArr.length);

					for (var a = 0; a < mapOverMarkerArr.length; a++) { //if there are none, length=0, and it won't run
						console.log('REMOVING...!');
						mapOverMarkerArr[a].setMap(null);
					}

					console.log('Changing...');
					console.log(sInputValue);

					var xmlAutoSearchCompSel = xmlAutoSearchComp.getElementsByTagName('Det');
					console.log(xmlAutoSearchCompSel);
					FilterCompany(xmlAutoSearchCompSel, sInputValue);
				}



				//searchContainerGrab2.appendChild(sInput);
				document.body.insertBefore(sInput, mapOverDiv);

			}
			//searchContainerGrab2.style.marginLeft = inputStyle.marginLeft;

		}


		function FilterCompany(xmlAutoSearchCompSel, NoC) {

			searchCompanyArr = [];
			searchCompanyArr2 = [];
			searchCompanyArr3 = [];

			console.log('This is xmlUsed: ');
			console.log(xmlAutoSearchCompSel);
			console.log('Length of xml:' + xmlAutoSearchCompSel.length);
			console.log('This is Name of Company: ' + NoC);

			if (!NoC) { //for FindPlaces
				for (var a = 0; a < xmlAutoSearchCompSel.length; a++) {
					searchCompanyArr.push(xmlAutoSearchCompSel[a]);
					searchCompanyArr2.push(xmlAutoSearchCompSel[a]);
					searchCompanyArr3.push(xmlAutoSearchCompSel[a]);
				}

			} else {

				for (var a = 0; a < xmlAutoSearchCompSel.length; a++) {

					if (xmlAutoSearchCompSel[a].getAttribute('NoC') == NoC) {
						searchCompanyArr.push(xmlAutoSearchCompSel[a]);
						searchCompanyArr2.push(xmlAutoSearchCompSel[a]);
						searchCompanyArr3.push(xmlAutoSearchCompSel[a]); //three copies as each is destructible
					}
				}
			}
			console.log('Length of Qualified array: ' + searchCompanyArr.length);
			for (var a = 0; a < searchCompanyArr.length; a++) {
				console.log(a);
				console.log(searchCompanyArr[a]);
			}
			console.log(searchCompanyArr);

			arrSortClippedDateSearch = ArrayFixInspDateAndPLSearch(searchCompanyArr);//arrSortClippedDate, holds unique inspections/ returns unique inspection, counting their PLs
			console.log(arrSortClippedDateSearch);
			console.log(searchCompanyArr);
			console.log('********After');
			console.log(searchCompanyArr);


			arrSortClippedDateSearch2 = ArrayFixInspDateAndPL(searchCompanyArr3);

			arrSortClippedSearch = ArrayFixInspType(arrSortClippedDateSearch2);//arrSortClipped holds unique inspections and their numbers.

			arrSortProdFinds = ArrayFixProductsAndFinds(searchCompanyArr2); //spits out everything for the selected State


			PopMapOverDisp(null, null, arrSortClippedDateSearch);

		}


		function ArrayFixInspDateAndPLSearch(arr) { //unique inspections

			console.log('UnSort initialized for InspectionDate and PLSearch');
			console.log('Length of arr ' + arr.length);
			console.log(arr);

			var arr2 = [];

			//DATE IS PRIMARY SORT ORDER in PHP, so we JUST BOTHER ABOUT PL
			// No need for sorting, it is already Ordered By PL
			//arr.sort(function (a, b) {return (a.getElementsByTagName('PL')[0].firstChild.nodeValue).localeCompare(b.getElementsByTagName('PL')[0].firstChild.nodeValue); });
			console.log('***************');
			console.log(arr);

			//Creating the properties
			for (var a = 0; a < arr.length; a++) {
				if (a < arr.length - 1) {
					console.log('Index a: ' + a);
					console.log('Value at a: ' + arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue);
					if (arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue != arr[a + 1].getElementsByTagName('PL')[0].firstChild.nodeValue) {
						arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = 1;
						console.log('Values: ' + arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue]);
					}

				} else {
					console.log('Value of a: ' + a);
					//arr2[arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue] =1;
					console.log('Values: ' + arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue]);
					arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = 1; //you sure about this one?

				}
			}

			console.log('ArrayFixInspDateAndPL arr: ');
			console.log(arr);
			console.log(arr[0]);
			console.log(arr[1]);
			console.log(arr[2]);
			console.log(arr[3]);


			if (arr.length == 1) {
				console.log('Array Length Case of 1');
				arr2[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[0].getElementsByTagName('InspType')[0].firstChild.nodeValue];
			}
			//Assigning the number on the property and deleting
			for (var a = 0; a < arr.length - 1; a++) {// for case arr.length=0, no need for this loop: single item is already a unique inspection
				console.log('Pass: ' + a);
				if (arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('PL')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspDate')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspDate')[0].firstChild.nodeValue && arr[a].getElementsByTagName('InspType')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue && arr[a].getElementsByTagName('ProductName')[0].firstChild.nodeValue == arr[a + 1].getElementsByTagName('ProductName')[0].firstChild.nodeValue) {
					(arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue])++;

					arr2[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];// is this line sane at all? What is this?
					delete arr[a];  // PL will equal where InspDate is equal, so this line can be here. If it is in InspDate 'if' we will not have the chance to count it
				}
				if (a == arr.length - 2) { //either replaces (if the same), or creates new object property (if last item is different)
					arr2[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue] = arr[arr[a + 1].getElementsByTagName('InspType')[0].firstChild.nodeValue];
				}

			}

			console.log('This is the array after deleting ' + arr);
			console.log(arr);


			//clipping
			for (var a = 0; a < arr.length; a++) {
				if (arr[a]) { //if it is not = to undefined, or null.
					arr2.push(arr[a]);
					arr2[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue] = arr[arr[a].getElementsByTagName('PL')[0].firstChild.nodeValue];

				}

				console.log('LENGTH of InspDateAndPL arr2 ' + arr2.length);
			}

			console.log('This is the array InspDateAndPL after clipping');
			console.log(arr2);
			/*
			console.log('Investigation Nos: '+arr2['Investigation']);
			console.log(arr2.length);
				for (var a=0;a<arr2.length;a++) {
					console.log(arr2[a]);
				}
			*/
			return arr2;

		}



		function MobileGraph() {
			for (var a = 0; a < navFormDiv.children.length; a++) {
				navFormDiv.removeChild(navFormDiv.children[a]);
			}

		}

		function XmlAutoTransform(xmlAuto) {
			console.log('xmlAuto:');
			console.log(xmlAuto);
			console.log('Length of xmlAuto Object: ' + xmlAuto.productName.length);
			//Changing from object of arrays (xmlAuto) to array of objects (productArrWholeAlt):
			//var productArrWholeAlt = new Array (xmlAuto.productName.length);
			var productArrWholeAlt = [];
			console.log('Length of productArrWholeAlt: ' + productArrWholeAlt.length);
			console.log(productArrWholeAlt);

			for (var b = 0; b < xmlAuto['productName'].length; b++) { //as prod will include findingImg and findingDets which have length value of 0;
				var obj = {};
				for (var prop in xmlAuto) {
					console.log('prop:' + prop);
					if (xmlAuto.hasOwnProperty(prop)) { //no prototype properties
						console.log('Has property: ' + prop);
						console.log('Length of xmlAuto[prop]: ' + xmlAuto[prop].length);
						console.log("Length of xmlAuto['productName'] is: " + xmlAuto['productName'].length);
						console.log('To be assigned: ' + xmlAuto[prop][b]);
						obj[prop] = xmlAuto[prop][b]; //obj.companyAdd = , obj.productName =
						console.log('Now assigned: ' + obj[prop]);
					} else {
						console.log('Does not have property: ' + prop);
					}

				}
				//productArrWholeAlt [b] = obj;
				productArrWholeAlt.push(obj);
			}
			console.log('This is now array of objects (as opposed to objects of arrays)');
			console.log(productArrWholeAlt);

			return productArrWholeAlt;
		}

		function GeolocateOverDirectionsNew(markerPosition) {
			var currentPositionObj;
			console.log('Geolocating New...');
			alert(markerPosition);
			if (navigator.geolocation) {
				var geoOpts = {
					maximumAge: 30000,
					timeout: 50000,
					enableHighAccuracy: true
				}
				navigator.geolocation.getCurrentPosition(Success, Fail, geoOpts);
			}

			function Success(position) {

				alert('Success');
				console.log(position.coords.latitude);
				currentPositionObj = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
				alert(currentPositionObj);

				var markerCurrentPosition = new google.maps.Marker({
					map: mapOverDisp,
					position: currentPositionObj
				});
				markerCurrentPositionNewArr.push(markerCurrentPosition);
				DirectionsNew(currentPositionObj, markerPosition);
			}


			function Fail(err) {
				alert('Failure:' + err.code);
				console.log(err.code + ' , ' + err.message);
			}

		}

		function DirectionsNew(currentPositionObj, markerPosition) {
			var renderNew = new google.maps.DirectionsRenderer()
			alert('Plotting directions...');
			var direction = new google.maps.DirectionsService();
			var dirReq = {
				origin: currentPositionObj,
				travelMode: 'DRIVING',
				destination: markerPosition,
				provideRouteAlternatives: true
			};

			direction.route(dirReq, function (DirectionsResult, DirectionsStatus) {
				console.log('Getting directions...');
				if (DirectionsStatus == 'OK') {
					renderNew.setDirections(DirectionsResult);
					renderNew.setMap(mapOverDisp);
					alert('Setting directions now...');
					renderNew.setPanel(document.getElementById('newPanelRender'));
				}
			});
			renderArrNew.push(renderNew);
		}


		function DirectionsNewDone() {
			for (var a = 0; a < renderArrNew.length; a++) {
				renderArrNew[a].setMap(null);
			}

			for (varb = 0; b < markerCurrentPositionNewArr.length; b++) {
				markerCurrentPositionNewArr[b].setMap(null);
			}

		}

		function GeolocateOverTrackerNew() {
			console.log('Live tracking...');
			if (navigator.geolocation) {
				var geoOpts = {
					maximumAge: 20000,
					enableHighAcurracy: true,
					timeout: 30000
				}
				markerWatch = new google.maps.Marker({
					map: mapOverDisp,
					draggable: true
				});

				watchIdNew = navigator.geolocation.watchPosition(LiveSuccess, LiveFailure, geoOpts);
			}
			function LiveSuccess(position) {
				console.log('Watching...');
				markerWatch.setMap(null);
				markerWatch.setPosition(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
				markerWatch.setMap(mapOverDisp);
				markerWatch.setAnimation(google.maps.Animation.BOUNCE);

			}

			function LiveFailure(positionError) {

			}
		}

		function GeolocateOverTrackerNewTerminate() {
			console.log('Terminating...');
			navigator.geolocation.clearWatch(watchIdNew);
			markerWatch.setAnimation(null);

		}

		function FindPlacesNew(pos) {
			//Drawing circle
			var circlePoly = new google.maps.Circle({
				strokeColor: '#FF0000',
				strokeOpacity: 0.8,
				strokeWeight: 2,
				fillColor: '#FF0000',
				fillOpacity: 0.35,
				zIndex: -1,
				map: mapOverDisp,
				center: pos,
				radius: 1000
			});
			google.maps.event.addListener(circlePoly, 'click', function () {
				console.log('I have been clicked!');
			});
			circlePolyArr.push(circlePoly);

			var recentHistory3 = '<br/><div><input type ="button" value = "Direction" onclick = "GeolocateOver(\'simple\'\'simple\')"/>' +
				'<input type = "button" id = "directionsBut" value = "Directions(Detailed)" />' +
				'<input type = "button" id = "DirectDone" value = "Done" onclick = "DirectionsNewDone()">' +
				'<input type = "button" id = "Track" value = "Track" onclick = "GeolocateOverTrackerNew()">' +
				'<input type = "button" id = "EndTrack" value = " End Track" onclick = "GeolocateOverTrackerNewTerminate()">' +
				'<input type = "button" id = "remoteScanNew" value = "Scan"/>' +
				'<input type = "button" id = "remoteScanNewDone" value ="End Scan"/></div>';

			var placeService = new google.maps.places.PlacesService(mapOverDisp);
			var placeRequest = {
				location: pos,
				radius: 1000,
				type: ['store']
			};
			placeService.nearbySearch(placeRequest, function (results, status) {
				if (status == google.maps.places.PlacesServiceStatus.OK) {
					for (var i = 0; i < results.length; i++) {
						var place = results[i];
						var markerPlace = new google.maps.Marker({
							map: mapOverDisp,
							position: results[i].geometry.location,
							title: results[i].name,
							draggable: true
						});
						var infoWindowScan = new google.maps.Infowindow();
						google.maps.event.addListener(markerPlace, 'click', function () {
							infoWindowScan.setContent(recentHistory3);
							infoWindowScan.open(mapOverDisp, this);

							//Directions
							var directionsButGrab = document.getElementById('directionsBut');
							directionsButGrab.addEventListener('click', function () {
								alert('This one here clicked.');
								GeolocateOverDirectionsNew(markerCollection[v].getPosition());
							});
							var remoteScanNewGrab = document.getElementById('remoteScanNew');
							remoteScanNewGrab.addEventListener('click', function () {
								FindPlacesNew(markerCollection[v].getPosition());
							});
							var remoteScanNewDoneGrab = document.getElementById('remoteScanNewDone');
							remoteScanNewDoneGrab.addEventListener('click', function () {
								FindPlacesNewDone();
							});
						});
						mapOverDisp.setZoom(16);
						mapOverDisp.setCenter(markerPlace.getPosition());
						scanArr.push(markerPlace);
					}
				}


			});
		}

		function FindPlacesNewDone() {
			console.log('Clearing scan...');
			for (var a = 0; a < circlePolyArr.length; a++) {
				circlePolyArr[a].setMap(null);
			}
			for (var a = 0; a < scanArr.length; a++) {
				scanArr[a].setMap(null);
			}
		}

		function newAddress(this2) {
			console.log('Clicked for new address');
			regCompAddressGrab.style.backgroundColor = 'pink';
			regCompAddressGrab.readOnly = false;
			//regCompAddressBool = false;
			console.log('regCompAddressBool is', regCompAddressBool);
			if (regCompAddressBool) {
				this2.value = ' Edit ';
				regCompAddressBool = false;
				blah();
			} else {
				this2.value = ' New ';
				regCompAddressBool = true;
				//blah();
			}
			console.log(this2);
		}

		function blah() {
			//regCompAddressGrab = document.getElementById('regCompAddress');
			//regCompAddressGrab.readOnly = 'true';
			//regCompAddressBool = true;
			//regCompAddressGrab.style.backgroundColor = 'white';
			//regCompAddressGrab.value = this.options[this.selectedIndex].text;
			//console.log(this.options[this.selectedIndex].text);
			console.log('------');
			console.log(regCompAddressGrab);
			xmlAutoInptProdLine2(xmlAuto, regNoCDiv.value, regCompAddressGrab.value);

			console.log('Pre-Length: ' + regFormTabGrab.getElementsByClassName('PLRow2').length);

			if (regFormTabGrab.getElementsByClassName('PLRow2').length != 0) {
				console.log('Removing');
				/*
				for (var d=0;d< regFormTabGrab.getElementsByClassName('PLRow2').length;d++){
					regFormTabGrab.removeChild(regFormTabGrab.getElementsByClassName('PLRow2')[d]);
				}
				*/
				while (regFormTabGrab.getElementsByClassName('PLRow2').length) {
					regFormTabGrab.removeChild(regFormTabGrab.getElementsByClassName('PLRow2')[0]);
				}
			}
			AddRegulatedProductLineNoCA();
			RearrangePL(regFormTabGrab, pLName);
			console.log('Added Class...');
			console.log('Length: ' + regFormTabGrab.getElementsByClassName('PLRow2').length);
			console.log(regFormTabGrab.getElementsByClassName('PLRow2'));
		}

		function DissapearLoader() {
			console.log('Dissapearing...');
			//alert(loaderContainerGrab);
			loaderContainerGrab.style.display = 'none';
		}


		function ChartCompliance() {
			console.log(this.value);
			//console.log(this.parentNode.className);
			//console.log(this.parentNode.parentNode);
			//console.log(this.parentNode.parentNode.parentNode);
			google.charts.load('current', { packages: ['bar', 'controls', 'charteditor'] });
			google.charts.setOnLoadCallback(Compliance);
			alert('Charting Compliance...!');
			alert(presentMarker);

		}

		function Compliance() {
			alert('loaded');
			console.log(presentMarker.noC);
			console.log('This is name of Company: ', infoObj.noC);

			//console.log(objDoc2);
			//CompChartPlot
			//var companyName = document.getElementsByClassName('recentHistoryDiv')[0].getElementsByClassName('nameNoC').innerHTML;

			//alert(companyName);
			var staffStr = "Company=" + regPlaceGrab.value;

			var compObj = new XMLHttpRequest();
			compObj.open('POST', 'staffOverSightNode', true);
			compObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			compObj.responseType = 'json';

			compObj.send(staffStr);

			compObj.onreadystatechange = function () {
				if (compObj.status == 200 && compObj.readyState == 4) {
					console.log('Compliance ready...');
					console.log(compObj);
					compObjResponse = compObj.response;
					console.log(compObjResponse);
				}
			}


			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Topping');
			data.addColumn('number', 'Slices');
			data.addRows([
				['Mushrooms', 3],
				['Onions', 1],
				['Olives', 1],
				['Zucchini', 1],
				['Pepperoni', 2]
			]);

			var options = {
				'title': 'How Much Pizza I Ate Last Night',
				'width': 400,
				'height': 300
			};

			var chart = new google.visualization.BarChart(complianceChartGrab);
			chart.draw(data, options);

		}

		function openPage(tabId, elmnt, color) {

			var tablinkGrab = document.getElementsByClassName('tablink');
			for (var a = 0; a < tablinkGrab.length; a++) {
				tablinkGrab[a].style.backgroundColor = '';
			}

			var tabcontentGrab = document.getElementsByClassName('tabcontent');
			for (var a = 0; a < tabcontentGrab.length; a++) {
				tabcontentGrab[a].style.display = 'none';
				console.log('Hiding...');

			}

			var tabIdGrab = document.getElementById(tabId);
			tabIdGrab.style.display = 'block';
			tabIdGrab.style.backgroundColor = color;
			elmnt.style.outline = '2px inset powderblue';

			elmnt.style.backgroundColor = color;
		}

		function openProfileSubTab(subTabId, this2, col) {
			tabProfilelinkGrab = document.getElementsByClassName('tabProfilelink');
			for (var a = 0; a < tabProfilelinkGrab.length; a++) {
				tabProfilelinkGrab[a].style.backgroundColor = '';
				tabProfilelinkGrab[a].style.outline = 'none';
			}

			var tabsubcontentGrab = document.getElementsByClassName('tabsubcontent');
			for (var a = 0; a < tabsubcontentGrab.length; a++) {
				tabsubcontentGrab[a].style.display = 'none';
			}
			this2.style.backgroundColor = col;
			this2.style.outline = '2px inset powderblue';
			var subTabIdGrab = document.getElementById(subTabId);
			subTabIdGrab.style.display = 'block';
			subTabIdGrab.style.backgroundColor = col;

		}



		function AddDashboard(dashData) {
			//console.log(objDoc2);
			var complianArr = ['Critical', 'Major', 'Minor', 'Other', 'Resolve'];
			var nrnArr = ['Reg', 'UnReg'];

			if (dashData) {
				console.log(dashData);
				console.log(dashData.DashStatus.dashStat);
				//console.log(JSON.parse(dashData.DashStatus.dashStat));
				var dashStatObj;
				dashStatObj = JSON.parse(dashData.DashStatus);
				console.log(dashStatObj.dashStat);
			}
			console.log('Adding dash...');
			var imgPinBool = true;
			var newDivGrab = document.createElement('div');
			var newDivGrabContainer = document.createElement('div');
			newDivGrab2 = document.createElement('div');
			newDivGrab.setAttribute('class', 'newDiv');
			newDivGrab.setAttribute('id', 'newDivId');
			newDivGrabContainer.style.borderStyle = 'solid';
			newDivGrabContainer.style.borderColor = 'red';

			newDivGrab.setAttribute('class', 'newDiv');
			newDivGrabContainer.setAttribute('class', 'newDivCont');
			newDivGrab2.setAttribute('class', 'newDivGrab2Class');
			newDivGrab2.setAttribute('id', 'newDivGrab2Id');

			var imgContainer = document.createElement('div');
			imgContainer.setAttribute('class', 'imgContainerClass');
			imgContainer.setAttribute('id', 'imgContainerId');
			//imgContainer.style.display = 'none';

			var checkCombi = document.createElement('input');
			checkCombi.setAttribute('type', 'checkbox');
			checkCombi.setAttribute('class', 'checkCombiClass');
			checkCombi.setAttribute('width', '60');
			//checkCombi.checked = true;
			//checkCombi.addEventListener('click', DropDown);

			function DropDown() {
				//alert('Droping!');
			}

			var imgReport = document.createElement('img');
			imgReport.setAttribute('src', '/ProfilePicsFoldera/report.png');
			imgReport.setAttribute('width', 20);
			imgReport.setAttribute('height', 20);
			var imgReportBool = true;
			imgReport.imgReportBool = imgReportBool;


			var reportTran;
			var reportDiv = document.createElement('div');
			reportDiv.setAttribute('class', 'reportDivClass');
			reportDiv.style.zIndex = 100;
			reportDiv.style.position = 'fixed';
			reportDiv.style.backgroundColor = 'Silver';
			reportDiv.style.border = 'yellow solid 2px';
			reportDiv.draggable = true;


			var reportDivAddGraphContainer = document.createElement('div');
			reportDivAddGraphContainer.style.backgroundColor = 'grey';


			var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
			reportDivAddGraphContainer.addEventListener('mousedown', MoveDivAround);
			function MoveDivAround(e) {
				e = e || window.event;
				e.preventDefault();
				pos1 = e.clientX;
				pos2 = e.clientY;

				document.addEventListener('mouseup', CancelMoveAround);
				document.addEventListener('mousemove', MovingAround);
			}

			function MovingAround(e) {
				e = e || window.event;
				e.preventDefault();
				//console.log('This is pos1: '+pos1);
				pos3 = pos1 - e.clientX;
				pos4 = pos2 - e.clientY;
				pos1 = e.clientX;
				pos2 = e.clientY;

				reportDivAddGraphContainer.parentNode.style.top = (reportDivAddGraphContainer.parentNode.offsetTop - pos4) + "px";
				reportDivAddGraphContainer.parentNode.style.left = (reportDivAddGraphContainer.parentNode.offsetLeft - pos3) + "px";

			}

			function CancelMoveAround() {
				console.log('Cancelling...');
				document.removeEventListener('mouseup', CancelMoveAround);
				document.removeEventListener('mousemove', MovingAround);

			}



			var reportDivAddGraph = document.createElement('input');
			reportDivAddGraph.setAttribute('type', 'button');
			reportDivAddGraph.setAttribute('value', 'Import Graph');

			var reportDivAddReport = document.createElement('input');
			reportDivAddReport.setAttribute('type', 'button');
			reportDivAddReport.setAttribute('value', 'Import Report');

			var blowReport = document.createElement('img');
			blowReport.setAttribute('class', 'blowReportClass');
			blowReport.setAttribute('width', 20);
			blowReport.setAttribute('height', 20);
			blowReport.setAttribute('src', '/ProfilePicsFoldera/Expand5.png');

			var cancelReport = document.createElement('img');
			cancelReport.setAttribute('class', 'cancelReportClass');
			cancelReport.setAttribute('width', 20);
			cancelReport.setAttribute('height', 20);

			var blowReportBool = true;
			(function (imgReport, reportDiv, blowReportBool) {
				cancelReport.addEventListener('click', function () {
					var conBoolReport = confirm('Delete Report?');
					if (conBoolReport) {
						var conBoolReport2 = confirm('Are you sure?');
						if (conBoolReport2) {
							console.log(imgReport.imgReportBool);
							this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
							reportDiv.objection = 'Man';
							imgReport.imgReportBool = !imgReport.imgReportBool;
							imgReport.style.filter = 'invert(0)';
							console.log(imgReport);
							console.log(imgReportBool);
							imgReport.style.backgroundColor = 'transparent';
						}
					}
				});

				blowReport.addEventListener('click', function () {
					//reportDiv.style.backgroundColor = 'violet';
					this.parentNode.parentNode.classList.toggle('reportDivExpandNow');
					if (blowReportBool) {
						blowReport.setAttribute('src', '/ProfilePicsFoldera/shrink.png');
						blowReportBool = !blowReportBool;
					} else if (!blowReportBool) {
						blowReport.setAttribute('src', '/ProfilePicsFoldera/Expand5.png');
						blowReportBool = !blowReportBool;
					}
				});

			})(imgReport, reportDiv, blowReportBool);


			cancelReport.setAttribute('src', '/ProfilePicsFoldera/cancel.png');
			reportDivAddGraph.addEventListener('click', function () {
				//alert('Importing...');
				console.log(this.parentNode.parentNode);
				var divContContainer = document.createElement('div');
				divContContainer.setAttribute('id', 'divContContainerId');
				divContContainer.setAttribute('class', 'divContContainerClass');
				//divContContainer.style.backgroundColor ='black';
				divContContainer.style.float = 'left';
				//divContContainer.style.border = 'yellow 1px solid';
				divContContainer.style.height = "55%";
				divContContainer.style.width = "36.7%";
				divContContainer.style.marginLeft = '10px';
				var divCont = document.createElement('div');
				divCont.setAttribute('class', 'divContClass');
				divCont.style.position = 'relative';
				//divCont.style.marginLeft = '10px';
				divCont.style.marginBottom = '10px'
				//divCont.style.backgroundColor = 'Cyan';
				divCont.style.float = "left";
				divCont.style.height = "76%";
				divCont.style.width = '100%';
				//divCont.style.border = "blue 1px solid";
				console.log(reportTran.children[3].cloneNode(true));
				//reportTran.children[3].cloneNode(true).position = 'relative';
				reportTran.children[3].cloneNode(true).marginTop = '0';
				divCont.appendChild(reportTran.children[3].children[0].cloneNode(true));
				console.log(reportTran.children[3].children[0].style.marginLeft);
				console.log(divCont);

				var textComment = document.createElement("TEXTAREA");
				textComment.setAttribute('class', 'textCommentClass');
				textComment.style.marginTop = '5px';
				textComment.style.width = '100%';

				var imgRemReportDiv = document.createElement('div');
				imgRemReportDiv.setAttribute('class', 'imgRemReportDivClass');
				//imgRemReportDiv.style.width = '100%';
				//imgRemReportDiv.style.height = '10%';
				//imgRemReportDiv.style.display = 'none';
				var imgRemReport = document.createElement('img');
				imgRemReport.setAttribute('src', '/ProfilePicsFoldera/thrash.png');
				imgRemReport.setAttribute('class', 'imgRemReportClass');
				imgRemReport.setAttribute('id', 'imgRemReportId');
				imgRemReport.setAttribute('width', 20);
				imgRemReport.setAttribute('height', 20);
				imgRemReport.style.float = 'right';
				//imgRemReport.style.position = 'absolute';
				//imgRemReport.style.visibility = 'hidden';
				imgRemReport.style.zIndex = 0;
				imgRemReport.addEventListener('click', function () {
					alert('Removing');
					console.log(this.parentNode.parentNode.parentNode);
					this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
				});

				imgRemReportDiv.appendChild(imgRemReport)
				divContContainer.appendChild(imgRemReportDiv);
				divContContainer.appendChild(divCont);
				divContContainer.appendChild(textComment);


				this.parentNode.parentNode.appendChild(divContContainer);
				console.log(divCont);
				console.log(divContContainer);


			});



			var reportDivAddingReport;
			(function (reportDivAddReport) {
				reportDivAddingReport = function () {
					console.log('Adding report...');
					var tabReportDiv = document.createElement('div');
					tabReportDiv.setAttribute('class', 'tabReportDivClass');
					tabReportDiv.style.height = '50%';
					tabReportDiv.style.width = '90%';
					tabReportDiv.style.backgroundColor = 'pink';

					function changeColor() {
						switch (this.id) {
							case 'colPicBackGround':
								tabReportDiv.style.backgroundColor = this.value;
								break;
							case 'colPicForeGround':
								tabReportDiv.style.color = this.value;
								break;
							case 'bordCol':
								tabReportDiv.style.borderColor = this.value;
								var tabReportDivRowGrab = tabReportDiv.getElementsByClassName('repTabNewRowClass');
								for (var a = 0; a < tabReportDivRowGrab.length; a++) {
									tabReportDivRowGrab[a].style.borderColor = this.value;
									for (var b = 0; b < tabReportDivRowGrab[a].children.length; b++) {
										tabReportDivRowGrab[a].children[b].style.borderColor = this.value;
									}
								}
								break;
						}
					}

					function changeSize() {
						switch (this.id) {
							case 'bordSize':
								console.log('changing size of border');
								if (this.value == 'None') {
									tabReportDiv.getElementsByClassName('reportTabClass')[0].border = 0;
								} else {
									tabReportDiv.getElementsByClassName('reportTabClass')[0].border = this.value;
								}
								console.log(tabReportDiv.style.borderWidth);
								break;
						}
					}

					function toggleBring() {
						this.classList.toggle('bring');
					}

					if (this.value == 'Import Report') {
						tabReportDiv.innerHTML = "<div class = 'tabReportDivMenuClass'>" +
							"<div class = 'tabReportDivMenuContainerClass'><input type = 'button' id = 'impPebReport' class = 'impPebReportClass' value = 'Import PEBEC Report'><input type = 'button' id = 'alignPebReport' class = 'alignPebReportClass' value = 'Align'></input><input type = 'button' id = 'downloadCSVId' class = 'downloadCSVClass' value = 'DownloadCSV' disabled = 'true'/></div>" +
							"<button class = 'pullInBtnClass'>></button>" +
							"</div><table id = 'reportTab' class = 'reportTabClass' >" + "<tr class = 'repTabNewRowOneClass'><th class = 'CompanyNameClass'>" + 'Company Name' + "</th><th class = 'CompanyAddClass' >" + 'Company Address' + "</th><th class = 'InspDateClass'>" + 'Inspection Date' + "</th><th class = 'ProductLineNameClass'>" + 'Product Line' + "</th><th class ='ProductNameClass'>" + 'Product' + "</th><th class = 'DosFormsTypeClass'>" + 'Dosage Form' + "</th><th class = 'NRNClass'>" + 'NRN' + "</th><th class = 'InspTypeNameClass'>" + 'Inspection Type' + "</th><th class = 'FindingsClass'>" + 'Findings' + "</th></tr></table>" +
							"<table class = 'reportTabTrackClass'></table>" +
							"<div class = 'InspReportDivClass'><div class = 'InspReportDivCancelClass'></div><table id = 'InspReport' class = 'InspReportClass'></table></div>";
						var impPebReportClassGrab = tabReportDiv.getElementsByClassName('impPebReportClass')[0];
						var alignPebReportClassGrab = tabReportDiv.getElementsByClassName('alignPebReportClass')[0];
						var reportTabTrackClassGrab = tabReportDiv.getElementsByClassName('reportTabTrackClass')[0];
						var downloadCSVClassGrab = tabReportDiv.getElementsByClassName('downloadCSVClass')[0];
						downloadCSVClassGrab.addEventListener('click', function () {
							//alert('Downloading CSV...');
							downloadCSV({ filename: 'timeline.csv' });
						});
						console.log(impPebReportClassGrab);
						impPebReportClassGrab.addEventListener('click', function () {
							FormTable3(tabReportDiv, alignPebReportClassGrab, reportTabTrackClassGrab);
						});
					} else {

						tabReportDiv.innerHTML = "<div class = 'tabReportDivMenuClass'>" +
							"<div class = 'tabReportDivMenuContainerClass'> </div>" +
							"<button class = 'pullInBtnClass'>></button>" +
							"</div><table id = 'reportTab' class = 'reportTabClass' >" + "<tr class = 'repTabNewRowOneClass'><th class = 'CompanyNameClass'>" + 'Company Name' + "</th><th class = 'CompanyAddClass' >" + 'Company Address' + "</th><th class = 'ProductLineNameClass'>" + 'Inspection Date' + "</th><th class = 'InspDateClass'>" + 'Product Line' + "</th><th class = 'InspTypeNameClass'>" + 'Inspection Type' + "</th><th class ='ProductNameClass'>" + 'Product' + "</th><th class = 'DosFormsTypeClass'>" + 'Dosage Form' + "</th><th class = 'NRNClass'>" + 'NRN' + "</th><th class = 'FindingsClass'>" + 'Findings' + "</th></tr></table>";
					}
					var menuIconContainerDiv = document.createElement('div');
					menuIconContainerDiv.setAttribute('class', 'menuIconContainerDivClass');
					menuIconContainerDiv.innerHTML = "<div class = 'menuIconContainer'>" +
						"<div class = 'line1'></div>" +
						"<div class = 'line2'></div>" +
						"<div class = 'line3'></div>" +
						"<fieldset><legend>Background:</legend><label><small>Color Picker:</small></label><input type = 'color' id = 'colPicBackGround' class = 'colorPickerInptClass'></input></fieldset>" +
						"<fieldset><legend>Foreground:</legend><label><small>Color:</small></label><input type = 'color' id = 'colPicForeGround' class = 'colorPickerInptClass'></input><br/>" +
						"</fieldset>" +
						"<fieldset><legend>Border</legend><label><small>Color:</small></label><input type ='color' id = 'bordCol' class = 'colorPickerInptClass'/><br/>" +
						"<label><small>Size:</small></label><select id = 'bordSize' class = 'bordSizeClass'>" +
						"<option value ='2px'>2px</option>" +
						"<option value ='4px'>4px</option>" +
						"<option value ='6px'>6px</option>" +
						"<option value ='None'>None</option>" +
						"</select>" +
						"</fieldset>" +
						"<fieldset><legend>Columns:</legend><label><small>Columns:</small></label><button id = 'revealColumnsId' class = 'revealColumnsClass'>V</button><div class = 'columnSet'></div></fieldset>" +
						"</div>";

					var tabReportDivMenuClassGrab = tabReportDiv.getElementsByClassName('tabReportDivMenuClass')[0];
					var tabReportDivMenuContainerClassGrab = tabReportDiv.getElementsByClassName('tabReportDivMenuContainerClass')[0];
					var menuIconContainerGrab = menuIconContainerDiv.getElementsByClassName('menuIconContainer')[0];

					menuIconContainerGrab.getElementsByClassName('colorPickerInptClass')[0].addEventListener('change', changeColor);
					menuIconContainerGrab.getElementsByClassName('colorPickerInptClass')[1].addEventListener('change', changeColor);
					menuIconContainerGrab.getElementsByClassName('colorPickerInptClass')[2].addEventListener('change', changeColor);
					menuIconContainerGrab.getElementsByClassName('bordSizeClass')[0].addEventListener('change', changeSize);
					menuIconContainerGrab.getElementsByClassName('revealColumnsClass')[0].addEventListener('click', DropDownColumn);
					var reportTabClassGrabModify = tabReportDiv.getElementsByClassName('reportTabClass')[0];






					var repTabNewRowOneClassGrab = tabReportDiv.getElementsByClassName('repTabNewRowOneClass')[0];
					console.log(repTabNewRowOneClassGrab);
					var tableCellDivContainer = document.createElement('div');
					tableCellDivContainer.setAttribute('class', 'tableCellDivContainerClass');

					var columnTab = document.createElement('table'); //table for organizing the column and their setttings (visibility, limits etc)
					tableCellDivContainer.appendChild(columnTab);

					var columnTabRowArray; //for containing spread out collection;

					for (var a = 0; a < repTabNewRowOneClassGrab.children.length; a++) {
						var columnTabRow = columnTab.insertRow();

						var columnTabRowCellName = columnTabRow.insertCell();
						var tableCellDivIndividual = document.createElement('div');
						tableCellDivIndividual.setAttribute('class', 'columnNameClass');
						tableCellDivIndividual.innerHTML = repTabNewRowOneClassGrab.children[a].innerHTML;
						columnTabRowCellName.appendChild(tableCellDivIndividual);

						//Adding Visibility
						var columnTabRowCellVisibility = columnTabRow.insertCell();
						var tableCheckVisibility = document.createElement('input');
						tableCheckVisibility.setAttribute('type', 'checkbox');
						tableCheckVisibility.checked = true;
						(function (columnTabRow, tableCheckVisibility, imgReport) {
							tableCheckVisibility.addEventListener('click', function () {
								console.log(tableCheckVisibility.checked);
								if (tableCheckVisibility.checked == true) {
									alert('true');
									console.log(columnTabRow);
									console.log(columnTabRow.getElementsByClassName('columnNameClass')[0].innerHTML);
									columnTabRowArray = [...columnTabRow.children];
									columnTabRowArray.forEach(a => {
										console.log(a.children[0]);

										if (a.children[0].children.length) {
											var drillArr = [...a.children[0].children];
											console.log(drillArr);
											drillArr.forEach(a => {
												console.log(a);
												if (a.children.length) {
													var drillArrArr = [...a.children];
													drillArrArr.forEach(a => {
														a.disabled = false;
													});
												} else {
													a.disabled = false;
												}
											});
										} else {
											a.children[0].disabled = false;
										}
									});
									console.log(this.parentNode.parentNode.children[0].children[0].innerHTML);
									AppearDisappearColumn(reportTabClassGrabModify, columnTabRow.getElementsByClassName('columnNameClass')[0].innerHTML, this.parentNode.parentNode.children[0].children[0].innerHTML, imgReport, tabReportDiv);

								}

								if (tableCheckVisibility.checked == false) {
									alert('false');
									console.log(columnTabRow);
									columnTabRowArray = [...columnTabRow.children];
									columnTabRowArray.forEach(a => {
										console.log(a.children[0]);

										if (a.children[0].children.length) {
											var drillArr = [...a.children[0].children];
											console.log(drillArr);
											drillArr.forEach(a => {
												console.log(a);
												if (a.children.length) {
													var drillArrArr = [...a.children];
													drillArrArr.forEach(a => {
														a.disabled = true;
													});
												} else {
													a.disabled = true;
												}
											});
										} else {
											a.children[0].disabled = true;
										}
									});
									this.disabled = false;
									console.log(this.parentNode.parentNode.children[0].children[0].innerHTML);
									//dissapearColumn(this.parentNode.parentNode.children[0]);
									AppearDisappearColumn(reportTabClassGrabModify, columnTabRow.getElementsByClassName('columnNameClass')[0].innerHTML, this.parentNode.parentNode.children[0].children[0].innerHTML, imgReport, tabReportDiv);

								}
							});
						})(columnTabRow, tableCheckVisibility, imgReport);
						columnTabRowCellVisibility.appendChild(tableCheckVisibility);

						//Adding Limit
						var columnTabRowCellLimit = columnTabRow.insertCell();
						var tableCheckLimit = document.createElement('input');
						tableCheckLimit.setAttribute('type', 'number');
						tableCheckLimit.setAttribute('size', '10');
						tableCheckLimit.setAttribute('step', '10');
						tableCheckLimit.setAttribute('value', '120');



						columnTabRowCellLimit.appendChild(tableCheckLimit);

						//Adding Color Picker
						var columnTabRowCellColor = columnTabRow.insertCell();
						var tableColor = document.createElement('input');
						tableColor.setAttribute('type', 'color');
						tableColor.setAttribute('value', '#ff0000');
						columnTabRowCellColor.appendChild(tableColor);


						//Adding Ground
						var columnTabRowCellColorGround = columnTabRow.insertCell();
						var tableColorGround = document.createElement('select');
						tableColorGround.options[0] = new Option('Background');
						tableColorGround.options[1] = new Option('Foreground');
						tableColorGround.options[1].selected = true;
						tableColorGround.options[2] = new Option('Select One');

						columnTabRowCellColorGround.appendChild(tableColorGround);

						if (repTabNewRowOneClassGrab.children[a].innerHTML == "Inspection Type") {
							var columnTabRowCellFromSel = columnTabRow.insertCell();
							var columnTabRowCellFromSelLast = columnTabRow.insertCell();
							var columnTabRowCellFromSelDisableContainer = document.createElement('div');
							var columnTabRowCellFromLabel = document.createElement('label');
							columnTabRowCellFromLabel.innerHTML = 'From:';
							var selFrom = document.createElement('select');

							for (var a = 0; a < inspTypeArr.length; a++) {
								selFrom.options[a] = new Option(inspTypeArr[a]);
							}

							selFrom.options[a + 1] = new Option('Select One');
							selFrom.options[a + 1].selected = true;
							selFrom.options[a + 1].hidden = true;
							selFrom.options[a + 1].disabled = true;
							columnTabRowCellFromSelDisableContainer.appendChild(columnTabRowCellFromLabel);
							columnTabRowCellFromSelDisableContainer.appendChild(selFrom);

							//setting last checkbox for from
							var columnTabRowCellFromSelLastCheck = document.createElement('input');
							columnTabRowCellFromSelLastCheck.setAttribute('type', 'checkbox');
							columnTabRowCellFromSelLastCheck.setAttribute('class', 'columnTabRowCellFromSelLastCheckClass');
							columnTabRowCellFromSelLast.appendChild(columnTabRowCellFromSelLastCheck);

							var selFromColorDiv = document.createElement('div');
							selFromColorDiv.style.width = '100%';
							var selFromColor = document.createElement('input');
							selFromColor.setAttribute('type', 'color');
							selFromColor.setAttribute('value', '#ff0000');
							selFromColor.style.width = '100%';
							selFromColorDiv.appendChild(selFromColor);
							selFrom.addEventListener('change', function () {
								console.log(this.value);
								console.log(columnTabRowCellFromSelLastCheck);
								Tracking('selFrom', this.value, reportTabTrackClassGrab, selFromColor.value, tableCheckLimit.value, columnTabRowCellFromSelLastCheck);
							});
							selFromColor.addEventListener('change', function () {
								console.log(this.value);
								console.log(selFromColor.value);
								console.log(selFrom.value);
								Tracking('selFrom', selFrom.value, reportTabTrackClassGrab, selFromColor.value, tableCheckLimit.value);
							});
							columnTabRowCellFromSelDisableContainer.appendChild(selFromColorDiv);
							columnTabRowCellFromSel.appendChild(columnTabRowCellFromSelDisableContainer);
							tableCheckLimit.addEventListener('click', () => {
								Tracking('selFrom', selFrom.value, reportTabTrackClassGrab, selFromColor.value, tableCheckLimit.value);
							});

							var columnTabRowCellToSel = columnTabRow.insertCell();
							var columnTabRowCellToSelLast = columnTabRow.insertCell();
							var columnTabRowCellToSelDisableContainer = document.createElement('div');
							var columnTabRowCellToLabel = document.createElement('label');
							columnTabRowCellToLabel.innerHTML = 'To:';
							var selTo = document.createElement('select');

							for (var a = 0; a < inspTypeArr.length; a++) {
								selTo.options[a] = new Option(inspTypeArr[a]);
							}
							selTo.options[a + 1] = new Option('Select One');
							selTo.options[a + 1].selected = true;
							selTo.options[a + 1].hidden = true;
							selTo.options[a + 1].disabled = true;
							columnTabRowCellToSelDisableContainer.appendChild(columnTabRowCellToLabel);
							columnTabRowCellToSelDisableContainer.appendChild(selTo);

							////setting last checkbox for To
							var columnTabRowCellToSelLastCheck = document.createElement('input');
							columnTabRowCellToSelLastCheck.setAttribute('type', 'checkbox');
							columnTabRowCellToSelLastCheck.setAttribute('class', 'columnTabRowCellToSelLastCheckClass');
							columnTabRowCellToSelLast.appendChild(columnTabRowCellToSelLastCheck);

							var selToColorDiv = document.createElement('div');
							selToColorDiv.style.width = '100%';
							var selToColor = document.createElement('input');
							selToColor.setAttribute('type', 'color');
							selToColor.setAttribute('value', '#ff0000');
							selToColor.style.width = '100%';
							selToColor.value = '#339933';
							selToColorDiv.appendChild(selToColor);

							columnTabRowCellToSelDisableContainer.appendChild(selToColorDiv);
							columnTabRowCellToSel.appendChild(columnTabRowCellToSelDisableContainer);
							selTo.addEventListener('change', function () {
								Tracking('selTo', this.value, reportTabTrackClassGrab, selToColor.value, tableCheckLimit.value, columnTabRowCellToSelLastCheck, columnTabRowCellFromSelLastCheck);
							});
							selToColor.addEventListener('change', function () {
								console.log(selFromColor.value);
								console.log(selFrom.value);
								Tracking('selTo', selTo.value, reportTabTrackClassGrab, selToColor.value, tableCheckLimit.value, columnTabRowCellFromSelLastCheck);
							});
							columnTabRowCellToSelLastCheck.addEventListener('click', function () {
								Tracking('selTo', selTo.value, reportTabTrackClassGrab, selToColor.value, tableCheckLimit.value, columnTabRowCellToSelLastCheck, columnTabRowCellFromSelLastCheck);
							});

							columnTabRowCellFromSelLastCheck.addEventListener('click', function () {
								Tracking('selTo', selTo.value, reportTabTrackClassGrab, selToColor.value, tableCheckLimit.value, columnTabRowCellToSelLastCheck, columnTabRowCellFromSelLastCheck, downloadCSVClassGrab);
								//alert('Called tracking');
								downloadCSVClassGrab.disabled = false;
							});
							tableCheckLimit.addEventListener('click', function () {
								console.log(this.value);
								Tracking('selTo', selTo.value, reportTabTrackClassGrab, selToColor.value, tableCheckLimit.value);
							});
						}
						//console.log(columnTabRow);

					}

					function AppearDisappearColumn(table, columnName, parameter, imgReport, tabReportDiv2) {


						var tableHeader = table.getElementsByClassName('repTabNewRowOneClass')[0];
						console.log(tableHeader);
						var tableHeaderArray = [...tableHeader.children];
						console.log(tableHeaderArray);
						tableHeaderArray.forEach(a => {

							if (a.innerHTML == columnName) {
								//a.style.display = 'none';
								console.log(a);
								console.log(a.className);
								var tableMatchClass = table.getElementsByClassName(a.className)
								tableMatchClassArray = [...tableMatchClass]
								tableMatchClassArray.forEach(a => {
									a.classList.toggle('colNone');
								});

								//FormTable2(imgReport.parentNode.parentNode.tableInfo, tabReportDiv2, a.innerHTML);
							}
						});
					}

					var trackObj = {};
					var repTabNewRowClassGrab2;
					var repTabNewRowClassGrab2Arr;
					var inspClassGrab; //grabbing inpsection column classname
					var inspClassGrabArr;
					var rowTdArr;
					var inspDateClassGrab;
					var inspDateClassGrabArrTrans = [];
					var inspDateClassGrabArr;
					var InspTypeNameClassGrab;
					var InspTypeNameClassGrabArr;
					var InspTypeNameClassGrabArrTrans = [];
					var InspTypeNameClassGrabArr2;
					var date1;
					var date2;
					var diffTime;
					var diffDays;
					var rowGrab;
					var rowGrabArr;
					var rowGrabArr2;
					var rowGrabIndex;
					var totalDays = 0;
					var trackObj2Arr = [];
					var totalDaysBool = true;
					//var totalCell; //will be a reference to cell for holding total.
					var cellDays;
					var bIndexFrom;
					var trackObjSummary = {};
					var trackArrSummary = [];

					var downloadCSV;

					var count = 0;
					var loopCounter = 0;
					function trackObject() {
						//empty object; we want to use it's prototype
					}



					function Tracking(key, val, table, col, limit, checkLast, checkFirst, selectrepTabNewRowClassGrab2Arr) {
						//alert('tracking');
						console.log(checkLast);
						console.log(checkFirst);
						var ChartD3; //a function
						loopCounter = 0;
						trackObj2Arr = [];
						/*
						if (checkLast.checked) {
							alert('Checking last!');
						}
						*/
						console.log(limit);
						console.log(table);



						if (key == 'selFrom') {
							repTabNewRowClassGrab2 = table.getElementsByClassName('repTabNewRowClassModify');
							console.log(repTabNewRowClassGrab2);
						}
						if (key == 'selTo') {
							repTabNewRowClassGrab2 = table.getElementsByClassName('repTabNewRowClassModify1');
							console.log(repTabNewRowClassGrab2.length);
						}


						/*
						if (selectrepTabNewRowClassGrab2Arr){
									console.log(selectrepTabNewRowClassGrab2Arr);
									repTabNewRowClassGrab2 = selectrepTabNewRowClassGrab2Arr.getElementsByClassName('repTabNewRowClassModify1');
									alert('Selected Row:' + b);
									var tranRepTabNewRowClassGrab2Arr = [];
									tranRepTabNewRowClassGrab2Arr.push(repTabNewRowClassGrab2Arr[selectrepTabNewRowClassGrab2Arr]);
									repTabNewRowClassGrab2Arr = tranRepTabNewRowClassGrab2Arr;
									console.log(repTabNewRowClassGrab2Arr);
						}
						*/




						trackObj[key] = val;
						console.log(trackObj);
						//for (var aSel in trackObj){
						//if (trackObj.hasOwnProperty(aSel)){

						console.log(key, ' , ', trackObj[key]);


						var repTabNewRowClassGrab2Arr2;//for use in selective charting.

						function subFunc(row, outlierObj, indivOutlierObj) {
							//console.log(repTabNewRowClassGrab2);
							console.log(row);
							//Resetting classes back to normal (modified at point of entering for-loop).  I think this is for rows
							var tableRows = table.getElementsByTagName('tr');
							var tableRowsArr = [...tableRows];
							console.log(tableRowsArr);
							tableRowsArr.forEach(function (g) {
								g.classList = ["repTabNewRowClass"];
							});



							//We have to reset cell classes;
							var tableRows = table.getElementsByTagName('td');
							var tableRowsArr = [...tableRows];
							console.log(tableRowsArr);
							tableRowsArr.forEach(function (g) {
								g.classList.remove('notOutlierDate');
								g.classList.remove('notOutlierInsp');
							});


							console.log(tableRowsArr);
							trackObj2Arr = [];
							console.log(row);

							if (row) { //row is charting a trackedRow the other option is for whole table
								repTabNewRowClassGrab2 = (row) ? row : table.getElementsByClassName('repTabNewRowClassModify1');
							} //else, natural call, tracks nothing, just sets selFrom. In this case, repTabNewRowClassGrab2 grabs repTabNewRowClassModify (not repTabNewRowClassModify1)

							console.log(repTabNewRowClassGrab2);
							repTabNewRowClassGrab2Arr = [...repTabNewRowClassGrab2];
							inspClassGrab = table.getElementsByClassName('InspTypeNameClass');
							inspClassGrabArr = [...inspClassGrab];
							console.log(repTabNewRowClassGrab2);
							console.log(repTabNewRowClassGrab2Arr);


							console.log(outlierObj);
							alert('Old row length: ' + repTabNewRowClassGrab2Arr.length);
							console.log(repTabNewRowClassGrab2Arr);

							if (outlierObj) {

								repTabNewRowClassGrab2 = table.getElementsByClassName('repTabNewRowClassModify1');
								repTabNewRowClassGrab2Arr = [...repTabNewRowClassGrab2];
								console.log(repTabNewRowClassGrab2Arr);
								var repTabNewRowClassGrab2ArrOutlier = [];
								repTabNewRowClassGrab2Arr.forEach(node => {
									if ((outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1) && (outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML) > -1) && (JSON.stringify(outlierObj.productAdd).indexOf(JSON.stringify({ prod: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, add: node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML })) > -1)) {
										console.log('Filtering out');
										console.log(outlierObj.productAdd.indexOf({ prod: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, add: node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML }));
										console.log('Product ', outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), ' Add ', outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML), outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) == outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML));
										console.log(node);
									} else {
										console.log('Adding...');
										console.log('product ', (outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1), ' address ', (outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML) > -1), ' and: ', outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), '|', outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML));
										console.log(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, (outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1), outlierObj.product, node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML, (outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML) > -1), outlierObj.add, ' and: ', outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), '|', outlierObj.product.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML));
										//console.log(node);
										console.log('Product ', outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), ' Add ', outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML), outlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) == outlierObj.add.indexOf(node.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML));
										repTabNewRowClassGrab2ArrOutlier.push(node);
									}

									//alert('New row length: ' +repTabNewRowClassGrab2Arr.length);
									//alert('New row length2: ' +repTabNewRowClassGrab2ArrOutlier.length);
								});
								console.log(repTabNewRowClassGrab2ArrOutlier);
								repTabNewRowClassGrab2Arr = repTabNewRowClassGrab2ArrOutlier;
							}

							console.log(indivOutlierObj);
							if (indivOutlierObj) {
								var repTabNewRowClassGrab2ArrOutlier = [];
								var repTabNewRowClassGrab2DateArrOutlier = [];
								repTabNewRowClassGrab2 = table.getElementsByClassName('repTabNewRowClassModify1');
								repTabNewRowClassGrab2Arr = [...repTabNewRowClassGrab2];
								console.log(repTabNewRowClassGrab2Arr);
								var repTabNewRowClassGrab2Date = table.getElementsByClassName('InspDateClassModify1');
								console.log(repTabNewRowClassGrab2Date);
								var repTabNewRowClassGrab2DateArr = [...repTabNewRowClassGrab2Date];
								repTabNewRowClassGrab2Arr = [...repTabNewRowClassGrab2];
								var repTabNewRowClassGrab2ArrOutlier = [];
								repTabNewRowClassGrab2Arr.forEach((node, i) => {
									if ((indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1) && (indivOutlierObj.insp.indexOf(node.innerHTML) > -1) && (JSON.stringify(indivOutlierObj.prodInspArr).indexOf(JSON.stringify({ prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName: node.innerHTML })) > -1)) {
										alert('Excluding');
										console.log(JSON.stringify(indivOutlierObj.prodInspArr).indexOf(JSON.stringify({ prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName: node.innerHTML })));
										//console.log(JSON.stringify('"'+{prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName:node.innerHTML}+'"'));
										console.log(JSON.stringify("{prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName:node.innerHTML}"));
										console.log(indivOutlierObj.prodInspArr);
										console.log('prodIndex', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), 'InspIndex', indivOutlierObj.insp.indexOf(node.innerHTML));
										console.log('Prod', node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, 'Insp', node.innerHTML);
										console.log('Filtering out');
										//console.log(JSON.stringify({prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName:node.innerHTML}) == JSON.stringify(indivOutlierObj.prodInspArr[0]));
										console.log({ prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName: node.innerHTML }, indivOutlierObj.prodInspArr[0]);
										// indivOutlierObj.prodInspArr.indexOf({prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName:node.innerHTML});
										//console.log('Product ', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), ' Insp ',indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML), indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) == indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML));
										console.log(node);
										console.log(node.parentNode);
										console.log(node.parentNode.getElementsByClassName('InspDateClass'));
										console.log(node.parentNode.getElementsByClassName('InspDateClass').length);
										var nodeIndex = [...node.parentNode.children].indexOf(node);
										var dateGrab = node.parentNode.getElementsByClassName('InspDateClass');
										var dateGrabArr = [...dateGrab];

										console.log(dateGrabArr);
										var nodeDate = dateGrabArr.find((dateNode, i) => {
											console.log(dateNode, ',', i);
											return [...node.parentNode.children].indexOf(dateNode) > nodeIndex;
										});

										console.log(nodeDate);
										var ind = dateGrabArr.indexOf(nodeDate);
										console.log(ind);
										var ind = dateGrabArr.indexOf(nodeDate) - 1;
										console.log(ind);
										console.log(dateGrabArr[ind]);


										//var nodeArr = [...node.parentNode.children];
										//var nodeArr2 = nodeArr.slice(0,nodeIndex);
										//var nodeArr2.get
										//getting the date before the node //getElementsByInspection,
										var lastVar = node.parentNode.getElementsByClassName('InspDateClass')[node.parentNode.getElementsByClassName('InspDateClass').length - 1];
										//console.log(lastVar);
										//nodeArr.lastIndexOf(lastVar, nodeArr.indexOf(node));
										//console.log([...node.parentNode.children].lastIndexOf(node.parentNode.getElementsByClassName('InspDateClass')[[...node.parentNode.children].lastIndexOf(node.parentNode.getElementsByClassName('InspDateClass').length],[...node.parentNode.children].indexOf(node))));
									} else {
										console.log(JSON.stringify(indivOutlierObj.prodInspArr).indexOf(JSON.stringify({ prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName: node.innerHTML })));
										console.log(JSON.stringify({ prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName: node.innerHTML }));
										//console.log(JSON.stringify('"'+{prodName: node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, inspName:node.innerHTML}+'"'));
										console.log(indivOutlierObj.prodInspArr);
										console.log('prodIndex', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), 'InspIndex', indivOutlierObj.insp.indexOf(node.innerHTML));
										console.log('Adding...');
										console.log('product ', (indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1), ' Insp ', (indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML) > -1), ' and: ', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), '|', indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML));
										console.log(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML, (indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) > -1), indivOutlierObj.product, node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML, (indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML) > -1), indivOutlierObj.insp, ' and: ', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), '|', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML));
										console.log(node);
										var nodeIndex = [...node.parentNode.children].indexOf(node);
										var dateGrab = node.parentNode.getElementsByClassName('InspDateClassModify1');
										var nodeGrab = node.parentNode.getElementsByClassName('repTabNewRowClassModify1');
										var ind = [...nodeGrab].indexOf(node);

										var dateNode = dateGrab[ind];
										/*
										var dateGrabArr = [...dateGrab];
									 
										 console.log(dateGrabArr);
										 var nodeDate = dateGrabArr.find((dateNode, i)=>{
											console.log(dateNode,',',i);
											if (i != dateGrabArr.length){
												if ([...node.parentNode.children].indexOf(dateNode) > nodeIndex){
													return dateGrabArr[i-1];
													//return [...node.parentNode.children].indexOf(dateNode) > nodeIndex;
												}
											}
										 });
										 
										 console.log(nodeDate);
										 var ind = dateGrabArr.indexOf(nodeDate);
										 console.log(ind);
										 var ind = dateGrabArr.indexOf(nodeDate)-1;
										 console.log(ind);
										 console.log(dateGrabArr[ind]);
										 
										 */

										//node.classList.add('notOutlierInsp');
										console.log(node);
										//console.log([...node.parentNode.children].indexOf(node));
										console.log('Product ', indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML), ' Insp ', indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML), indivOutlierObj.product.indexOf(node.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML) == indivOutlierObj.insp.indexOf(node.parentNode.getElementsByClassName('InspTypeNameClass')[0].innerHTML));
										node.classList.add('notOutlierInsp');

										//adding outlier to first date and first inspection, as we grab the entire inspections and inspection dates in a row (InspTypeNameClassGrab and inspDateClassGrab grab everything not just modify)
										node.parentNode.getElementsByClassName('InspDateClass')[0].classList.add('notOutlierDate');
										node.parentNode.getElementsByClassName('InspTypeNameClass')[0].classList.add('notOutlierInsp');

										console.log(node.parentNode.getElementsByClassName('InspDateClass')[0]);

										repTabNewRowClassGrab2ArrOutlier.push(node);
										repTabNewRowClassGrab2DateArr[i].classList.add('notOutlierDate');
										//repTabNewRowClassGrab2DateArrOutlier.push(dateGrabArr[ind]); //to help get dates for non-outliers
										dateNode.classList.add('notOutlierDate');
										repTabNewRowClassGrab2DateArrOutlier.push(dateNode);
									}

									//alert('New row length: ' +repTabNewRowClassGrab2Arr.length);
									//alert('New row length2: ' +repTabNewRowClassGrab2ArrOutlier.length);
								});
								console.log(repTabNewRowClassGrab2ArrOutlier);
								repTabNewRowClassGrab2Arr = repTabNewRowClassGrab2ArrOutlier;

							}

							console.log(repTabNewRowClassGrab2Arr);
							console.log(repTabNewRowClassGrab2DateArrOutlier);


							repTabNewRowClassGrab2Arr.forEach((b, bIndex) => { //for each inspection to be tracked 


								console.log(b.className);
								console.log(b);
								console.log(b.parentNode);


								if (b.className == 'InspTypeNameClass repTabNewRowClassModify' && b.innerHTML == trackObj[key]) {

									console.log(b.className);
									console.log(b.innerHTML);
									console.log(trackObj[key]);
									console.log('Entered... From');
									//b.style.backgroundColor = col;
									console.log(trackObj[key]);

									rowGrab = b.parentNode.children;
									rowGrabArr = [...rowGrab];
									rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
									console.log(rowGrabArr2);
									console.log(checkLast.checked);
									console.log(b);
									bIndexFrom = (checkLast.checked) ? rowGrabArr2.lastIndexOf(b.innerHTML) : rowGrabArr2.indexOf(b.innerHTML);//starting from fromIndex position
									console.log(bIndexFrom);
									rowGrabArr[bIndexFrom].style.backgroundColor = col;

								} else if (b.className == 'InspTypeNameClass repTabNewRowClassModify1' && b.innerHTML == trackObj[key]) {
									console.log('Entered... To');
									console.log(b.className);
									console.log(b.innerHTML);
									console.log(trackObj[key]);
									console.log(repTabNewRowClassGrab2Arr[bIndex]);
									console.log(b);
									console.log(count++);
									inspDateClassGrabArrTrans = [];
									InspTypeNameClassGrabArrTrans = [];
									console.log('To: ');
									//b.style.backgroundColor = 'aquamarine';
									//b.style.backgroundColor = col;
									inspDateClassGrab = b.parentNode.getElementsByClassName('InspDateClass'); //grab all the dates on the row of the inspection to be tracked.
									inspDateClassGrabArr = [...inspDateClassGrab];
									rowGrab = b.parentNode.children;
									rowGrabArr = [...rowGrab];
									rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
									console.log(rowGrabArr2);
									//console.log(checkLast.checked);
									console.log(b);
									console.log(bIndexFrom);
									var bIndexTo = (checkLast.checked) ? rowGrabArr2.lastIndexOf(b.innerHTML) : rowGrabArr2.indexOf(b.innerHTML, bIndexFrom + 1);//starting from fromIndex position
									console.log(bIndexTo);
									var rowGrabIndex = rowGrabArr.findIndex((td) => {
										return td.className == b.className;//'InspTypeNameClass repTabNewRowClassModify1'; //returning an array of matching classnames might be more accurate, or many inspe

									});
									console.log(rowGrabIndex);
									console.log(inspDateClassGrabArr);
									InspTypeNameClassGrab = b.parentNode.getElementsByClassName('InspTypeNameClass');//grab all the inspections on the row of the inspection to be tracked.
									InspTypeNameClassGrabArr = [...InspTypeNameClassGrab];
									console.log(InspTypeNameClassGrabArr);

									inspDateClassGrabArr.forEach(arrMember => {
										inspDateClassGrabArrTrans.push(arrMember.innerHTML);
									});

									InspTypeNameClassGrabArr.forEach(arrMember => {
										InspTypeNameClassGrabArrTrans.push(arrMember.innerHTML);
									});
									console.log(inspDateClassGrabArrTrans);
									console.log(InspTypeNameClassGrabArrTrans);

									//taking it from the selFrom starting point, not just from the beginning of inspections.
									console.log(bIndexFrom);
									console.log(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']));
									inspDateClassGrabArr2 = inspDateClassGrabArrTrans.slice(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']), ((checkLast.checked) ? InspTypeNameClassGrabArrTrans.lastIndexOf(b.innerHTML) + 1 : InspTypeNameClassGrabArrTrans.indexOf(b.innerHTML, InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']) + 1) + 1)); //bIndexFrom+1 to prevent overlap with fromPosition, and bIndexFrom+1) +1 to include target value in array.slice;
									InspTypeNameClassGrabArr2 = InspTypeNameClassGrabArrTrans.slice(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']), ((checkLast.checked) ? (InspTypeNameClassGrabArrTrans.lastIndexOf(b.innerHTML) + 1) : InspTypeNameClassGrabArrTrans.indexOf(b.innerHTML, InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']) + 1) + 1)); //bIndexFrom+1 to prevent overlap with fromPosition, and bIndexFrom+1) +1 to include target value in array.slice //trackObj['selFrom'];
									console.log(inspDateClassGrabArr2);
									console.log(trackObj['selFrom']);
									console.log(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']));
									console.log(InspTypeNameClassGrabArr2);

									date1 = new Date(inspDateClassGrabArr2[0]);
									//console.log(date1);
									//date2 = new Date(inspDateClassGrabArr2[inspDateClassGrabArr2.length -1]);
									//console.log(date2);
									//diffTime = Math.abs(date2 - date1);
									//console.log(diffTime);
									//diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
									if (b.parentNode.getElementsByClassName('cellDaysClass').length) {
										var inspTypeNameClassRepTabNewRowClassModify1Grab = b.parentNode.getElementsByClassName('InspTypeNameClass repTabNewRowClassModify1');
										for (var e = 0; e < inspTypeNameClassRepTabNewRowClassModify1Grab.length; e++) {
											inspTypeNameClassRepTabNewRowClassModify1Grab[e].style.backgroundColor = 'pink';
										}
										console.log(inspTypeNameClassRepTabNewRowClassModify1Grab);
										var cellDaysClassGrab = b.parentNode.getElementsByClassName('cellDaysClass');
										console.log(cellDaysClassGrab);
										rowGrab = b.parentNode.children;
										rowGrabArr = [...rowGrab];
										rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });

										while (b.parentNode.getElementsByClassName('cellDaysClass').length) {
											console.log(inspTypeNameClassRepTabNewRowClassModify1Grab[d]);
											var oldCell = b.parentNode.getElementsByClassName('cellDaysClass')[0];
											var oldCellIndex = rowGrabArr.indexOf(oldCell);
											console.log(oldCellIndex);
											b.parentNode.deleteCell(oldCellIndex);
											console.log('deleting...');
											rowGrab = b.parentNode.children;
											rowGrabArr = [...rowGrab];
											rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
											bIndexTo = (checkLast.checked) ? rowGrabArr2.lastIndexOf(b.innerHTML) : rowGrabArr2.indexOf(b.innerHTML, bIndexFrom + 1);//starting from fromIndex position, so as not to overlap fromIndex position
										}
									}
									console.log(bIndexTo);
									if (!checkLast.checked) {
										console.log(bIndexTo);
										console.log(rowGrabArr[bIndexTo]);
										cellDays = b.parentNode.insertCell(bIndexTo + 1); //rowGrabArr2.indexOf(b.innerHTML);
										rowGrab = b.parentNode.children;
										rowGrabArr = [...rowGrab];
										rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
										date1 = new Date(inspDateClassGrabArr2[0]);
										console.log(date1);
										console.log(b.innerHTML);
										console.log(inspDateClassGrabArr2);
										console.log(InspTypeNameClassGrabArr2);
										console.log(InspTypeNameClassGrabArr2.indexOf(b.innerHTML));
										console.log(inspDateClassGrabArr2[InspTypeNameClassGrabArr2.indexOf(b.innerHTML, 1)]);
										console.log()
										date2 = new Date(inspDateClassGrabArr2[InspTypeNameClassGrabArr2.indexOf(b.innerHTML, 1)]);
										console.log(date2);
										diffTime = Math.abs(date2 - date1);
										diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
										console.log(diffDays);
										rowGrabArr[bIndexTo].style.backgroundColor = col;
										console.log(rowGrabArr[bIndexTo]);
										cellDays.setAttribute('class', 'cellDaysClass');
										cellDays.innerHTML = diffDays + ' day(s)';


										//b.parentNode.classList.add('Searched');
										console.log(b.parentNode.className);
									} else {
										console.log(bIndexTo);
										console.log(rowGrabArr[bIndexTo]);
										cellDays = b.parentNode.insertCell(bIndexTo + 1); //rowGrabArr2.indexOf(b.innerHTML)
										rowGrab = b.parentNode.children;
										rowGrabArr = [...rowGrab];
										rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
										date1 = new Date(inspDateClassGrabArr2[0]);
										console.log(date1);
										date2 = new Date(inspDateClassGrabArr2[inspDateClassGrabArr2.length - 1]);
										console.log(date2);
										diffTime = Math.abs(date2 - date1);
										console.log(diffTime);
										diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
										console.log(diffDays);
										rowGrabArr[bIndexTo].style.backgroundColor = col;
										cellDays.setAttribute('class', 'cellDaysClass');
										cellDays.innerHTML = diffDays + ' day(s)';

										//b.parentNode.classList.remove('Searched');
										console.log(b.parentNode.className);

									}

									console.log(b.parentNode.className);
									//If you want to take it from beginnings, delete the 2 in the loop;

									//dates and inspetions will correspond. This for loop will give the difference between the first inspection, and all subsequent inspections.

									totalDays = 0;
									if (checkFirst.checked) {
										//var trackObj2 = {};
										//var trackObj2 =  new trackObject()
										//trackObj2[InspTypeNameClassGrabArr2[0]] = 0;
										alert('Disaggregating days by inspection');
										console.log(InspTypeNameClassGrabArr2);
										console.log(InspTypeNameClassGrabArrTrans);
										//Clearing days inserts
										var cellDaysClassArr = b.parentNode.getElementsByClassName('cellDaysClass');
										var cellDaysClassArr2 = [...cellDaysClassArr];
										cellDaysClassArr2.forEach((a) => {
											var oldCellIndex = rowGrabArr2.indexOf(a.innerHTML);
											b.parentNode.deleteCell(oldCellIndex);
										});

										console.log(InspTypeNameClassGrabArrTrans[0]);
										console.log(rowGrabArr2);
										var cellDaysStart = rowGrabArr2.indexOf(InspTypeNameClassGrabArrTrans[0]) + 1;
										//if you want this for to act on the selected range, then use inspDateClassGrabArr2 not Trans
										console.log(InspTypeNameClassGrabArr2);
										console.log(inspDateClassGrabArr2);
										var list = [...b.parentNode.classList];
										console.log(list);
										console.log(b.innerHTML);
										console.log(list.indexOf(b.innerHTML));
										console.log(!list.indexOf(b.innerHTML));
										console.log(list.indexOf(b.innerHTML) == -1);
										//loopCounter = 0;
										if ((!checkLast.checked) ? list.indexOf(b.innerHTML) == -1 : true) { //if last checbox is not checked, stop at first instance in tracked row. It it is checked, don't impose restrictions. Allow all instances of b.innerHMTL into the loop. This code works with ternary that translates InspTypeNameClassGrabArrTrans to InspTypeNameClassGrabArr2
											if (list.indexOf('rowChecked') != -1) { //however, allow it only once as everything in it would already have been summed during the first pass.
												console.log(list.indexOf('rowChecked'));
											} else {
												var trackObj2 = {};
												trackObj2[InspTypeNameClassGrabArr2[0]] = 0;
												console.log('Entered...');
												console.log(trackObj2);
												console.log(InspTypeNameClassGrabArr2);
												console.log(inspDateClassGrabArr2);
												loopCounter++;
												console.log(trackObj2);
												console.log(trackObj2['Routine']);

												console.log('----------')
												for (var d = 1; d < inspDateClassGrabArr2.length; d++) { //this for, represents all the inspections in a row; that is the tracked row.
													console.log(inspDateClassGrabArr2[d]);
													console.log(trackObj2);
													date1 = new Date(inspDateClassGrabArr2[0]);
													date2 = new Date(inspDateClassGrabArr2[d]);
													diffTime = Math.abs(date2 - date1);
													diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
													console.log(`${InspTypeNameClassGrabArr2[0]} to ${InspTypeNameClassGrabArr2[d]} :${diffDays} +  days`);
													//trackObj2[InspTypeNameClassGrabArr2[d]] = diffDays;
													//++trackObject.prototype[InspTypeNameClassGrabArr2[d]];
													trackObj2[InspTypeNameClassGrabArr2[d]] = (trackObj2[InspTypeNameClassGrabArr2[d]]) ? (trackObj2[InspTypeNameClassGrabArr2[d]]) + diffDays : diffDays;
													//console.log(trackObj2);

													var cellDays = b.parentNode.insertCell(rowGrabArr2.indexOf(InspTypeNameClassGrabArr2[d], cellDaysStart) + 1);
													cellDays.setAttribute('class', 'cellDaysClass');
													cellDays.innerHTML = diffDays + ' day(s)';
													cellDays.style.backgroundColor = 'skyblue';

													//refactoring rows
													rowGrab = b.parentNode.children;
													rowGrabArr = [...rowGrab];
													rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });

													//console.log(cellDays.innerHTML);
													cellDaysStart = rowGrabArr2.indexOf(cellDays.innerHTML);

													totalDays += diffDays;
													console.log(trackObj2);
												}

												//console.log(trackObj2);
												var a;
												a = { ...trackObj2 };
												console.log(a);
												b.parentNode.classList.add(b.innerHTML);
												b.parentNode.classList.add('rowChecked');
												console.log(b.parentNode.classList);
												trackObj2Arr.push(a);
												console.log(trackObj2Arr);
											}

										} else {
											console.log('Already Searched');
										}
										console.log(trackObj2);
										trackObj2['total'] = totalDays;
										console.log(totalDays);
									}

									//Total days in this context will be first date minus last date. All the inspections here are, 'from the date of the beggining inspection, to that inspection, the date of the beginning inspection, to that inspection'. To get intermediate dates, we loop through the objects.
									totalDays = Math.abs(new Date(inspDateClassGrabArr2[0]) - new Date(inspDateClassGrabArr2[inspDateClassGrabArr2.length - 1]));
									totalDays = Math.ceil(totalDays / (1000 * 60 * 60 * 24));
									console.log(totalDays);
									//trackObj2Arr.push(trackObj2);
									trackObj2Arr.loopVal = loopCounter;
									console.log(trackObj2Arr);
									//Total Number of Days for row (i.e. a product)
									console.log(b.parentNode.getElementsByClassName('totalCellClass'));
									if (!b.parentNode.getElementsByClassName('totalCellClass').length) {
										totalCell = b.parentNode.insertCell(-1);
										totalCell.innerHTML = totalDays + ' day(s) total';
										console.log(totalCell);
										totalCell.setAttribute('class', 'totalCellClass');
										if (totalDays > limit) {
											totalCell.style.color = 'red';
										} else {
											totalCell.style.color = 'green';
										}
									} else {
										totalCell.innerHTML = totalDays + ' day(s) total';
										if (totalDays > limit) {
											totalCell.style.color = 'red';
										} else {
											totalCell.style.color = 'green';
										}
									}
									console.log(bIndex);
								} else if (trackObj[key] == 'Select One') {
									console.log(b);
									console.log(row);
									console.log(b.className);
									console.log(b.innerHTML);
									console.log(trackObj[key]);
									console.log(repTabNewRowClassGrab2Arr);
									b.style.backgroundColor = 'pink';//if no match, restore back to backgroundColor.




									//check if selto is set. if not, default to first inspection
									//check if selFrom is set. If yes, use. if not, default to end of trackRow (i.e, do the whole row)
									console.log(trackObj['selTo']);
									console.log(trackObj['selFrom']);


									//alert('No ')
									//console.log(repTabNewRowClassGrab2Arr[bIndex]);
									repTabNewRowClassGrab2Arr2 = [...repTabNewRowClassGrab2Arr];

									console.log(b);
									inspDateClassGrabArrTrans = [];
									InspTypeNameClassGrabArrTrans = [];
									console.log('To: ');
									if (indivOutlierObj) {
										inspDateClassGrab = b.parentNode.getElementsByClassName('notOutlierDate'); //[...repTabNewRowClassGrab2DateArrOutlier];
										console.log('custom');
									} else {//normal
										inspDateClassGrab = b.parentNode.getElementsByClassName('InspDateClass'); //grab all the dates on the row of the inspection to be tracked.
									}
									console.log(inspDateClassGrab);

									inspDateClassGrabArr = [...inspDateClassGrab];
									rowGrab = b.parentNode.children;
									rowGrabArr = [...rowGrab];
									rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
									console.log(rowGrabArr2);
									//console.log(checkLast.checked);
									console.log(b);
									console.log(bIndexFrom);
									var bIndexTo = rowGrabArr2.lastIndexOf(b.innerHTML);//starting from fromIndex position
									console.log(bIndexTo);
									console.log(inspDateClassGrabArr);

									if (indivOutlierObj) {
										InspTypeNameClassGrab = b.parentNode.getElementsByClassName('notOutlierInsp');
										console.log('custom');
									} else { //normal
										InspTypeNameClassGrab = b.parentNode.getElementsByClassName('InspTypeNameClass');//grab all the inspections on the row of the inspection to be tracked.
									}

									InspTypeNameClassGrabArr = [...InspTypeNameClassGrab];
									console.log(InspTypeNameClassGrabArr);

									inspDateClassGrabArr.forEach(arrMember => {
										inspDateClassGrabArrTrans.push(arrMember.innerHTML);
									});

									InspTypeNameClassGrabArr.forEach(arrMember => {
										InspTypeNameClassGrabArrTrans.push(arrMember.innerHTML);
									});
									console.log(inspDateClassGrabArrTrans);
									console.log(InspTypeNameClassGrabArrTrans);

									//taking it from the selFrom starting point, not just from the beginning of inspections.
									console.log(bIndexFrom);
									console.log(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']));
									inspDateClassGrabArr2 = inspDateClassGrabArrTrans; //.slice(0, (InspTypeNameClassGrabArrTrans.lastIndexOf(b.innerHTML) +1)); //Including the whole trackrow, +1 to include target value in array.slice;
									InspTypeNameClassGrabArr2 = InspTypeNameClassGrabArrTrans; //.slice(InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']), ((checkLast.checked)?(InspTypeNameClassGrabArrTrans.lastIndexOf(b.innerHTML) +1):InspTypeNameClassGrabArrTrans.indexOf(b.innerHTML, InspTypeNameClassGrabArrTrans.indexOf(trackObj['selFrom']) +1)+1)); //bIndexFrom+1 to prevent overlap with fromPosition, and bIndexFrom+1) +1 to include target value in array.slice //trackObj['selFrom'];
									console.log(inspDateClassGrabArr2);
									console.log(InspTypeNameClassGrabArr2);

									date1 = new Date(inspDateClassGrabArr2[0]);
									/*
									if (b.parentNode.getElementsByClassName('cellDaysClass').length) {
										var inspTypeNameClassRepTabNewRowClassModify1Grab = b.parentNode.getElementsByClassName('InspTypeNameClass repTabNewRowClassModify1');
										for (var e = 0;e < inspTypeNameClassRepTabNewRowClassModify1Grab.length;e++){
											inspTypeNameClassRepTabNewRowClassModify1Grab[e].style.backgroundColor = 'pink';
										}
										console.log(inspTypeNameClassRepTabNewRowClassModify1Grab);
										var cellDaysClassGrab = b.parentNode.getElementsByClassName('cellDaysClass');
										console.log(cellDaysClassGrab);
										rowGrab = b.parentNode.children;
											rowGrabArr = [...rowGrab];
											rowGrabArr2 = rowGrabArr.map(a=>{return a.innerHTML});
											
										while (b.parentNode.getElementsByClassName('cellDaysClass').length){
											var oldCell = b.parentNode.getElementsByClassName('cellDaysClass')[0];
											var oldCellIndex = rowGrabArr.indexOf(oldCell);
											console.log(oldCellIndex);
											b.parentNode.deleteCell(oldCellIndex);
											console.log('deleting...');
											rowGrab = b.parentNode.children;
											rowGrabArr = [...rowGrab];
											rowGrabArr2 = rowGrabArr.map(a=>{return a.innerHTML});
											//bIndexTo = (checkLast.checked)?rowGrabArr2.lastIndexOf(b.innerHTML):rowGrabArr2.indexOf(b.innerHTML, bIndexFrom+1);//starting from fromIndex position, so as not to overlap fromIndex position
										}
									}
									*/


									console.log(b.parentNode.className);
									//If you want to take it from beginnings, delete the 2 in the loop;

									//dates and inspetions will correspond. This for loop will give the difference between...

									totalDays = 0;
									if (checkFirst.checked) {
										//var trackObj2 = {};
										//var trackObj2 =  new trackObject()
										//trackObj2[InspTypeNameClassGrabArr2[0]] = 0;
										//alert('Disaggregating days by inspection');
										console.log(InspTypeNameClassGrabArr2);
										console.log(InspTypeNameClassGrabArrTrans);
										//Clearing days inserts
										var cellDaysClassArr = b.parentNode.getElementsByClassName('cellDaysClass');
										var cellDaysClassArr2 = [...cellDaysClassArr];
										console.log(cellDaysClassArr);
										cellDaysClassArr2.forEach((a) => {
											var oldCellIndex = rowGrabArr2.indexOf(a.innerHTML);
											b.parentNode.deleteCell(oldCellIndex);
											rowGrab = b.parentNode.children;
											rowGrabArr = [...rowGrab];
											rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });
										});

										console.log(InspTypeNameClassGrabArrTrans[0]);
										console.log(rowGrabArr2);
										var cellDaysStart = rowGrabArr2.indexOf(InspTypeNameClassGrabArrTrans[0]) + 1;
										console.log(cellDaysStart);
										//if you want this for to act on the selected range, then use inspDateClassGrabArr2 not Trans
										console.log(InspTypeNameClassGrabArr2);
										console.log(inspDateClassGrabArr2);
										var list = [...b.parentNode.classList];
										console.log(list);
										console.log(b.innerHTML);
										console.log(list.indexOf(b.innerHTML));
										console.log(!list.indexOf(b.innerHTML));
										console.log(list.indexOf(b.innerHTML) == -1);
										console.log((!checkLast.checked));
										//loopCounter = 0;
										console.log(b.innerHTML);
										console.log(list);
										console.log(list.indexOf('rowChecked'));

										//if (list.indexOf('rowChecked') > -1){ //however, allow it only once as everything in it would already have been summed during the first pass.
										console.log(list.indexOf('rowChecked'));
										console.log(InspTypeNameClassGrabArr2);

										//} else {
										console.log(b.parentNode);
										//var trackObj2 = new trackObject();
										var trackObj2 = {};
										trackObj2.sumDays = {};
										trackObj2.numInspections = {};
										//trackObject.prototype.INITIAL = 4;
										//console.log(trackObj2.INITIAL)
										console.log(trackObject);
										trackObj2[InspTypeNameClassGrabArr2[0]] = 0;
										console.log('Entered...');
										console.log(trackObj2);
										console.log(InspTypeNameClassGrabArr2);
										console.log(inspDateClassGrabArr2);
										loopCounter++;
										console.log(trackObj2);
										console.log(trackObj2['Routine']);

										console.log('----------')

										for (var d = 1; d < inspDateClassGrabArr2.length; d++) { //this for, represents all the inspections in a row; that is the tracked row.
											console.log(cellDaysStart);
											console.log(inspDateClassGrabArr2[d]);
											console.log(InspTypeNameClassGrabArr2[d]);
											console.log(trackObj2);
											date1 = new Date(inspDateClassGrabArr2[d - 1]);
											date2 = new Date(inspDateClassGrabArr2[d]);
											diffTime = Math.abs(date2 - date1);
											diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
											console.log(`${InspTypeNameClassGrabArr2[d - 1]} to ${InspTypeNameClassGrabArr2[d]} :${diffDays} +  days`);
											//trackObj2[InspTypeNameClassGrabArr2[d]] = diffDays;
											//++trackObject.prototype[InspTypeNameClassGrabArr2[d]];
											//trackObj2[InspTypeNameClassGrabArr2[d]] = (trackObj2[InspTypeNameClassGrabArr2[d]])? (trackObj2[InspTypeNameClassGrabArr2[d]]) + diffDays:diffDays;
											trackObj2.sumDays[InspTypeNameClassGrabArr2[d]] = (trackObj2.sumDays[InspTypeNameClassGrabArr2[d]]) ? (trackObj2.sumDays[InspTypeNameClassGrabArr2[d]]) + diffDays : diffDays;

											trackObj2.numInspections[InspTypeNameClassGrabArr2[d]] = (trackObj2.numInspections[InspTypeNameClassGrabArr2[d]]) ? ++(trackObj2.numInspections[InspTypeNameClassGrabArr2[d]]) : 1; //Initializing properties on prototype to 1 and incrementing.
											console.log('How many times');


											console.log(trackObj2);
											console.log(b.parentNode.children.length);
											console.log(b.parentNode);
											console.log(InspTypeNameClassGrabArr2[d]);
											console.log(rowGrabArr2.indexOf(InspTypeNameClassGrabArr2[d]));
											var cellDays = b.parentNode.insertCell(rowGrabArr2.indexOf(InspTypeNameClassGrabArr2[d], cellDaysStart) + 1);
											cellDays.setAttribute('class', 'cellDaysClass');
											cellDays.innerHTML = diffDays + ' day(s)';
											cellDays.style.backgroundColor = 'purple';
											console.log(b.parentNode);
											console.log(cellDays, ' at position ', rowGrabArr2.indexOf(InspTypeNameClassGrabArr2[d], cellDaysStart) + 1);
											console.log(b.parentNode.children.length);
											console.log(b.parentNode);
											//refactoring rows
											rowGrab = b.parentNode.children;
											console.log(b.parentNode);
											console.log(b);
											rowGrabArr = [...rowGrab];
											rowGrabArr2 = rowGrabArr.map(a => { return a.innerHTML });

											//console.log(cellDays.innerHTML);
											cellDaysStart = rowGrabArr2.indexOf(cellDays.innerHTML);
											console.log(cellDaysStart);
											totalDays += diffDays;
											console.log(trackObj2);
											cellDays.innerHTML += cellDaysStart;
											//break;
										}

										console.log(b.parentNode);
										//console.log(trackObj2);
										//b.parentNode.classList.add(b.innerHTML);
										if (list.indexOf('rowChecked') == -1) {
											trackObj2Arr.push(trackObj2);
										}
										b.parentNode.classList.add('rowChecked');
										console.log(b.parentNode.classList);
										console.log(trackObj2Arr);

										//}

										console.log(trackObj2);
										//trackObj2['total'] = totalDays;
										console.log(totalDays);
									}
								}
							}); //end of forEach
							console.log(trackObj2Arr);
							return trackObj2Arr;
						}; //end of subFunc();
						trackObj2Arr = subFunc();
						console.log('Nathing...');
						console.log(trackObj2Arr);
						console.log(repTabNewRowClassGrab2Arr);











						//totalDaysBool = !totalDaysBool; //the totalcell has been created.
						console.log(trackObj2Arr);
						console.log('hiya!');
						console.log(trackObj2Arr.loopVal);
						trackObjSummary = {};
						trackObjSummary.sumInspections = {};
						trackObjSummary.countInspections = {};

						trackArrSummary = [];

						for (var h = 0; h < trackObj2Arr.length; h++) {
							//initializing
							for (var i in trackObj2Arr[h].sumDays) {
								if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
									trackObjSummary.sumInspections[i] = 0;
									trackObjSummary.countInspections[i] = 0;
								}
							}

						}

						for (var h = 0; h < trackObj2Arr.length; h++) {
							//summing and assigning
							for (var i in trackObj2Arr[h].sumDays) {
								if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
									trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
									trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
								}
							}
						}

						console.log(trackObjSummary);
						//trackObjSummary['total'] = totalDays;

						if (!InspReportGrab) {
							alert('Grabbing for table');

							var InspReportGrab = document.getElementById('InspReport');
							var InspReportDivClassGrab = document.getElementsByClassName('InspReportDivClass')[0];
							var InspReportDivCancelClassGrab = document.getElementsByClassName('InspReportDivCancelClass')[0];
							var inspRepCancel = document.createElement('img');
							inspRepCancel.setAttribute('src', '/ProfilePicsFoldera/cancel.png');
							inspRepCancel.setAttribute('height', '20px');
							inspRepCancel.setAttribute('width', '20px');
							inspRepCancel.setAttribute('class', 'inspRepCancelClass');
							inspRepCancel.addEventListener('click', cancelTable);

							function cancelTable() {
								this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
							}

							InspReportDivCancelClassGrab.appendChild(inspRepCancel);
							(function () {
								var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
								//console.log(grandD3ChartDivGrab);
								//console.log(grandD3ChartClassDivCancel);
								InspReportDivCancelClassGrab.addEventListener('mousedown', MoveDivAround);
								function MoveDivAround(e) {
									e = e || window.event;
									e.preventDefault();
									pos1 = e.clientX;
									pos2 = e.clientY;

									document.addEventListener('mouseup', CancelMoveAround);
									document.addEventListener('mousemove', MovingAround);
								}

								function MovingAround(e) {
									e = e || window.event;
									e.preventDefault();
									//console.log('This is pos1: '+pos1);
									pos3 = pos1 - e.clientX;
									pos4 = pos2 - e.clientY;
									pos1 = e.clientX;
									pos2 = e.clientY;

									InspReportDivCancelClassGrab.parentNode.style.top = (InspReportDivCancelClassGrab.parentNode.offsetTop - pos4) + "px";
									InspReportDivCancelClassGrab.parentNode.style.left = (InspReportDivCancelClassGrab.parentNode.offsetLeft - pos3) + "px";

								}

								function CancelMoveAround() {
									console.log('Cancelling...');
									document.removeEventListener('mouseup', CancelMoveAround);
									document.removeEventListener('mousemove', MovingAround);

								}
							})();
						} else {
							//preparing for update
							for (var o = 0; o < InspReportGrab.rows.length; o++) {
								InspReportGrab.deleteRow(InspReportGrab.rows[o]);
							}
						}
						//forming the table of inspection stats.


						//normal statistics -takes care of both tracked and untracked inspections
						var normalStat = table.getElementsByClassName('InspTypeNameClass'); //table of aligned elements
						var normalStatArr = [...normalStat];
						console.log(table);
						console.log(normalStatArr);
						var normalStatObj = {};
						normalStatArr.forEach(a => {
							normalStatObj[a.innerHTML] = normalStatObj[a.innerHTML] ? ++normalStatObj[a.innerHTML] : 1;
						});

						console.log(normalStatObj);
						var header = InspReportGrab.createTHead();
						var headRow = header.insertRow();
						var inspHeadRowCell = headRow.insertCell();
						inspHeadRowCell.innerHTML = '<b>Inspection</b>';
						var numberHeadRowCell = headRow.insertCell();
						numberHeadRowCell.innerHTML = '<b>Number</b>';

						for (var k in normalStatObj) {
							if (normalStatObj.hasOwnProperty(k)) {
								var normalInspReportRow = InspReportGrab.insertRow();
								var normalInspReportRowCellInspection = normalInspReportRow.insertCell();
								normalInspReportRowCellInspection.innerHTML = k;
								var normalInspReportRowCellValue = normalInspReportRow.insertCell();
								normalInspReportRowCellValue.innerHTML = normalStatObj[k];
							}
						}
						//tracked statistics -takes care of only tracked inspections. These are the ones with the days.
						var header2 = InspReportGrab.createTHead();
						var headRowStat = header2.insertRow();
						var headRowStatInsp = headRowStat.insertCell();
						headRowStatInsp.innerHTML = '<b>Inspection</b>';
						var headRowStatNumber = headRowStat.insertCell();
						headRowStatNumber.innerHTML = '<b>Number</b>';
						var headRowStatTotal = headRowStat.insertCell();
						headRowStatTotal.innerHTML = '<b>Total</b>';
						var headRowStatAvg = headRowStat.insertCell();
						headRowStatAvg.innerHTML = '<b><em>Average<em></b>';
						for (var a in trackObjSummary.countInspections) {
							if (trackObjSummary.countInspections.hasOwnProperty(a)) {
								var InspReportRow = InspReportGrab.insertRow();
								var InspReportRowCellInspection = InspReportRow.insertCell();
								InspReportRowCellInspection.innerHTML = a;
								var InspReportRowCellVal = InspReportRow.insertCell();
								InspReportRowCellVal.innerHTML = trackObjSummary.countInspections[a];
								var InspReportCellSum = InspReportRow.insertCell();
								InspReportCellSum.innerHTML = trackObjSummary.sumInspections[a];
								var InspReportCellAvg = InspReportRow.insertCell();
								InspReportCellAvg.innerHTML = trackObjSummary.sumInspections[a] / trackObjSummary.countInspections[a];
							}
						}

						console.log(InspReportGrab);
						console.log(InspReportDivClassGrab);
						console.log(InspReportDivClassGrab.parentNode);
						console.log(InspReportDivClassGrab.parentNode.parentNode);

						for (var j in trackObjSummary.sumInspections) {
							if (trackObjSummary.sumInspections.hasOwnProperty(j)) {
								console.log(j);
								console.log(trackObjSummary.sumInspections[j]);
								var objNew = {};
								objNew.sumInspections = {};
								objNew.countInspections = {};
								if (j == 'total') {
									console.log('It is total  ', j);
									objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];

									console.log(objNew.sumInspections['GrandTotal']);
								} else {
									console.log('Any other...');
									console.log(trackObjSummary.sumInspections[j]);
									objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
									objNew.countInspections[j] = trackObjSummary.countInspections[j];
									console.log(objNew.sumInspections[j]);
								}
								//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
								console.log(j);
								//console.log(objNew.sumInspections[j]);
								//console.log(objNew);
								trackArrSummary.push(objNew);
							}
						}


						//console.log(trackObjSummary);
						console.log(trackArrSummary);
						console.log(trackObj2Arr.loopVal);

						var trackArrSummaryAvg = trackArrSummary.map(function (a) {
							console.log(a);
							console.log(Object.keys(a.sumInspections));
							console.log(a.sumInspections[Object.keys(a.sumInspections)[0]] / (trackObj2Arr.loopVal));
							Object.keys(a.sumInspections).forEach(function (b) {
								a.sumInspections[b] /= a.countInspections[b];
								console.log(b + 'Expected');
								var c = b + 'Expected';
								var cValue;
								switch (c) {
									case 'GrandTotalExpected':
										cValue = 100;
										break;
									default:
										cValue = 24;
								}
								a.sumInspections[c] = cValue;
								console.log(a);
							});
							return a;
						});

						console.log(trackArrSummary);
						console.log(trackArrSummaryAvg);


						function convertArrayOfObjectsToCSV(args) {
							var result, ctr, keys, columnDelimiter, lineDelimiter, data;

							data = args.data || null;
							if (data == null || !data.length) {
								return null;
							}

							columnDelimiter = args.columnDelimiter || ',';
							lineDelimiter = args.lineDelimiter || '\n';

							keys = [];
							keys2 = [];
							data.forEach((a) => {
								keys.push(Object.keys(a)[0]);
								keys2.push(Object.keys(a)[0]);
							});
							console.log(keys);
							result = '';
							result += keys.join(columnDelimiter);
							console.log(keys);
							console.log(keys2);
							console.log(result);
							result += lineDelimiter;

							ctr = 0;
							data.forEach(function (item, i) {
								console.log(item);
								console.log(key[i]);
								console.log(item[keys[i]]);
								if (ctr > 0) result += columnDelimiter;
								result += item[keys[i]];
								ctr++;
							});
							result += lineDelimiter;
							return result;
						}

						var miniChart; //function for minicharts;

						downloadCSV = function (args) {
							var data, filename, link;
							console.log(trackArrSummary);
							var csv = convertArrayOfObjectsToCSV({
								data: trackArrSummary
							});
							if (csv == null) return;

							filename = args.filename || 'export.csv';

							if (!csv.match(/^data:text\/csv/i)) {
								csv = 'data:text/csv;charset=utf-8,' + csv;
							}
							data = encodeURI(csv);

							link = document.createElement('a');
							link.setAttribute('href', data);
							link.setAttribute('download', filename);
							link.click();

							var grandD3ChartDivGrab;
							var grandD3ChartClassDivCancel;
							var grandMiniD3ContainerDiv;
							var grandMiniD3ContainerDivDropDown; //menu bar
							var grandMiniD3ContainerDivDropDownButton; //drop down button
							var grandMiniD3ContainerDivBody;//body for holding mini d3s
							var grandMiniD3ContainerDivBodyGrab;


							ChartD3 = function (rowArg, trackIdentify, trackArrSummaryAvg) {
								console.log(trackArrSummaryAvg);
								alert('Invoking...');
								//console.log(document.getElementsByClassName('grandD3ChartClassDivClass'));

								if (document.getElementsByClassName('grandD3ChartDivClass').length > 0) {
									console.log('Already exists');
									grandD3ChartDivGrab = document.getElementsByClassName('grandD3ChartDivClass')[0];
									grandD3ChartClassDivCancelGrab = document.getElementsByClassName('grandD3ChartClassDivCancelClass')[0];
									console.log(grandD3ChartDivGrab);
									grandMiniD3ContainerDivBodyGrab = document.getElementsByClassName('grandMiniD3ContainerDivBody')[0];
								} else {
									console.log('creating grandD3ChartDiv');
									alert('Creating grandDiv...');
									console.log('---------------')
									var grandD3ChartDiv = document.createElement('div');
									//grandD3ChartDiv.style.backgroundColor = 'DarkOrchid';
									//grandD3ChartDiv.style.position = 'absolute';
									grandD3ChartDiv.setAttribute('class', 'grandD3ChartDivClass');
									document.body.appendChild(grandD3ChartDiv);
									grandD3ChartDivGrab = document.getElementsByClassName('grandD3ChartDivClass')[0];

									var grandD3ChartClassDivCancel = document.createElement('div');
									grandD3ChartClassDivCancel.setAttribute('class', 'grandD3ChartClassDivCancelClass');
									grandD3ChartClassDivCancel.style.backgroundColor = 'gray';
									//grandD3ChartClassDivCancel.style.width = '100%';
									//grandD3ChartClassDivCancel.style.height = '5%';
									grandD3ChartDivGrab.appendChild(grandD3ChartClassDivCancel);
									grandD3ChartClassDivCancelGrab = document.getElementsByClassName('grandD3ChartClassDivCancelClass')[0];

									var grandD3ChartClassDivImg = document.createElement('img');
									grandD3ChartClassDivImg.setAttribute('src', '/ProfilePicsFoldera/cancel.png');
									grandD3ChartClassDivImg.setAttribute('width', '20px');
									grandD3ChartClassDivImg.setAttribute('height', '20px');
									grandD3ChartClassDivImg.style.float = 'right';

									var grandD3ChartClassDivImgExpand = document.createElement('img');
									grandD3ChartClassDivImgExpand.setAttribute('src', '/ProfilePicsFoldera/expand3.png');
									grandD3ChartClassDivImgExpand.setAttribute('width', '20px');
									grandD3ChartClassDivImgExpand.setAttribute('height', '20px');
									grandD3ChartClassDivImgExpand.style.float = 'right';
									(function (grandD3ChartClassDivImg) {
										grandD3ChartClassDivImg.addEventListener('click', function () {
											console.log(grandD3ChartClassDivImg);
											console.log(this);
											grandD3ChartClassDivImg.parentNode.parentNode.parentNode.removeChild(grandD3ChartClassDivImg.parentNode.parentNode);
										});

										grandD3ChartClassDivImgExpand.addEventListener('click', function () {
											alert('Changing Size');
											console.log(this);
											console.log(this.parentNode.parentNode);
											this.parentNode.parentNode.classList.toggle('grandD3ChartClass', false);
											this.parentNode.parentNode.classList.add('grandD3ChartClassDivImgExpandClassList', true);
										});
									})(grandD3ChartClassDivImg);
									grandMiniD3ContainerDiv = document.createElement('div');
									grandMiniD3ContainerDiv.setAttribute('class', 'grandMiniD3ContainerDivClass');

									grandMiniD3ContainerDivDropDown = document.createElement('div');
									grandMiniD3ContainerDivDropDown.setAttribute('class', 'grandMiniD3ContainerDivDropDownClass');

									grandMiniD3ContainerDivBody = document.createElement('div');
									grandMiniD3ContainerDivBody.setAttribute('class', 'grandMiniD3ContainerDivBodyClass');

									grandMiniD3ContainerDivDropDownButton = document.createElement('input');
									grandMiniD3ContainerDivDropDownButton.setAttribute('class', 'grandMiniD3ContainerDivDropDownButtonClass');
									grandMiniD3ContainerDivDropDownButton.setAttribute('type', 'button');
									grandMiniD3ContainerDivDropDownButton.setAttribute('value', 'v');
									grandMiniD3ContainerDivDropDownButton.addEventListener('click', function () {
										var classListArr = [...this.parentNode.parentNode.classList];
										this.setAttribute('value', classListArr.indexOf('grandMiniD3ContainerDivBodyClassList') > -1 ? '^' : 'v');
										this.parentNode.parentNode.classList.toggle('grandMiniD3ContainerDivBodyClassList'); //referring to body (grandMiniD3ContainerDivBody)
										this.parentNode.classList.toggle('grandMiniD3ContainerDivBodyClassListDivDisplay');
									});
									//grandMiniD3ContainerDivClassList
									grandMiniD3ContainerDivDropDown.appendChild(grandMiniD3ContainerDivDropDownButton);
									grandMiniD3ContainerDiv.appendChild(grandMiniD3ContainerDivDropDown);
									grandMiniD3ContainerDiv.appendChild(grandMiniD3ContainerDivBody);

									grandD3ChartClassDivCancel.appendChild(grandD3ChartClassDivImg);
									grandD3ChartClassDivCancel.appendChild(grandD3ChartClassDivImgExpand);
								}
								console.log(grandD3ChartDivGrab);
								var d3ChartClassDiv;
								console.log(document.getElementsByClassName('d3ChartClass').length);
								//if (document.getElementsByClassName('d3ChartClass').length 0){
								console.log('Were in here...');
								var d3ChartClassDiv = document.createElement('div');
								d3ChartClassDiv.setAttribute('class', 'd3ChartClass');
								var d3ChartClassDivCancel = document.createElement('div');

								if (rowArg) { //Minimification
									console.log('adding mini classlist');
									d3ChartClassDiv.classList.add('minid3ChartClassDiv');
									d3ChartClassDiv.classList.add('minid3ChartBackGroundColorClassDiv');
									d3ChartClassDiv.classList.remove('d3ChartClass');
									d3ChartClassDiv.productName = trackIdentify.productName;
									d3ChartClassDiv.companyAddName = trackIdentify.companyAddName;



									var productArr = [...table.getElementsByClassName('ProductNameClass')];
									var compAddArr = [...table.getElementsByClassName('CompanyAddClass')];
									d3ChartClassDiv.addEventListener('mouseover', function () {
										console.log(this.productName + 'now');
										//console.log(productArr);
										for (var d = 0; d < productArr.length; d++) {
											if (productArr[d].innerHTML == d3ChartClassDiv.productName) {
												if (compAddArr[d].innerHTML == d3ChartClassDiv.companyAddName) {
													//console.log('Equalled...');
													productArr[d].parentNode.classList.add('trackedRowChart');
													d3ChartClassDiv.classList.remove('minid3ChartBackGroundColorClassDiv');
													this.classList.add('trackedRowChart');
												}
											}
										}
									});

									d3ChartClassDiv.addEventListener('mouseout', function () {
										var productArr = [...table.getElementsByClassName('ProductNameClass')];
										for (var d = 0; d < productArr.length; d++) {
											//if (productArr[d].innerHTML == this.productName){
											//console.log('...removing');
											productArr[d].parentNode.classList.remove('trackedRowChart');
											this.classList.remove('trackedRowChart');
											d3ChartClassDiv.classList.add('minid3ChartBackGroundColorClassDiv');
											//}
										}
									});

									console.log(d3ChartClassDiv);

									var d3ChartClassDivOutlier = document.createElement('input');
									d3ChartClassDivOutlier.setAttribute('type', 'checkbox');
									d3ChartClassDivOutlier.setAttribute('height', '100%');
									d3ChartClassDivOutlier.setAttribute('class', 'd3ChartClassDivOutlierClass');

									d3ChartClassDivOutlier.addEventListener('click', function () {
										alert('clicked');
										var d3ChartClassDivOutlierClassGrab = grandD3ChartDivGrab.getElementsByClassName('d3ChartClassDivOutlierClass');
										var d3ChartClassDivOutlierClassGrab = [...d3ChartClassDivOutlierClassGrab];
										var d3ChartClassDivOutlierClassGrabFilter = d3ChartClassDivOutlierClassGrab.filter(checkbox => {
											return (checkbox.checked);
										});
										console.log(d3ChartClassDivOutlierClassGrabFilter);
										var prodArr = [];
										var addArr = [];
										var productAddArr = [];
										d3ChartClassDivOutlierClassGrabFilter.forEach(checkedCheck => {
											prodArr.push(checkedCheck.parentNode.parentNode.productName);
											addArr.push(checkedCheck.parentNode.parentNode.companyAddName);
											productAddArr.push({ prod: checkedCheck.parentNode.parentNode.productName, add: checkedCheck.parentNode.parentNode.companyAddName });
										});

										console.log(d3ChartClassDivOutlierClassGrabFilter);

										d3ChartClassDivOutlier.outlierObj = {
											product: prodArr,
											add: addArr,
											productAdd: productAddArr
										}

										console.log(d3ChartClassDivOutlier.outlierObj);

										if (d3ChartClassDivOutlier.outlierObj.product.length) {
											trackObj2Arr = subFunc(null, d3ChartClassDivOutlier.outlierObj);
											console.log('Calling length');
										} else {
											trackObj2Arr = subFunc();
											console.log('No length');
										}

										console.log(trackObj2Arr);

										//totalDaysBool = !totalDaysBool; //the totalcell has been created.
										console.log(trackObj2Arr);
										console.log('hiya!');
										console.log(trackObj2Arr.loopVal);
										trackObjSummary = {};
										trackObjSummary.sumInspections = {};
										trackObjSummary.countInspections = {};

										trackArrSummary = [];

										for (var h = 0; h < trackObj2Arr.length; h++) {
											//initializing
											for (var i in trackObj2Arr[h].sumDays) {
												if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
													trackObjSummary.sumInspections[i] = 0;
													trackObjSummary.countInspections[i] = 0;
												}
											}

										}

										for (var h = 0; h < trackObj2Arr.length; h++) {
											//summing and assigning
											for (var i in trackObj2Arr[h].sumDays) {
												if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
													trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
													trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
												}
											}
										}

										console.log(trackObjSummary);
										//trackObjSummary['total'] = totalDays;

										for (var j in trackObjSummary.sumInspections) {
											if (trackObjSummary.sumInspections.hasOwnProperty(j)) {
												console.log(j);
												console.log(trackObjSummary.sumInspections[j]);
												var objNew = {};
												objNew.sumInspections = {};
												objNew.countInspections = {};
												if (j == 'total') {
													console.log('It is total  ', j);
													objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];

													console.log(objNew.sumInspections['GrandTotal']);
												} else {
													console.log('Any other...');
													console.log(trackObjSummary.sumInspections[j]);
													objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
													objNew.countInspections[j] = trackObjSummary.countInspections[j];
													console.log(objNew.sumInspections[j]);
												}
												//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
												console.log(j);
												console.log(objNew.sumInspections[j]);
												console.log(objNew);
												trackArrSummary.push(objNew);
											}
										}


										console.log(trackObjSummary);
										console.log(trackArrSummary);
										console.log(trackObj2Arr.loopVal);

										var trackArrSummaryAvg = trackArrSummary.map(function (a) {
											console.log(a);
											console.log(Object.keys(a.sumInspections));
											console.log(a.sumInspections[Object.keys(a.sumInspections)[0]] / (trackObj2Arr.loopVal));
											Object.keys(a.sumInspections).forEach(function (b) {
												a.sumInspections[b] /= a.countInspections[b];
												console.log(b + 'Expected');
												var c = b + 'Expected';
												var cValue;
												switch (c) {
													case 'GrandTotalExpected':
														cValue = 100;
														break;
													default:
														cValue = 24;
												}
												a.sumInspections[c] = cValue;
												console.log(a);
											});
											return a;
										});

										console.log(trackArrSummary);
										console.log(trackArrSummaryAvg);
										ChartD3(null, null, trackArrSummaryAvg);	//outlier call


									});


									d3ChartClassDivCancel.appendChild(d3ChartClassDivOutlier);

								} else { //end of minimification
									if (grandD3ChartDivGrab.getElementsByClassName('d3ChartClass').length) {

										console.log(grandD3ChartDivGrab);
										console.log(grandD3ChartDiv);
										grandD3ChartDivGrab.removeChild(grandD3ChartDivGrab.getElementsByClassName('d3ChartClass')[0]); //GRANDPARENT SHOULD REMOVE D3CHART
									}
								}

								d3ChartClassDivCancel.setAttribute('class', 'd3ChartClassDivCancelClass');

								var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
								console.log(grandD3ChartDivGrab);
								console.log(grandD3ChartClassDivCancel);
								grandD3ChartClassDivCancelGrab.addEventListener('mousedown', MoveDivAround);
								d3ChartClassDivCancel.addEventListener('click', function () { console.log('I have been clicked.') });
								function MoveDivAround(e) {
									console.log('MouseDoww on grandD3ChartClassDivCancelGrab...');
									e = e || window.event;
									e.preventDefault();
									pos1 = e.clientX;
									pos2 = e.clientY;

									document.addEventListener('mouseup', CancelMoveAround);
									document.addEventListener('mousemove', MovingAround);
								}

								function MovingAround(e) {
									e = e || window.event;
									e.preventDefault();
									//console.log('This is pos1: '+pos1);
									pos3 = pos1 - e.clientX;
									pos4 = pos2 - e.clientY;
									pos1 = e.clientX;
									pos2 = e.clientY;

									grandD3ChartClassDivCancelGrab.parentNode.style.top = (grandD3ChartClassDivCancelGrab.parentNode.offsetTop - pos4) + "px";
									grandD3ChartClassDivCancelGrab.parentNode.style.left = (grandD3ChartClassDivCancelGrab.parentNode.offsetLeft - pos3) + "px";

								}

								function CancelMoveAround() {
									console.log('Cancelling...');
									document.removeEventListener('mouseup', CancelMoveAround);
									document.removeEventListener('mousemove', MovingAround);

								}

								var d3ChartClassDivImg = document.createElement('img');
								d3ChartClassDivImg.setAttribute('src', '/ProfilePicsFoldera/cancel.png');
								d3ChartClassDivImg.setAttribute('width', '5%');
								d3ChartClassDivImg.setAttribute('height', '100%');
								d3ChartClassDivImg.style.float = 'right';

								var d3ChartClassDivImgExpand = document.createElement('img');
								d3ChartClassDivImgExpand.setAttribute('src', '/ProfilePicsFoldera/expand3.png');
								d3ChartClassDivImgExpand.setAttribute('width', '5%');
								d3ChartClassDivImgExpand.setAttribute('height', '100%');
								d3ChartClassDivImgExpand.style.float = 'right';
								//(function(d3ChartClassDivImg){
								d3ChartClassDivImg.addEventListener('click', function () {
									console.log(d3ChartClassDivImg);
									console.log(this);
									d3ChartClassDivImg.parentNode.parentNode.parentNode.removeChild(d3ChartClassDivImg.parentNode.parentNode);
								});

								d3ChartClassDivImgExpand.addEventListener('click', function () {
									alert('Changing Size');
									console.log(this);
									console.log(this.parentNode.parentNode);
									this.parentNode.parentNode.classList.toggle('d3ChartClass', false);
									this.parentNode.parentNode.classList.add('d3ChartClassDivImgExpandClassList', true);
								});
								//	})(d3ChartClassDivImg);


								d3ChartClassDivCancel.appendChild(d3ChartClassDivImg);
								d3ChartClassDivCancel.appendChild(d3ChartClassDivImgExpand);

								//Adding checkbox for smaller d3ChartDivs
								/*
								if (rowArg){
									var d3ChartClassDivOutlier = document.createElement('input');
									d3ChartClassDivOutlier.setAttribute('type', 'checkbox');
									d3ChartClassDivOutlier.setAttribute('height', '100%');
									d3ChartClassDivOutlier.addEventListener('click', function() {
										console.log('clicked');
									});
									d3ChartClassDivCancel.appendChild(d3ChartClassDivOutlier);
								}
								*/
								console.log(grandD3ChartDivGrab);
								d3ChartClassDiv.appendChild(d3ChartClassDivCancel);
								//grandD3ChartDivGrab.appendChild(d3ChartClassDivCancel);
								console.log(grandD3ChartDivGrab);


								if (grandD3ChartDivGrab.getElementsByClassName('d3ChartClass').length) {
									//alert('Has miniContainer');
									console.log(grandMiniD3ContainerDivBody);
									console.log(grandMiniD3ContainerDivBodyGrab);
									//grandD3ChartDivGrab.insertBefore(d3ChartClassDiv, grandD3ChartDivGrab.getElementsByClassName('minid3ChartClassDiv')[0]);
									grandMiniD3ContainerDivBody.appendChild(d3ChartClassDiv);
								} else {
									grandD3ChartDivGrab.appendChild(d3ChartClassDiv);
									grandD3ChartDivGrab.appendChild(grandMiniD3ContainerDiv);
								}


								//	}

								console.log('Downloaded');
								console.log(rowArg);
								console.log(trackArrSummaryAvg);
								trackArrSummaryAvg = (rowArg) ? rowArg : trackArrSummaryAvg;
								var trackArrSummaryAvgArr = [];
								trackArrSummaryAvg.forEach(a => { //to calculate the max range
									var item = a.sumInspections[Object.keys(a.sumInspections)[0]];
									trackArrSummaryAvgArr.push(item)
								});
								console.log(trackArrSummaryAvgArr);



								if (!grandD3ChartDivGrab.maxVal) { //this is the first time the Chart is called, to form the big Chart. It contains all the dataset
									maxVal = d3.max(trackArrSummaryAvgArr);
									grandD3ChartDivGrab.maxVal = maxVal; //tie the maximum value to the grandD3Chart for reference in detecting outliers
								}

								/*
								if (rowArg){
									alert('Inside rowArg Chart')
									console.log(d3.max(trackArrSummaryAvgArr), grandD3ChartDivGrab.maxVal);
								}
								*/
								var heightVar = (rowArg) ? 25 : 50; //for first graph, go 50 height; for minifies, go 25;
								var canvasWidth = (rowArg) ? 220 : 1200; //for first graph, go 1000 width; for minifies, go 20% -200px. use in scale.
								var canvasHeight = (rowArg) ? 200 : 400;
								var fontSize = (rowArg) ? '0.5em' : 'smaller';
								var axesFont = (rowArg) ? "7px sans-serif" : "14px sans-serif";

								var data = trackArrSummaryAvg;

								var datAxesPos = trackArrSummaryAvg.length * (heightVar + 2) + 2;
								var widthScale = d3.scale.linear().domain([0, (rowArg) ? grandD3ChartDivGrab.maxVal : d3.max(trackArrSummaryAvgArr)]).range([0, canvasWidth]); //d3.extent

								var axes = d3.svg.axis().ticks(10).scale(widthScale);

								var canvas = d3
									.select("body")
									.append("svg")
									.attr("height", canvasHeight)
									.attr("width", canvasWidth);
								console.log(canvas);
								console.log(d3ChartClassDiv);
								d3ChartClassDiv.appendChild(canvas[0][0]);
								var canvasG = canvas
									.selectAll("rect")

									.data(data)
									.enter()
									.append("g")
									.attr("transform", "translate(100,10)");

								//Actual
								canvasG
									.append("rect")
									.attr("fill", function (d, i) {
										return "blue"; //datCol[i];
									})
									.attr("y", function (d, i) {
										return i * (heightVar + 2);
									})
									.attr("height", function (d) {
										return heightVar;
									})
									.attr("width", function (d, i) {
										console.log(Object.keys(d)[0]);
										return widthScale(d.sumInspections[Object.keys(d.sumInspections)[0]]);
									});

								canvasG
									.append("text")
									.text(function (d, i) {
										return d.sumInspections[Object.keys(d.sumInspections)[0]];
									})
									.attr("x", function (d, i) {
										return widthScale(d.sumInspections[Object.keys(d.sumInspections)[0]]);
									})
									.attr("y", function (d, i) {
										return i * (heightVar + 2) + heightVar / 2;
									})
									.attr("font-size", fontSize);

								//Expected
								canvasG
									.append("rect")
									.attr("fill", "pink")
									.attr("y", function (d, i) {
										return i * (heightVar + 2);
									})
									.attr("height", heightVar)
									.attr("width", function (d, i) {
										console.log(Object.keys(d)[1]);
										return widthScale(d.sumInspections[Object.keys(d.sumInspections)[1]]);
									});

								canvasG
									.append("text")
									.text(function (d, i) {
										return (
											d.sumInspections[Object.keys(d.sumInspections)[1]] +
											" (" +
											Math.floor((d.sumInspections[Object.keys(d.sumInspections)[1]] /
												d.sumInspections[Object.keys(d.sumInspections)[0]]) *
												100) +
											"%)"
										);
									})
									.attr("fill", "pink")
									.attr("x", function (d, i) {
										return widthScale(d.sumInspections[Object.keys(d.sumInspections)[1]]);
									})
									.attr("y", function (d, i) {
										return i * (heightVar + 2) + heightVar / 2;
									})
									.attr("font-size", fontSize);

								//Listing the insepections.
								canvasG //text for the bar.  It always refers to the first property in each object in the array
									.append("text")
									.text(function (d, i) {
										return Object.keys(d.sumInspections)[0];
									})
									.attr("x", function (d, i) {
										//this is why groups are good: they help transformations.
										return -60;
									})
									.attr("y", function (d, i) {
										return i * (heightVar + 2) + heightVar / 2;
									})
									.attr("font-size", fontSize)
									.on("click", InspectionOutlier);

								canvas
									.append("g")
									.style("font", axesFont)
									.attr("transform", `translate(100,${datAxesPos})`)
									.call(axes);

								canvasG
									.append("text")
									.text(d3ChartClassDiv.productName)
									.attr("transform", `translate(0,${datAxesPos + 20})`)

							}//end of function

							ChartD3(null, null, trackArrSummaryAvg); //normal call

							repTabNewRowClassGrab2Arr2.forEach(a => {
								a.parentNode.addEventListener('mouseover', function () { //use this for in-place chart.
									this.classList.add("repTabNewRowClassMouseOverList");
								});
							});

							repTabNewRowClassGrab2Arr2.forEach(a => {
								a.parentNode.addEventListener('mouseout', function () {
									this.classList.remove("repTabNewRowClassMouseOverList");
								});
							});
							var rowClassList = [];
							repTabNewRowClassGrab2Arr2.forEach(function (a) {
								//console.log('Running forEach...')
								rowClassList = [...a.parentNode.classList];

								if (rowClassList.indexOf('checkedRow') > -1) { //if checkedRow is present
									//Do nothing;
									//console.log('Done already.', rowClassList.toString());
									//console.log(a.parentNode);
								} else {
									//alert(a.parentNode);	
									var productLabelAndTracker = a.parentNode.getElementsByClassName('ProductNameClass')[0].innerHTML;
									var addLabelAndTracker = a.parentNode.getElementsByClassName('CompanyAddClass')[0].innerHTML;
									a.parentNode.productName = productLabelAndTracker;
									a.parentNode.compAddName = addLabelAndTracker;
									var trackIdentify = {
										productName: a.parentNode.productName,
										companyAddName: a.parentNode.compAddName
									}
									//a.parentNode.classList.add(productLabelAndTracker);
									console.log(productLabelAndTracker);
									console.log(a.parentNode);


									a.parentNode.addEventListener('click', function () {
										alert('clicked.');
										console.log(b);
										console.log(a.parentNode);
										console.log(repTabNewRowClassGrab2Arr2);
										var repTabNewRowClassGrab2Row = a.parentNode.getElementsByClassName('repTabNewRowClassModify1');
										trackObj2Arr = subFunc(repTabNewRowClassGrab2Row);
										console.log(trackObj2Arr);

										//totalDaysBool = !totalDaysBool; //the totalcell has been created.
										console.log(trackObj2Arr);
										console.log('hiya!');
										console.log(trackObj2Arr.loopVal);
										trackObjSummary = {};
										trackObjSummary.sumInspections = {};
										trackObjSummary.countInspections = {};

										trackArrSummary = [];

										for (var h = 0; h < trackObj2Arr.length; h++) {
											//initializing
											for (var i in trackObj2Arr[h].sumDays) {
												if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
													trackObjSummary.sumInspections[i] = 0;
													trackObjSummary.countInspections[i] = 0;
												}
											}

										}

										for (var h = 0; h < trackObj2Arr.length; h++) {
											//summing and assigning
											for (var i in trackObj2Arr[h].sumDays) {
												if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
													trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
													trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
												}
											}
										}

										console.log(trackObjSummary);
										//trackObjSummary['total'] = totalDays;

										for (var j in trackObjSummary.sumInspections) {
											if (trackObjSummary.sumInspections.hasOwnProperty(j)) {
												console.log(j);
												console.log(trackObjSummary.sumInspections[j]);
												var objNew = {};
												objNew.sumInspections = {};
												objNew.countInspections = {};
												if (j == 'total') {
													console.log('It is total  ', j);
													objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];

													console.log(objNew.sumInspections['GrandTotal']);
												} else {
													console.log('Any other...');
													console.log(trackObjSummary.sumInspections[j]);
													objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
													objNew.countInspections[j] = trackObjSummary.countInspections[j];
													console.log(objNew.sumInspections[j]);
												}
												//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
												console.log(j);
												console.log(objNew.sumInspections[j]);
												console.log(objNew);
												trackArrSummary.push(objNew);
											}
										}


										console.log(trackObjSummary);
										console.log(trackArrSummary);
										console.log(trackObj2Arr.loopVal);

										var trackArrSummaryAvg = trackArrSummary.map(function (a) {
											console.log(a);
											console.log(Object.keys(a.sumInspections));
											console.log(a.sumInspections[Object.keys(a.sumInspections)[0]] / (trackObj2Arr.loopVal));
											Object.keys(a.sumInspections).forEach(function (b) {
												a.sumInspections[b] /= a.countInspections[b];
												console.log(b + 'Expected');
												var c = b + 'Expected';
												var cValue;
												switch (c) {
													case 'GrandTotalExpected':
														cValue = 100;
														break;
													default:
														cValue = 24;
												}
												a.sumInspections[c] = cValue;
												console.log(a);
											});
											return a;
										});

										console.log(trackArrSummary);
										console.log(trackArrSummaryAvg);

										ChartD3(trackArrSummaryAvg, trackIdentify);	//individual row call										
									});
									a.parentNode.classList.add('checkedRow');
								}//end of else if;


								/*	
								miniChart = function () {
											alert('clicked.');
											console.log(b);
											console.log(a.parentNode);
											console.log(repTabNewRowClassGrab2Arr2);
											var repTabNewRowClassGrab2Row = a.parentNode.getElementsByClassName('repTabNewRowClassModify1');
											trackObj2Arr =subFunc(repTabNewRowClassGrab2Row);
											console.log(trackObj2Arr);
																									
											//totalDaysBool = !totalDaysBool; //the totalcell has been created.
											console.log(trackObj2Arr);
											console.log('hiya!');
											console.log(trackObj2Arr.loopVal);
											trackObjSummary = {};
												trackObjSummary.sumInspections = {};
												trackObjSummary.countInspections = {};
												
											trackArrSummary = [];
											
											for (var h =0; h < trackObj2Arr.length;h++){ 
												//initializing
												for (var i in trackObj2Arr[h].sumDays){
													if (trackObj2Arr[h].sumDays.hasOwnProperty(i)){
														trackObjSummary.sumInspections[i] =0;
														trackObjSummary.countInspections[i] =0;
													}
												}
												
											}
										
										for (var h =0; h< trackObj2Arr.length;h++){ 
											//summing and assigning
												for (var i in trackObj2Arr[h].sumDays){
													if (trackObj2Arr[h].sumDays.hasOwnProperty(i)){
														trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
														trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
													}
												}
										}
										
										console.log(trackObjSummary);
										//trackObjSummary['total'] = totalDays;
											
										for (var j in trackObjSummary.sumInspections){
											if (trackObjSummary.sumInspections.hasOwnProperty(j)){
												console.log(j);
												console.log(trackObjSummary.sumInspections[j]);
												var objNew = {};
													objNew.sumInspections ={};
													objNew.countInspections ={};
												if (j =='total'){
													console.log('It is total  ', j);
													objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];
													
													console.log(objNew.sumInspections['GrandTotal']);
												}else{
													console.log('Any other...');
													console.log(trackObjSummary.sumInspections[j]);
													objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
													objNew.countInspections[j] = trackObjSummary.countInspections[j];
													console.log(objNew.sumInspections[j]);
												}
												//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
												console.log(j);
												console.log(objNew.sumInspections[j]);
												console.log(objNew);
												trackArrSummary.push(objNew);
											}
										}
										
										
										console.log(trackObjSummary);
										console.log(trackArrSummary);
										console.log(trackObj2Arr.loopVal);
										
										var trackArrSummaryAvg = trackArrSummary.map(function (a){
											console.log(a);
											console.log(Object.keys(a.sumInspections));
											console.log(a.sumInspections[Object.keys(a.sumInspections)[0]]/(trackObj2Arr.loopVal));
											Object.keys(a.sumInspections).forEach(function(b){
												a.sumInspections[b]/= a.countInspections[b];
												console.log(b+'Expected');
												var c = b+'Expected';
												var cValue;
												switch (c){
													case 'GrandTotalExpected':
														cValue = 100;
														break;
													default:
														cValue = 24;
												}
												a.sumInspections[c] = cValue;
												console.log(a);
											});
											return a;
										});
										
										console.log(trackArrSummary);
										console.log(trackArrSummaryAvg);
																									
										ChartD3(trackArrSummaryAvg, trackIdentify);	//individual row call										
										}
									*/







							});


							/*
							repTabNewRowClassGrab2Arr2.forEach((a,b)=>{ //we use 'break' here because repTabNewRowClassGrab2Arr2 represents a trackedrow, and inside the function we grab all the inspections in that row.
								a.parentNode.addEventListener('click', function () {
									console.log(b);
									console.log(repTabNewRowClassGrab2Arr2);
									var repTabNewRowClassGrab2Row = a.parentNode.getElementsByClassName('repTabNewRowClassModify1');
									subFunc(repTabNewRowClassGrab2Row);
								}, {once:true});
							});
							
							
							for (var a=repTabNewRowClassGrab2Arr2.length -2; a < repTabNewRowClassGrab2Arr2.length; a++){
								console.log(a);
								console.log(repTabNewRowClassGrab2Arr2[a].parentNode);
								repTabNewRowClassGrab2Arr2[a].parentNode.addEventListener('click', function () {
									console.log(b);
									console.log(repTabNewRowClassGrab2Arr2);
									var repTabNewRowClassGrab2Row = a.parentNode.getElementsByClassName('repTabNewRowClassModify1');
									subFunc(repTabNewRowClassGrab2Row);
								});
							}
							*/


						} //end of downloadCSV



						//}
						//}

						function InspectionOutlier() {
							alert('Outlining inspection outlier');
							//console.log(this.text);
							console.log(this.innerHTML);
							var selectedInspectionOutlier = this.innerHTML;
							//console.log(this);
							console.log(repTabNewRowClassGrab2Arr2);
							repTabNewRowClassGrab2Arr2 = table.getElementsByClassName('repTabNewRowClassModify1');
							repTabNewRowClassGrab2Arr2 = [...repTabNewRowClassGrab2Arr2];

							var repTabNewRowClassGrab2Arr2InspectionOutlier = repTabNewRowClassGrab2Arr2.filter(td => {
								return td.innerHTML == selectedInspectionOutlier;
							});
							console.log(repTabNewRowClassGrab2Arr2InspectionOutlier);
							var trackArrSummaryAvg3 = [];
							var trackIdentify = {

							}

							var productName = [];
							var companyAddName = [];

							repTabNewRowClassGrab2Arr2InspectionOutlier.forEach(inspection => {
								console.log(inspection.parentNode);
								//inspection.parentNode.removeEventListener('click', miniChart);
								var rowClassList = [...inspection.parentNode.classList];

								console.log(rowClassList);
								console.log(rowClassList.indexOf('checkedRow2'));

								if (rowClassList.indexOf('checkedRow2') > -1) { //if checkedRow is present
									//Do nothing;
									//console.log('Done already.', rowClassList.toString());
									console.log(inspection.parentNode);
								} else {
									console.log(inspection.parentNode);
									var cL = [...inspection.parentNode.classList];
									//console.log(cL);
									console.log(typeof cL);
									console.log(cL.indexOf('checkedRow2'));
									console.log(cL);
									console.log(inspection.parentNode);
									console.log(inspection.parentNode.productName);
									console.log(inspection.parentNode.compAddName);
									productName.push(inspection.parentNode.productName);
									companyAddName.push(inspection.parentNode.compAddName);

									trackIdentify = {
										productName: productName,
										companyAddName: companyAddName
									}
									console.log(inspection.parentNode);
									var row = inspection.parentNode;

									(function (row) {
										function generateInspectionOutlier() {
											alert('clicked.');
											console.log(row);
											//row.classList.add('checkedRow2');
											//console.log(row);
											//console.log(this.parentNode);
											console.log(repTabNewRowClassGrab2Arr2);
											var repTabNewRowClassGrab2Row = row.getElementsByClassName('repTabNewRowClassModify1');
											console.log(repTabNewRowClassGrab2Row);
											trackObj2Arr = subFunc(repTabNewRowClassGrab2Row);
											console.log(trackObj2Arr);

											//totalDaysBool = !totalDaysBool; //the totalcell has been created.
											console.log(trackObj2Arr);
											console.log('hiya!');
											console.log(trackObj2Arr.loopVal);
											trackObjSummary = {};
											trackObjSummary.sumInspections = {};
											trackObjSummary.countInspections = {};

											trackArrSummary = [];

											for (var h = 0; h < trackObj2Arr.length; h++) {
												//initializing
												for (var i in trackObj2Arr[h].sumDays) {
													if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
														trackObjSummary.sumInspections[i] = 0;
														trackObjSummary.countInspections[i] = 0;
													}
												}

											}

											for (var h = 0; h < trackObj2Arr.length; h++) {
												//summing and assigning
												for (var i in trackObj2Arr[h].sumDays) {
													if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
														trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
														trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
													}
												}
											}

											console.log(trackObjSummary);
											//trackObjSummary['total'] = totalDays;

											for (var j in trackObjSummary.sumInspections) {
												if (trackObjSummary.sumInspections.hasOwnProperty(j)) {
													console.log(j);
													console.log(trackObjSummary.sumInspections[j]);
													var objNew = {};
													objNew.sumInspections = {};
													objNew.countInspections = {};
													if (j == 'total') {
														console.log('It is total  ', j);
														objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];

														console.log(objNew.sumInspections['GrandTotal']);
													} else {
														console.log('Any other...');
														console.log(trackObjSummary.sumInspections[j]);
														objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
														objNew.countInspections[j] = trackObjSummary.countInspections[j];
														console.log(objNew.sumInspections[j]);
													}
													//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
													console.log(j);
													console.log(objNew.sumInspections[j]);
													console.log(objNew);
													trackArrSummary.push(objNew);
												}
											}


											console.log(trackObjSummary);
											console.log(trackArrSummary);
											console.log(trackObj2Arr.loopVal);

											var trackArrSummaryAvg = trackArrSummary.map(function (a) {
												console.log(a);
												console.log(Object.keys(a.sumInspections));
												console.log(a.sumInspections[Object.keys(a.sumInspections)[0]] / (trackObj2Arr.loopVal));
												Object.keys(a.sumInspections).forEach(function (b) {
													a.sumInspections[b] /= a.countInspections[b];
													console.log(b + 'Expected');
													var c = b + 'Expected';
													var cValue;
													switch (c) {
														case 'GrandTotalExpected':
															cValue = 100;
															break;
														default:
															cValue = 24;
													}
													a.sumInspections[c] = cValue;
													console.log(a);
												});
												return a;
											});

											console.log(trackArrSummary);
											console.log(trackArrSummaryAvg);
											console.log(trackIdentify);
											console.log(selectedInspectionOutlier);

											//trim trackArrSummaryAvg, of other inspections apart from clicked //
											trackArrSummaryAvg.forEach(a => {
												if (Object.keys(a.sumInspections).indexOf(selectedInspectionOutlier) > -1) {
													console.log('Found...');
													//var {RoutineExpected, ...sumInspections} = a.sumInspections;
													console.log(a);
													var { sumInspections } = a;
													console.log(sumInspections);
													trackArrSummaryAvg3.push(sumInspections);
												}
											});

											//console.log(trackArrSummaryAvg2); //why is this undefined?


											//trackArrSummaryAvg3.push(trackArrSummaryAvg2[0]);

											console.log(trackArrSummaryAvg3);


											//create another trackArrSummaryAvg, combining all but in the format of trackArrSummaryAvg





										}
										generateInspectionOutlier();
										//);
									})(row);

									console.log(row);
								}//end of if;

								inspection.parentNode.classList.add('checkedRow2');
							});
							ChartD32(trackArrSummaryAvg3, trackIdentify, trackArrSummaryAvg3);	//individual row call	


						}

						function applyInspectionOutlier(wrapperDivCheck, track) {
							console.log(track);
							alert('clicked');
							var indivOutlierCheckClassGrab = wrapperDivCheck.parentNode.parentNode.getElementsByClassName('indivOutlierCheckClass');
							indivOutlierCheckClassGrab = [...indivOutlierCheckClassGrab];
							var indivOutlierCheckClassGrabFiltered = indivOutlierCheckClassGrab.filter(checkbox => {
								return (checkbox.checked);
							});
							console.log(indivOutlierCheckClassGrabFiltered);
							var prodArr = [];
							var inspArr = [];
							var prodInspArr = [];
							indivOutlierCheckClassGrabFiltered.forEach(checkedCheck => {
								prodArr.push(checkedCheck.track.prodName);
								inspArr.push(checkedCheck.track.inspectionName);
								prodInspArr.push({ prodName: checkedCheck.track.prodName, inspName: checkedCheck.track.inspectionName });
							});

							console.log(indivOutlierCheckClassGrabFiltered);


							indivOutlierCheckClassGrabFiltered.outlierObj = {
								product: prodArr,
								insp: inspArr,
								prodInspArr: prodInspArr
							}

							console.log(indivOutlierCheckClassGrabFiltered.outlierObj);

							if (indivOutlierCheckClassGrabFiltered.outlierObj.product.length) {
								trackObj2Arr = subFunc(null, null, indivOutlierCheckClassGrabFiltered.outlierObj);
								console.log('Calling length');
							} else {
								trackObj2Arr = subFunc();
								console.log('No length');
							}

							console.log(trackObj2Arr);

							//totalDaysBool = !totalDaysBool; //the totalcell has been created.
							console.log(trackObj2Arr);
							console.log('hiya!');
							console.log(trackObj2Arr.loopVal);
							trackObjSummary = {};
							trackObjSummary.sumInspections = {};
							trackObjSummary.countInspections = {};

							trackArrSummary = [];

							//initializing numInspections property
							for (var h = 0; h < trackObj2Arr.length; h++) {
								//initializing
								for (var i in trackObj2Arr[h].numInspections) {
									if (trackObj2Arr[h].numInspections.hasOwnProperty(i)) {
										trackObjSummary.countInspections[i] = 0;
									}
								}

							}

							//initializing sumDays property
							for (var h = 0; h < trackObj2Arr.length; h++) {
								//initializing
								for (var i in trackObj2Arr[h].sumDays) {
									if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
										trackObjSummary.sumInspections[i] = 0;
										//trackObjSummary.countInspections[i] =0;
									}
								}

							}

							//doing sumDays
							for (var h = 0; h < trackObj2Arr.length; h++) {
								//summing and assigning
								for (var i in trackObj2Arr[h].sumDays) {
									if (trackObj2Arr[h].sumDays.hasOwnProperty(i)) {
										trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
										//trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
									}
								}
							}

							//doing numInspections
							for (var h = 0; h < trackObj2Arr.length; h++) {
								//summing and assigning
								for (var i in trackObj2Arr[h].numInspections) {
									if (trackObj2Arr[h].numInspections.hasOwnProperty(i)) {
										//trackObjSummary.sumInspections[i] += trackObj2Arr[h].sumDays[i];
										trackObjSummary.countInspections[i] += trackObj2Arr[h].numInspections[i];
									}
								}
							}

							console.log(trackObjSummary);
							//trackObjSummary['total'] = totalDays;


							for (var j in trackObjSummary.sumInspections) {
								if (trackObjSummary.sumInspections.hasOwnProperty(j)) {
									console.log(j);
									console.log(trackObjSummary.sumInspections[j]);
									var objNew = {};
									objNew.sumInspections = {};
									objNew.countInspections = {};
									if (j == 'total') {
										console.log('It is total  ', j);
										objNew.sumInspections['GrandTotal'] = trackObjSummary.sumInspections[j];

										console.log(objNew.sumInspections['GrandTotal']);
									} else {
										console.log('Any other...');
										console.log(trackObjSummary.sumInspections[j]);
										objNew.sumInspections[j] = trackObjSummary.sumInspections[j];
										objNew.countInspections[j] = trackObjSummary.countInspections[j];
										console.log(objNew.sumInspections[j]);
									}
									//j = (j =='total')?'GrandTotal':j; //just changing total to grandtotal.
									console.log(j);
									console.log(objNew.sumInspections[j]);
									console.log(objNew);
									trackArrSummary.push(objNew);
								}
							}


							console.log(trackObjSummary);
							console.log(trackArrSummary);
							console.log(trackObj2Arr.loopVal);

							var trackArrSummaryAvg = trackArrSummary.map(function (a) {
								console.log(a);
								console.log(Object.keys(a.sumInspections));
								console.log(a.sumInspections[Object.keys(a.sumInspections)[0]] / (trackObj2Arr.loopVal));
								Object.keys(a.sumInspections).forEach(function (b) {
									a.sumInspections[b] /= a.countInspections[b];
									console.log(b + 'Expected');
									var c = b + 'Expected';
									var cValue;
									switch (c) {
										case 'GrandTotalExpected':
											cValue = 100;
											break;
										default:
											cValue = 24;
									}
									a.sumInspections[c] = cValue;
									console.log(a);
								});
								return a;
							});

							console.log(trackArrSummary);
							console.log(trackArrSummaryAvg);
							ChartD3(null, null, trackArrSummaryAvg);	//outlier call





						}
						var classCounter = 0;
						var ChartD32 = function (rowArg, trackIdentify, trackArrSummaryAvg) {
							++classCounter;
							console.log(classCounter);
							console.log(trackIdentify);
							alert('Calling D32..........');
							console.log(trackArrSummaryAvg);
							console.log(rowArg);
							console.log(trackArrSummaryAvg);
							trackArrSummaryAvg = trackArrSummaryAvg;
							var trackArrSummaryAvgArr = [];
							trackArrSummaryAvg.forEach(a => { //to calculate the max range
								var item = a[Object.keys(a)[0]];
								trackArrSummaryAvgArr.push(item)
							});
							console.log(trackArrSummaryAvgArr);


							/*
							if (!grandD3ChartDivGrab.maxVal){ //this is the first time the Chart is called, to form the big Chart. It contains all the dataset
								maxVal = d3.max(trackArrSummaryAvgArr);
								grandD3ChartDivGrab.maxVal = maxVal; //tie the maximum value to the grandD3Chart for reference in detecting outliers
							}
							*/

							var heightVar = (rowArg) ? 25 : 50; //for first graph, go 50 height; for minifies, go 25;
							var canvasWidth = (rowArg) ? 220 : 1200; //for first graph, go 1000 width; for minifies, go 20% -200px. use in scale.
							var canvasHeight = (rowArg) ? 200 : 400;
							var fontSize = (rowArg) ? '0.5em' : 'smaller';
							var axesFont = (rowArg) ? "7px sans-serif" : "14px sans-serif";

							var data = trackArrSummaryAvg;

							var datAxesPos = trackArrSummaryAvg.length * (heightVar + 2) + 2;
							var widthScale = d3.scale.linear().domain([0, d3.max(trackArrSummaryAvgArr)]).range([0, canvasWidth]); //d3.extent

							var axes = d3.svg.axis().ticks(10).scale(widthScale);


							var canvas = d3
								.select("body")
								.append("svg")
								.attr("height", canvasHeight)
								.attr("width", canvasWidth);
							console.log(canvas);
							var miniDiv = document.getElementsByClassName('grandMiniD3ContainerDivBodyClass')[0];

							var wrapperDiv = document.createElement('div');
							wrapperDiv.setAttribute('class', 'wrapperDivClass');
							var wrapperDivCancel = document.createElement('div');
							wrapperDivCancel.setAttribute('class', 'wrapperDivCancelClass');
							var wrapperCancel = document.createElement('img');
							wrapperCancel.setAttribute('class', 'wrapperCancelClass');
							wrapperCancel.setAttribute('src', '/ProfilePicsFoldera/cancel2.jpeg');
							wrapperCancel.setAttribute('width', '20');
							wrapperCancel.setAttribute('height', '20');
							(function (wrapperDiv) {
								wrapperCancel.addEventListener('click', function () {
									wrapperDiv.parentNode.removeChild(wrapperDiv);
								});
							})(wrapperDiv);
							var wrapperDivCheck = document.createElement('div');
							wrapperDivCancel.appendChild(wrapperCancel);

							wrapperDivCheck.setAttribute('class', 'wrapperDivCheckClass' + (classCounter));
							wrapperDivCheck.style.position = 'relative';
							wrapperDivCheck.style.height = '100%';
							wrapperDivCheck.style.width = '2%';

							wrapperDivCheck.setAttribute('id', 'wrapperDivCheckId');
							var wrapperDivD3Chart = document.createElement('div');
							wrapperDivD3Chart.setAttribute('class', 'wrapperDivD3ChartClass');
							wrapperDiv.appendChild(wrapperDivCancel);
							wrapperDiv.appendChild(wrapperDivCheck);
							wrapperDiv.appendChild(wrapperDivD3Chart);

							(function (wrapperDivCancel) {
								wrapperDiv.addEventListener('mouseover', function () {
									//wrapperDivCancel.classList.remove('wrapperDivCancelClass');
									wrapperDivCancel.classList.add('wrapperDivCancelClass2');
								});
							})(wrapperDivCancel);

							(function (wrapperDivCancel) {
								wrapperDiv.addEventListener('mouseout', function () {
									wrapperDivCancel.classList.remove('wrapperDivCancelClass2');
									//wrapperDivCancel.classList.add('wrapperDivCancelClass');
								});
							})(wrapperDivCancel);

							console.log(wrapperDivCheck.className);
							var cla = "." + wrapperDivCheck.className;
							console.log(cla);

							miniDiv.appendChild(wrapperDiv);

							var canCheck = d3
								.select(cla)
								.selectAll("div")
								.data(data)
								.enter()
								.append("div")
								.attr('class', 'checkOutlierDiv')
								.style('top', function (d, i) {
									return i * (heightVar + 2) + heightVar / 2 + 'px';
								})
								.append("input")
								.attr("type", "checkbox")
								.attr('class', 'indivOutlierCheckClass')
								.on('click', function (d, i) {
									console.log(this);
									this.track = { prodName: trackIdentify.productName[i], inspectionName: Object.keys(d)[0] };
									applyInspectionOutlier(wrapperDivCheck, { prodName: trackIdentify.productName[i], inspectionName: Object.keys(d)[0] });
									//trackIdentify.productName[i];
								});


							wrapperDivD3Chart.appendChild(canvas[0][0]);
							var canvasG = canvas
								.selectAll("rect")
								.data(data)
								.enter()
								.append("g")
								.attr("transform", "translate(100,10)");

							//Actual
							canvasG
								.append("rect")
								.attr("fill", function (d, i) {
									return "blue"; //datCol[i];
								})
								.attr("y", function (d, i) {
									return i * (heightVar + 2);
								})
								.attr("height", function (d) {
									return heightVar;
								})
								.attr("width", function (d, i) {
									console.log(Object.keys(d)[0]);
									return widthScale(d[Object.keys(d)[0]]);
								});

							canvasG
								.append("text")
								.text(function (d, i) {
									return d[Object.keys(d)[0]];
									//return trackIdentify[i];
								})
								.attr("x", function (d, i) {
									return widthScale(d[Object.keys(d)[0]]);
								})
								.attr("y", function (d, i) {
									return i * (heightVar + 2) + heightVar / 2;
								})
								.attr("font-size", fontSize);

							//Expected
							canvasG
								.append("rect")
								.attr("fill", "pink")
								.attr("y", function (d, i) {
									return i * (heightVar + 2);
								})
								.attr("height", heightVar)
								.attr("width", function (d, i) {
									console.log(Object.keys(d)[1]);
									return widthScale(d[Object.keys(d)[1]]);
								});

							canvasG
								.append("text")
								.text(function (d, i) {
									return (
										d[Object.keys(d)[1]] +
										" (" +
										Math.floor((d[Object.keys(d)[1]] /
											d[Object.keys(d)[0]]) *
											100) +
										"%)"
									);
								})
								.attr("fill", "pink")
								.attr("x", function (d, i) {
									return widthScale(d[Object.keys(d)[1]]);
								})
								.attr("y", function (d, i) {
									return i * (heightVar + 2) + heightVar / 2;
								})
								.attr("font-size", fontSize);

							//Listing the insepections.
							canvasG //text for the bar.  It always refers to the first property in each object in the array
								.append("text")
								.text(function (d, i) {
									//return Object.keys(d)[0];
									return trackIdentify.productName[i];

								})
								.attr("x", function (d, i) {
									//this is why groups are good: they help transformations.
									return -60;
								})
								.attr("y", function (d, i) {
									return i * (heightVar + 2) + heightVar / 2;
								})
								.attr("font-size", fontSize);




							canvas
								.append("g")
								.style("font", axesFont)
								.attr("transform", `translate(100,${datAxesPos})`)
								.call(axes);

							canvasG
								.append("text")
								.text(function (d, i) {
									return Object.keys(d)[0];
								})

								.attr("transform", `translate(0,${datAxesPos + 20})`)

						}
					} //end of Tracking.





					var tableCellDivContainerBool = true;
					function DropDownColumn() {
						//alert('Dropping...');

						if (tableCellDivContainerBool) {
							tableCellDivContainer.classList.toggle('tableCellDivContainerAppearClass');
							menuIconContainerGrab.getElementsByClassName('columnSet')[0].appendChild(tableCellDivContainer);
							menuIconContainerGrab.getElementsByClassName('revealColumnsClass')[0].innerHTML = '^';
							tableCellDivContainerBool = !tableCellDivContainerBool;
						} else {
							tableCellDivContainer.classList.toggle('tableCellDivContainerAppearClass');
							menuIconContainerGrab.getElementsByClassName('columnSet')[0].removeChild(tableCellDivContainer);
							menuIconContainerGrab.getElementsByClassName('revealColumnsClass')[0].innerHTML = 'V';
							tableCellDivContainerBool = !tableCellDivContainerBool;
						}

					}

					var pullInBtnBool = true;
					tabReportDiv.getElementsByClassName('pullInBtnClass')[0].addEventListener('click', function () {
						//console.log('Ha');
						tabReportDivMenuClassGrab.classList.toggle('tabReportDivMenuClassMoveIn');
						//tabReportDivMenuContainerClassGrab.appendChild(menuIconContainerDiv);
						//tabReportDivMenuContainerClassGrab.style.display = 'inline-block';
						console.log('..ba!');
						if (pullInBtnBool) {
							tabReportDivMenuClassGrab.appendChild(menuIconContainerDiv);
							this.innerHTML = '<';
							console.log(tabReportDivMenuClassGrab);
							pullInBtnBool = !pullInBtnBool;
						} else {
							tabReportDivMenuClassGrab.removeChild(menuIconContainerDiv);
							this.innerHTML = '>';
							console.log(tabReportDivMenuClassGrab);
							pullInBtnBool = !pullInBtnBool;
						}
					});


					tabReportDiv.addEventListener('mouseover', function () {
						tabReportDiv.getElementsByClassName('pullInBtnClass')[0].classList.toggle('pullInBtnAppearClass');
						//tabReportDivMenu.classList.toggle('pullInBtnAppearClass');
						console.log(tabReportDiv.getElementsByClassName('pullInBtnClass')[0]);

						tabReportDiv.addEventListener('mouseout', function () {
							tabReportDiv.getElementsByClassName('pullInBtnClass')[0].classList.toggle('pullInBtnAppearClass');

							tabReportDiv.addEventListener('mouseover', function () {
								tabReportDiv.getElementsByClassName('pullInBtnClass')[0].classList.toggle('pullInBtnAppearClass');
								//tabReportDivMenu.classList.toggle('tabReportDivMenuClassMoveIn');
								//console.log('I am activated');
							}, { once: true });

							//console.log('I am not activated');
						});


					}, { once: true });

					/*
					tabReportDiv.addEventListener('mouseout', function () {
						
						tabReportDiv.addEventListener('mouseover', function () {
						//tabReportDivMenu.classList.toggle('tabReportDivMenuClassMoveIn');
						console.log('I am activated');
						});
					
						console.log('I am not activated');
					});
					*/



					reportDivAddReport.parentNode.parentNode.appendChild(tabReportDiv);
					return tabReportDiv;
				}
			})(reportDivAddReport);

			reportDivAddReport.addEventListener('click', reportDivAddingReport);

			reportDivAddGraphContainer.appendChild(reportDivAddGraph);
			reportDivAddGraphContainer.appendChild(reportDivAddReport);
			reportDivAddGraphContainer.appendChild(cancelReport);
			reportDivAddGraphContainer.appendChild(blowReport);
			reportDiv.appendChild(reportDivAddGraphContainer);
			console.log(reportDiv);

			imgReport.addEventListener('click', function () {
				var objDocTable;
				var objDocTable2 = {};
				if (this.imgReportBool) {
					//console.log(this.imgReportBool, ' should be true');
					alert('Adding Report...');

					this.style.backgroundColor = 'green';

					if (reportDiv.objection) {
						console.log(reportDiv);
						var reportDivGrabContainerClasses = reportDiv.getElementsByClassName('divContContainerClass');
						while (reportDivGrabContainerClasses.length) {
							//console.log('Removing...');
							reportDiv.removeChild(reportDivGrabContainerClasses[0]);
						}
						reportDiv.objection = null;

						console.log(this);
					} else {
						//this.style.filter = 'invert(100)';
					}

					console.log(newDivGrab);
					console.log(newDivGrabContainer);
					reportTran = newDivGrabContainer;
					console.log(this.parentNode.parentNode.parentNode.children.length);
					//this.style.filter = 'invert(100)';

					this.parentNode.parentNode.parentNode.appendChild(reportDiv);
					console.log(this.parentNode.parentNode.parentNode.children.length);
					console.log(this.parentNode.parentNode.parentNode);
					this.imgReportBool = !this.imgReportBool; //changing to false;
					console.log(this.parentNode.parentNode);
					console.log(this.parentNode.parentNode.tableInfo);
					var objDocTable = this.parentNode.parentNode.tableInfo;
					console.log(objDocTable.length);
					console.log();
					//var reportObj = FormTable(objDocTable, objDocTable2);

					var reportTable = reportDivAddingReport();
					//console.log(reportObj);
					console.log(reportTable);
					console.log(reportTable.parentNode);
					console.log(reportTable.parentNode.parentNode);
					console.log(objDocTable);
					reportTable.parentNode.objInfo = objDocTable;
					FormTable2(objDocTable, reportTable);
					//populatingTable(reportObj, reportTable);


					//console.log(imgReportBool);

				} else {
					console.log(imgReportBool, ' should be false');
					console.log(this.parentNode.parentNode.parentNode);
					console.log(this.parentNode.parentNode.parentNode.children[19]);
					this.parentNode.parentNode.parentNode.removeChild(reportDiv);
					this.style.filter = 'invert(0)';
					this.imgReportBool = !this.imgReportBool;
					;
				}

			});

			function FormTable2(obj1, tab1, clickCol) {
				console.log(obj1);
				console.log(tab1);
				console.log(tab1.getElementsByClassName('reportTabClass')[0]);
				var repTab = tab1.getElementsByClassName('reportTabClass')[0];

				for (var a = 0; a < obj1.length; a++) {
					var repTabNewRow = repTab.insertRow();
					repTabNewRow.setAttribute('class', 'repTabNewRowClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].CompanyName;
					repTabNewCell.setAttribute('class', 'CompanyNameClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].CompanyAdd;
					repTabNewCell.setAttribute('class', 'CompanyAddClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].InspDate;
					repTabNewCell.setAttribute('class', 'InspDateClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].ProductLineName;
					repTabNewCell.setAttribute('class', 'ProductLineNameClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].InspTypeName;
					repTabNewCell.setAttribute('class', 'InspTypeNameClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].ProductName;
					repTabNewCell.setAttribute('class', 'ProductNameClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].DosFormsType;
					repTabNewCell.setAttribute('class', 'DosFormsTypeClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].NRN;
					repTabNewCell.setAttribute('class', 'NRNClass');
					var repTabNewCell = repTabNewRow.insertCell();
					repTabNewCell.innerHTML = obj1[a].FindObservation + ", " + obj1[a].FindingDets + ", " + obj1[a].FindCat;
					repTabNewCell.setAttribute('class', 'FindingsClass');

				}

				var repTabRowGrab = repTab.getElementsByClassName('repTabNewRowClass');
				console.log(repTabRowGrab);
				repTabRowGrabArray = [...repTabRowGrab];


				if (b) {
					repTabRowGrabArray.forEach(a => {
						if (a.innerHTML == b) {
							a.style.diplay = 'none';
						}
					});
				}

				console.log(repTabRowGrab);
				var repTabRowGrabCloned;
				var repTabRowGrab2;
				for (var b = 0; b < repTabRowGrab.length; b++) {
					if (repTabRowGrab[b + 1]) {
						if (repTabRowGrabCloned) {
							repTabRowGrab2 = repTabRowGrabCloned;
						} else {
							repTabRowGrab2 = repTabRowGrab[b];
						}
						repTabRowGrabCloned = repTabRowGrab[b + 1].cloneNode(true);

						for (c = 0; c < repTabRowGrab[b].children.length; c++) {

							if (repTabRowGrab2.children[c].innerHTML == repTabRowGrab[b + 1].children[c].innerHTML) {
								repTabRowGrab2.children[c].style.backgroundColor = "yellow";
								repTabRowGrab[b + 1].children[c].style.backgroundColor = "yellow";
								repTabRowGrab[b + 1].children[c].innerHTML = "";
								repTabRowGrab[b + 1].children[c].style.borderTop = "0px solid red";
								repTabRowGrab[b].children[c].style.borderBottom = "0px solid red";
							}
						}

					}
				}
			}

			function FormTable3(reportTab2, alignPebReportClassGrab2, reportTabTrackClassGrab) {
				var obj1Clean = []; //this array will eventually contain objInfo sorted by product and date, address, and dosaage form. Now we have a listing of unique products per address arranged by date.
				console.log(reportTab2);
				//console.log(tab1);
				console.log(reportTab2.getElementsByClassName('reportTabClass')[0]);
				var repTab = reportTab2.getElementsByClassName('reportTabClass')[0]; //reportTabClass to have one prolonged table
				//console.log(reportTab2.getElementsByClassName('repTabNewRowOneClass')[0]);
				//console.log(reportTab2.getElementsByClassName('repTabNewRowOneClass')[0].cloneNode(true));
				var obj1 = reportTab2.parentNode.objInfo;
				console.log(obj1); //Right up till here.

				obj1.sort(function (a, b) {
					if (b) {
						if (a.CompanyAdd > b.CompanyAdd) return 1;
						if (a.CompanyAdd < b.CompanyAdd) return -1;
						if (a.InspTypeName > b.InspTypeName) return 1;
						if (a.InspTypeName < b.InspTypeName) return -1;
						if (a.ProductID > b.ProductID) return 1;
						if (a.ProductID < b.ProductID) return -1;
						if (a.DosFormsType > b.DosFormsType) return 1;
						if (a.DosFormsType < b.DosFormsType) return -1;


						/*
						if (a.age > b.age) return 1;
						if (a.age < b.age) return -1;
	
					  if (a.name > b.name) return 1;
					  if (a.name < b.name) return -1;
					
					  if (a.rank > b.rank) return 1;
					  if (a.rank < b.rank) return -1
					  */

					}
				});

				console.log(obj1);
				/*
				var repTabNewRow = repTab.insertRow();
					repTabNewRow.setAttribute('class', 'repTabNewRowClass');
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].CompanyName;
							repTabNewCell.setAttribute('class','CompanyNameClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].CompanyAdd;
							repTabNewCell.setAttribute('class','CompanyAddClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].InspDate;
							repTabNewCell.setAttribute('class','InspDateClass');
						
						var repTabNewCell = repTabNewRow.insertCell();	
							repTabNewCell.innerHTML = obj1[0].ProductLineName;
							repTabNewCell.setAttribute('class','ProductLineNameClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].ProductName;
							repTabNewCell.setAttribute('class','ProductNameClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].DosFormsType;
							repTabNewCell.setAttribute('class','DosFormsTypeClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].NRN;
							repTabNewCell.setAttribute('class','NRNClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].InspTypeName;
							repTabNewCell.setAttribute('class','InspTypeNameClass');
							
						var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1[0].FindObservation + ", "+ obj1[0].FindingDets + ", " +obj1[0].FindCat;
							repTabNewCell.setAttribute('class','FindingsClass');
							
						obj1Clean.push(obj1[0]);
						*/
				console.log(obj1);
				console.log(obj1[0]);
				var objSkipArr = [];

				obj1.sort(function (a, b) {
					if (a.ProductID > b.ProductID) return 1;
					if (a.ProductID < b.ProductID) return -1;
					if (a.CompanyAdd > b.CompanyAdd) return 1;
					if (a.CompanyAdd < b.CompanyAdd) return -1;
					if (a.DosFormsType > b.DosFormsType) return 1;
					if (a.DosFormsType < b.DosFormsType) return -1;
					if (a.InspDate > b.InspDate) return 1;
					if (a.InspDate < b.InspDate) return -1;
					if (a.InspTypeName > b.InspTypeName) return 1;
					if (a.InspTypeName < b.InspTypeName) return -1;

				});

				console.log(obj1);
				console.log(obj1Clean);
				for (var a = 0; a < obj1.length; a++) {
					console.log(a);
					if (obj1[a + 1]) {
						if (obj1[a].ProductID == obj1[a + 1].ProductID && obj1[a].DosFormsType == obj1[a + 1].DosFormsType && obj1[a].InspTypeName == obj1[a + 1].InspTypeName && obj1[a].CompanyAdd == obj1[a + 1].CompanyAdd && obj1[a].InspDate == obj1[a + 1].InspDate) { //by their product id you shall...
							console.log('Skipped');
							objSkipArr.push(obj1[a]);
						} else {
							obj1Clean.push(obj1[a]);
						}

					} else {
						obj1Clean.push(obj1[a]);
					}
				}

				console.log(obj1.length);
				console.log(objSkipArr.length);
				console.log(obj1Clean.length);
				console.log(objSkipArr);
				console.log(obj1Clean);
				tabReport1(obj1Clean);

				alignPebReportClassGrab2.addEventListener('click', function () {
					console.log(obj1Clean.length);
					console.log('sorted: ', obj1Clean.length);
					console.log(obj1Clean);
					console.log(reportTabTrackClassGrab);
					var repTab = reportTab2.getElementsByClassName('reportTabTrackClass')[0]; //reportTabClass to have one prolonged table
					console.log(repTab);
					tabReport1(this.value, repTab);
					//now we are to test for product and companyAddress to align.
				});




				console.log(obj1Clean); //this array now is sorted by product and date. Now we have a listing of unique products per address arranged by date.
				function tabReport1(align, reportTabTrackClassGrab) {

					if (align == 'Align') {
						console.log(repTab);
						console.log(reportTabTrackClassGrab);
						console.log(obj1Clean);
						var counter = 0;
						for (var a = 0; a < obj1Clean.length; a++) {
							if (obj1Clean[a + 1]) {//Anything before the last one...
								//Filter out Sames (Duplicate tied to Findings, log only unique records)
								if (obj1Clean[a].ProductID == obj1Clean[a + 1].ProductID && obj1Clean[a].CompanyAdd == obj1Clean[a + 1].CompanyAdd && obj1Clean[a].DosFormsType == obj1Clean[a + 1].DosFormsType && obj1Clean[a].InspDate == obj1Clean[a + 1].InspDate && obj1Clean[a].InspTypeName == obj1Clean[a + 1].InspTypeName) {
									console.log('Equal');
									console.log(obj1Clean[a].ProductID, obj1Clean[a + 1].ProductID, obj1Clean[a].ProductName, obj1Clean[a + 1].ProductName);
									//they are of the same findings, skip
								} else {
									console.log('UnEqual');
									console.log(obj1Clean[a].ProductID, obj1Clean[a + 1].ProductID, obj1Clean[a].ProductName, obj1Clean[a + 1].ProductName);
									if (obj1Clean[a - 1]) { //if a prior record exists.
										if (!(obj1Clean[a - 1].ProductID == obj1Clean[a].ProductID && obj1Clean[a - 1].CompanyAdd == obj1Clean[a].CompanyAdd)) { //if Product and Company Address of subsequent rows are different, create another row.
											console.log(!(obj1Clean[a].ProductID == obj1Clean[a + 1].ProductID && obj1Clean[a].CompanyAdd == obj1Clean[a + 1].CompanyAdd));
											console.log(obj1Clean[a - 1].ProductID, obj1Clean[a].ProductID, obj1Clean[a - 1].CompanyAdd, obj1Clean[a].CompanyAdd);
											var repTabNewRow = reportTabTrackClassGrab.insertRow();
											repTabNewRow.setAttribute('class', 'repTabNewRowClass');
											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].CompanyName;
											repTabNewCell.setAttribute('class', 'CompanyNameClass');
											repTabNewCell.style.color = 'red';

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].CompanyAdd;
											repTabNewCell.setAttribute('class', 'CompanyAddClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].InspDate;
											repTabNewCell.setAttribute('class', 'InspDateClass');
											repTabNewCell.classList.add('InspDateClassModify');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].ProductLineName;
											repTabNewCell.setAttribute('class', 'ProductLineNameClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].ProductName;
											repTabNewCell.setAttribute('class', 'ProductNameClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].DosFormsType;
											repTabNewCell.setAttribute('class', 'DosFormsTypeClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].NRN;
											repTabNewCell.setAttribute('class', 'NRNClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].InspTypeName;
											repTabNewCell.setAttribute('class', 'InspTypeNameClass');
											repTabNewCell.classList.add('repTabNewRowClassModify');
											console.log(repTabNewCell);

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].FindObservation + ", " + obj1Clean[a].FindingDets + ", " + obj1Clean[a].FindCat;
											repTabNewCell.setAttribute('class', 'FindingsClass');
										} else { //same product -timeline on the same line. Don't create a new row.
											//repTabNewRow.classList.add('repTabNewRowClassModify'); //this is used to select the To in tracking. This should be in an 'if'
											console.log(obj1Clean[a - 1].ProductID, obj1Clean[a].ProductID, obj1Clean[a - 1].CompanyAdd, obj1Clean[a].CompanyAdd);
											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].CompanyName;
											repTabNewCell.setAttribute('class', 'CompanyNameClass');
											repTabNewCell.style.color = 'blue';

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].CompanyAdd;
											repTabNewCell.setAttribute('class', 'CompanyAddClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].InspDate;
											repTabNewCell.setAttribute('class', 'InspDateClass');
											repTabNewCell.classList.add('InspDateClassModify1');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].ProductLineName;
											repTabNewCell.setAttribute('class', 'ProductLineNameClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].ProductName;
											repTabNewCell.setAttribute('class', 'ProductNameClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].DosFormsType;
											repTabNewCell.setAttribute('class', 'DosFormsTypeClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].NRN;
											repTabNewCell.setAttribute('class', 'NRNClass');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].InspTypeName;
											repTabNewCell.setAttribute('class', 'InspTypeNameClass');
											repTabNewCell.classList.add('repTabNewRowClassModify1');

											var repTabNewCell = repTabNewRow.insertCell();
											repTabNewCell.innerHTML = obj1Clean[a].FindObservation + ", " + obj1Clean[a].FindingDets + ", " + obj1Clean[a].FindCat;
											repTabNewCell.setAttribute('class', 'FindingsClass');
										}
									} else { //first record
										var repTabNewRow = reportTabTrackClassGrab.insertRow();
										repTabNewRow.setAttribute('class', 'repTabNewRowClass');
										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].CompanyName;
										repTabNewCell.setAttribute('class', 'CompanyNameClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].CompanyAdd;
										repTabNewCell.setAttribute('class', 'CompanyAddClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].InspDate;
										repTabNewCell.setAttribute('class', 'InspDateClass');
										repTabNewCell.classList.add('InspDateClassModify');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].ProductLineName;
										repTabNewCell.setAttribute('class', 'ProductLineNameClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].ProductName;
										repTabNewCell.setAttribute('class', 'ProductNameClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].DosFormsType;
										repTabNewCell.setAttribute('class', 'DosFormsTypeClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].NRN;
										repTabNewCell.setAttribute('class', 'NRNClass');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].InspTypeName;
										repTabNewCell.setAttribute('class', 'InspTypeNameClass');
										repTabNewCell.classList.add('repTabNewRowClassModify');

										var repTabNewCell = repTabNewRow.insertCell();
										repTabNewCell.innerHTML = obj1Clean[a].FindObservation + ", " + obj1Clean[a].FindingDets + ", " + obj1Clean[a].FindCat;
										repTabNewCell.setAttribute('class', 'FindingsClass');
									}


								}
							} else { //throwing in the last one
								var repTabNewRow = (!(obj1Clean[a - 1].ProductID == obj1Clean[a].ProductID && obj1Clean[a - 1].CompanyAdd == obj1Clean[a].CompanyAdd)) ? reportTabTrackClassGrab.insertRow() : repTabNewRow; //if the last one is not the same as the preceeding, 
								console.log(repTabNewRow);
								console.log(!(obj1Clean[a - 1].ProductID == obj1Clean[a].ProductID && obj1Clean[a - 1].CompanyAdd == obj1Clean[a].CompanyAdd) ? 'repTabNewRowClassModify' : 'repTabNewRowClassModify1');

								repTabNewRow.setAttribute('class', 'repTabNewRowClass');
								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].CompanyName;
								repTabNewCell.setAttribute('class', 'CompanyNameClass');
								//repTabNewCell.style.color = 'blue';

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].CompanyAdd;
								repTabNewCell.setAttribute('class', 'CompanyAddClass');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].InspDate;
								repTabNewCell.setAttribute('class', 'InspDateClass');
								repTabNewCell.classList.add(!(obj1Clean[a - 1].ProductID == obj1Clean[a].ProductID && obj1Clean[a - 1].CompanyAdd == obj1Clean[a].CompanyAdd) ? 'InspDateClassModify' : 'InspDateClassModify1');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].ProductLineName;
								repTabNewCell.setAttribute('class', 'ProductLineNameClass');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].ProductName;
								repTabNewCell.setAttribute('class', 'ProductNameClass');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].DosFormsType;
								repTabNewCell.setAttribute('class', 'DosFormsTypeClass');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].NRN;
								repTabNewCell.setAttribute('class', 'NRNClass');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].InspTypeName;
								repTabNewCell.setAttribute('class', 'InspTypeNameClass');
								repTabNewCell.classList.add((!(obj1Clean[a - 1].ProductID == obj1Clean[a].ProductID && obj1Clean[a - 1].CompanyAdd == obj1Clean[a].CompanyAdd)) ? 'repTabNewRowClassModify' : 'repTabNewRowClassModify1');
								//repTabNewCell.classList.add('repTabNewRowClassModify');

								var repTabNewCell = repTabNewRow.insertCell();
								repTabNewCell.innerHTML = obj1Clean[a].FindObservation + ", " + obj1Clean[a].FindingDets + ", " + obj1Clean[a].FindCat;
								repTabNewCell.setAttribute('class', 'FindingsClass');
								console.log(obj1Clean[a].CompanyName, ' , ', obj1Clean[a].CompanyAdd, ' , ', obj1Clean[a].ProductName);

							} //throwing the last one in. The last one will always need to be rendered.
						}
					} else {
						console.log(repTab);
						for (var a = 0; a < obj1Clean.length; a++) {
							//if (obj1Clean[a].ProductID == obj1Clean[a-1].ProductID ) { //by their product id you shall...
							//console.log('Skipped');
							//}else{
							console.log(align);
							var repTabNewRow = repTab.insertRow();
							repTabNewRow.setAttribute('class', 'repTabNewRowClass');
							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].CompanyName;
							repTabNewCell.setAttribute('class', 'CompanyNameClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].CompanyAdd;
							repTabNewCell.setAttribute('class', 'CompanyAddClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].InspDate;
							repTabNewCell.setAttribute('class', 'InspDateClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].ProductLineName;
							repTabNewCell.setAttribute('class', 'ProductLineNameClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].ProductName;
							repTabNewCell.setAttribute('class', 'ProductNameClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].DosFormsType;
							repTabNewCell.setAttribute('class', 'DosFormsTypeClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].NRN;
							repTabNewCell.setAttribute('class', 'NRNClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].InspTypeName;
							repTabNewCell.setAttribute('class', 'InspTypeNameClass');

							var repTabNewCell = repTabNewRow.insertCell();
							repTabNewCell.innerHTML = obj1Clean[a].FindObservation + ", " + obj1Clean[a].FindingDets + ", " + obj1Clean[a].FindCat;
							repTabNewCell.setAttribute('class', 'FindingsClass');
							//obj1Clean.push(obj1[a]);
							//}
						}
					}
					console.log(repTab);
				}//end of function





				/*
				var repTabRowGrab = repTab.getElementsByClassName('repTabNewRowClass');
				console.log(repTabRowGrab);
				repTabRowGrabArray = [...repTabRowGrab];
				
				
				if (b){
					repTabRowGrabArray.forEach(a=>{
														if (a.innerHTML == b){
															a.style.diplay = 'none';
														}
														});
				}
				
				console.log(repTabRowGrab);
				var repTabRowGrabCloned;
				var repTabRowGrab2;
				for (var b = 0;b <repTabRowGrab.length;b++){
					if (repTabRowGrab[b+1]){
						if (repTabRowGrabCloned){
							repTabRowGrab2 =repTabRowGrabCloned;
						} else{
							repTabRowGrab2 = repTabRowGrab[b];
						}
						repTabRowGrabCloned = repTabRowGrab[b+1].cloneNode(true);
						
						for (c =0;c<repTabRowGrab[b].children.length;c++){
						
								if (repTabRowGrab2.children[c].innerHTML == repTabRowGrab[b+1].children[c].innerHTML){
									repTabRowGrab2.children[c].style.backgroundColor = "yellow";
									repTabRowGrab[b+1].children[c].style.backgroundColor = "yellow";
									repTabRowGrab[b+1].children[c].innerHTML = "";
									repTabRowGrab[b+1].children[c].style.borderTop = "0px solid red";
									repTabRowGrab[b].children[c].style.borderBottom = "0px solid red";
								}
						}
							
					}
				}
				*/
			}

			function FormTable(res, obj) {
				console.log(res);
				for (var a = 0; a < res.length; a++) {
					if (!obj[res[a].CompanyName])
						obj[res[a].CompanyName] = {};
					obj[res[a].CompanyName]['CompanyName'] = res[a].CompanyName;
					if (!obj[res[a].CompanyName][res[a].CompanyAdd])
						obj[res[a].CompanyName][res[a].CompanyAdd] = {};

					obj[res[a].CompanyName][res[a].CompanyAdd]['CompAdd'] = res[a].CompanyAdd;
					obj[res[a].CompanyName][res[a].CompanyAdd]['Lat'] = res[a].Latitude;
					obj[res[a].CompanyName][res[a].CompanyAdd]['Lng'] = res[a].Longitude;
					obj[res[a].CompanyName][res[a].CompanyAdd]['State'] = res[a].State;
					obj[res[a].CompanyName][res[a].CompanyAdd]['ContPers'] = res[a].ContactPerson;
					obj[res[a].CompanyName][res[a].CompanyAdd]['CompEmail'] = res[a].CompanyEmail;
					//console.log('Product line Name: '+res[a].ProductLineName);
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate] = {};
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate]['InspectionDate'] = res[a].InspDate;
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName] = {};
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName]['ProductLine'] = res[a].ProductLineName;
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName] = {}
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName]['InspTypeName'] = res[a].InspTypeName;
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName] = {};
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['ProductName'] = res[a].ProductName;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['ProdStr'] = res[a].ProductStrength;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['SubClassName'] = res[a].SubClassName;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['Gen'] = res[a].GenName;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['DosFormsType'] = res[a].DosFormsType;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['NRN'] = res[a].NRN;
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['PID'] = res[a].ProductID;
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName][res[a].FindingImg])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName][res[a].FindingImg] = [];
					if (!obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['Findings'])
						obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['Findings'] = []; //creating new Finding
					//obj[res[a].CompanyName][res[a].ProductLineName][res[a].InspDate][res[a].InspTypeName][res[a].ProductName][res[a].FindingDets] = []; //blanking Finding (new and old) array
					obj[res[a].CompanyName][res[a].CompanyAdd][res[a].InspDate][res[a].ProductLineName][res[a].InspTypeName][res[a].ProductName]['Findings'].push(res[a].FindingImg, res[a].FindingDets, res[a].FindCat, res[a].FindObservation, res[a].FindingID);



				}
				console.log(obj);
				return obj;



			}


			function populatingTable(reportObj1, reportTable1) {
				console.log(reportTable1);
				var tabRowClonedProduct;
				var tabRowClonedInspection;

				var counterProd = 0;

				var reportTable1Grab = document.getElementById('reportTab');
				console.log(reportTable1Grab);
				for (var b in reportObj1) {
					if (reportObj1.hasOwnProperty(b)) {
						console.log(b);
						console.log('Entered company');
						var newRow = reportTable1Grab.insertRow();
						newRow.setAttribute('id', 'tabRow');
						var newCellCompany = newRow.insertCell();
						newCellCompany.innerHTML = reportObj1[b]['CompanyName'];
						//reportTable1.innerHTML += '<tr><td>'+ reportObj1[b]['CompanyName'] + '</td>';
						for (var bc in reportObj1[b]) {
							if (reportObj1[b].hasOwnProperty(bc) && typeof reportObj1[b][bc] != "string") { //for address
								console.log(bc);
								console.log(reportObj1[b][bc]['CompAdd']);
								console.log('Entered address');
								var newCellAddress = newRow.insertCell();
								console.log(reportObj1[b][bc]['CompAdd']);
								newCellAddress.innerHTML = reportObj1[b][bc]['CompAdd'];
								//reportTable1.innerHTML += '<td>'+ reportObj1[b][bc]['CompAdd']+ '</td>';
								for (var c in reportObj1[b][bc]) {
									//create another row
									if (reportObj1[b][bc].hasOwnProperty(c) && typeof reportObj1[b][bc][c] != "string") {
										if (typeof reportObj1[b][bc][c] == 'object' && (!Array.isArray(reportObj1[b][bc][c]))) { //Locating Dates
											console.log('Entered Dates... ', c);
											var newCellDate = newRow.insertCell();
											newCellDate.innerHTML = reportObj1[b][bc][c]['InspectionDate'];
											//reportTable1.innerHTML += '<td>'+ reportObj1[b][bc][c]['InspectionDate']+ '</td>';
											for (var d in reportObj1[b][bc][c]) {
												if (reportObj1[b][bc][c].hasOwnProperty(d) && typeof reportObj1[b][bc][c][d] != "string") {
													console.log('Entered PLines...');
													var newCellPL = newRow.insertCell();
													newCellPL.innerHTML = reportObj1[b][bc][c][d]['ProductLine'];
													//reportTable1.innerHTML += '<td>'+ reportObj1[b][bc][c][d]['ProductLine'] +'</td>';
													if (typeof reportObj1[b][bc][c][d] == 'object' && (!Array.isArray(reportObj1[b][bc][c][d]))) { //Locating dates
														for (var e in reportObj1[b][bc][c][d]) {
															if (reportObj1[b][bc][c][d].hasOwnProperty(e) && typeof reportObj1[b][bc][c][d][e] != "string") {
																console.log('Entered inspection...');
																if (tabRowClonedInspection) {
																	alert('inspection');
																	reportTable1Grab.appendChild(tabRowClonedInspection);
																	console.log('Using this Inspection...');
																	console.log(tabRowClonedInspection.beginCell);
																	console.log(tabRowClonedInspection);

																	tabRowClonedInspection.children[tabRowClonedInspection.beginCell].innerHTML = reportObj1[b][bc][c][d][e]['InspTypeName'];
																	//tabRowClonedInspection = undefined;
																} else {
																	var newCellInspection = newRow.insertCell();
																	newCellInspection.innerHTML = reportObj1[b][bc][c][d][e]['InspTypeName'];
																}

																if (typeof reportObj1[b][bc][c][d][e] == 'object' && (!Array.isArray(reportObj1[b][bc][c][d][e]))) {//locating inspections
																	//mapOverMarker.setTitle(b + ' , ' + reportObj1[b][bc].CompAdd); //b is company name, ...[bc].CompAdd is company address

																	//infoObj.noC = b;
																	//infoObj.noCAdd = reportObj1[b][bc].CompAdd;
																	//mapOverMarker.infoObj =infoObj;

																	//var prod = "" ; // to accumulate product info if more that one

																	//var tabRowClonedProduct;

																	//tabRowClonedProduct = null;

																	for (var f in reportObj1[b][bc][c][d][e]) {
																		if (reportObj1[b][bc][c][d][e].hasOwnProperty(f) && typeof reportObj1[b][bc][c][d][e][f] != "string") {
																			console.log('Entered products: ', f);
																			console.log(tabRowClonedProduct);
																			console.log(tabRowClonedInspection);
																			console.log(tabRowClonedInspection.beginCell);
																			counterProd++;

																			//tabRowClonedProduct =tabRowClonedInspection?tabRowClonedInspection:tabRowClonedProduct
																			if (tabRowClonedInspection || tabRowClonedProduct) {
																				//alert('product');
																				reportTable1Grab.appendChild(tabRowClonedProduct);
																				console.log('Using this Product...');
																				console.log(tabRowClonedProduct.beginCell);
																				console.log(tabRowClonedProduct);
																				console.log(tabRowClonedProduct.id);
																				tabRowClonedProduct.children[tabRowClonedProduct.beginCell + 1].innerHTML = reportObj1[b][bc][c][d][e][f]['DosFormsType'];
																				tabRowClonedProduct.children[tabRowClonedProduct.beginCell + 2].innerHTML = reportObj1[b][bc][c][d][e][f]['NRN'];
																			} else {
																				alert('iproduct');
																				var newCellProductName = newRow.insertCell();
																				newCellProductName.innerHTML = reportObj1[b][bc][c][d][e][f]['ProductName'];
																				var newCellProductDosageType = newRow.insertCell();
																				newCellProductDosageType.innerHTML = reportObj1[b][bc][c][d][e][f]['DosFormsType'];
																				var newCellNRN = newRow.insertCell();
																				newCellNRN.innerHTML = reportObj1[b][bc][c][d][e][f]['NRN'];
																			}
																			if (typeof reportObj1[b][bc][c][d][e][f] == 'object' && (!Array.isArray(reportObj1[b][bc][c][d][e][f]))) { //locating products
																				console.log(f);
																				var prod; // f + '('+reportObj1[b][bc][c][d][e][f].ProdStr +'mg,' + reportObj1[b][bc][c][d][e][f].DosFormsType +')'+ ' , Brand of '+ reportObj1[b][bc][c][d][e][f].Gen +', ' + reportObj1[b][bc][c][d][e][f].SubClassName + '<br/><strong>Findings:</strong><br/>' +'(';
																				var findsArr = reportObj1[b][bc][c][d][e][f]['Finds'];
																				for (var x = 0; x < reportObj1[b][bc][c][d][e][f]['Findings'].length; x++) {
																					prod += '<em>' + reportObj1[b][bc][c][d][e][f]['Findings'][x] + ',';
																				}
																				prod += '</em>)' + '<br>';
																				if (tabRowClonedProduct) {
																					tabRowClonedProduct.children[tabRowClonedProduct.beginCell + 3].innerHTML = prod;
																					tabRowClonedProduct = undefined; //resetting
																				} else {
																					var newCellFinding = newRow.insertCell();
																					newCellFinding.innerHTML = prod;
																				}

																				//var newRow = reportTable1Grab.insertRow();
																				//newRow.insertCell();

																			}
																			var tabRowGrab = document.getElementById('tabRow');
																			tabRowClonedProduct = tabRowGrab.cloneNode(true); //creating tabRowCloned;
																			tabRowClonedProduct.id = 'tabRow' + counterProd;
																			console.log(tabRowClonedProduct);
																			for (var a = 0; a < tabRowClonedProduct.children.length; a++) {
																				console.log(tabRowClonedProduct.children[a].innerHTML);
																				if (tabRowClonedProduct.children[a].innerHTML !== reportObj1[b][bc][c][d][e][f]['ProductName']) {
																					tabRowClonedProduct.children[a].innerHTML = "";
																					console.log(reportObj1[b][bc][c][d][e][f]['ProductName'], " & ", tabRowClonedProduct.children[a].innerHTML);
																				} else {
																					console.log(a);
																					tabRowClonedProduct.beginCell = a;
																					//break;
																				}
																			}
																			//mapOverMarker.setTitle(b);
																			if (tabRowClonedProduct) {
																				console.log('Exists');
																			} else {
																				console.log('Not exists');
																			}
																		}
																	} //end of product


																}

																//for Inspection
																var tabRowGrab = document.getElementById('tabRow');
																tabRowClonedInspection = tabRowGrab.cloneNode(true); //creating tabRowCloned;
																tabRowClonedInspection.id = 'tabRowClonedInspectionId';
																console.log('Inspection, tabRowClonedInspection');
																console.log(tabRowClonedInspection);
																for (var a = 0; a < tabRowClonedInspection.children.length; a++) {
																	console.log(tabRowClonedInspection.children[a].innerHTML);
																	if (tabRowClonedInspection.children[a].innerHTML !== reportObj1[b][bc][c][d][e]['InspTypeName']) {
																		console.log(tabRowClonedInspection.children[a].innerHTML, " ", reportObj1[b][bc][c][d][e]['InspTypeName'], " ", a);
																		tabRowClonedInspection.children[a].innerHTML = "";

																	} else {
																		console.log(a);
																		tabRowClonedInspection.beginCell = a;
																		console.log(tabRowClonedInspection.beginCell);
																		console.log(tabRowClonedInspection.children[a].innerHTML, " ", reportObj1[b][bc][c][d][e]['InspTypeName'], " ", a);
																		//break;
																	}
																}

															} //inspection
														}

													}


												}
											}
										}
									}
								}
							} //hasOwn address
						} //for address

					}
				}



			}//end of populatingTable

			var imgRemov = document.createElement('img');
			imgRemov.setAttribute('src', '/ProfilePicsFoldera/icons8-delete-24.png');
			imgRemov.setAttribute('width', 20);
			imgRemov.setAttribute('height', 20);
			//imgRemov.style.opacity = 0.6;

			imgRemov.addEventListener('click', function () {
				dashboardaGrab.removeChild(this.parentNode.parentNode);
			});

			var imgSearch = document.createElement('img');
			imgSearch.setAttribute('src', '/ProfilePicsFoldera/icons8-search-40.png');
			imgSearch.setAttribute('width', 20);
			imgSearch.setAttribute('height', 20);
			imgSearch.addEventListener('click', function () {
				searchComp.style.width = '50%';
				searchComp.style.backgroundColor = 'white';
				this.parentNode.appendChild(searchComp);
				this.parentNode.removeChild(this);
			});



			var imgPin = document.createElement('img');
			imgPin.setAttribute('src', '/ProfilePicsFoldera/pin.png');
			imgPin.setAttribute('width', 20);
			imgPin.setAttribute('height', 20);
			imgPin.setAttribute('class', 'imgPinClass');
			imgPin.style.transitionDuration = "0.1s";
			imgPin.style.transform = "rotate(45deg)";

			var imgFilter = document.createElement('img');
			imgFilter.setAttribute('src', 'ProfilePicsFoldera/filter.png');
			imgFilter.setAttribute('width', 20);
			imgFilter.setAttribute('height', 20);
			imgFilter.setAttribute('class', 'imgProdClass');
			imgFilter.style.opacity = 0.67;
			//imgFilter.addEventListener('mouseover', function() {alert('Changed opacity')});
			console.log(imgFilter.style.opacity);


			var filtDivContainer = document.createElement('div');
			var filtDiv = document.createElement('div');
			filtDiv.setAttribute('class', 'filtDivClass'); //customDivClass
			filtDivContainer.appendChild(filtDiv);



			var imgProdLine = document.createElement('img');
			imgProdLine.setAttribute('src', '/ProfilePicsFoldera/productline.png');
			imgProdLine.setAttribute('id', 'imgProdLineId');
			imgProdLine.setAttribute('width', 40);
			imgProdLine.setAttribute('width', 40);
			imgProdLine.setAttribute('class', 'customDivClassGraphIcon');
			imgProdLine.filtType = 'ProductLineName';
			filtDiv.appendChild(imgProdLine);

			var imgProd = document.createElement('img');
			imgProd.setAttribute('src', '/ProfilePicsFoldera/product.png');
			imgProd.setAttribute('id', 'imgProdId');
			imgProd.setAttribute('width', 40);
			imgProd.setAttribute('class', 'customDivClassGraphIcon');
			imgProd.filtType = 'ProductName';
			filtDiv.appendChild(imgProd);


			var imgComp = document.createElement('img');
			imgComp.setAttribute('src', '/ProfilePicsFoldera/clipboard.png');
			imgComp.setAttribute('id', 'imgCompId');
			imgComp.setAttribute('width', 40);
			imgComp.setAttribute('height', 40);
			imgComp.setAttribute('class', 'customDivClassGraphIcon');
			imgComp.filtType = 'FindObservation';
			filtDiv.appendChild(imgComp);



			var filtTypeVar; //for use in saving filter state...
			var filtDivBool = true;
			var prodCast;
			var toProdCast; //function
			var objDoc2;// for use with product filter
			var data1;
			var toChangeChart; //function



			var filterOption; //a function;

			(function (newDivGrab2, newDivGrab, newDivGrabContainer, filtDiv, filtDivBool, chart2) {
				if (newDivGrabContainer.children[3] == newDivGrab) {
					imgFilter.style.opacity = 0.1;
				} else {
					imgFilter.style.opacity = 1;
				}
				filterOption = function () {
					console.log(newDivGrabContainer.children[3]);
					if (newDivGrabContainer.children[3] !== newDivGrab) {

						if (filtDivBool) {
							console.log(newDivGrabContainer);
							alert('Adding filtDiv');
							filtDiv.classList.remove('filtDivClass');
							newDivGrabContainer.children[2].children[0].classList.add('filtDivClass2');
							console.log(newDivGrabContainer.children[0]);
							console.log(newDivGrabContainer);
							console.log('Appended...!');
							menuIndicate(this, filtDivBool);
							filtDivBool = !filtDivBool;
						} else {
							alert('Removing filtDiv');
							newDivGrabContainer.children[2].children[0].classList.remove('filtDivClass2');
							newDivGrabContainer.children[2].children[0].classList.add('filtDivClass');
							console.log(newDivGrabContainer);
							newDivGrabContainer.children[0].style.opacity = 1;
							menuIndicate(this, filtDivBool);
							filtDivBool = !filtDivBool;
						}
					} else { //end of if (testing for newDivGrab);
						return 0;
					}
				}
				imgFilter.addEventListener('click', filterOption);
				//Here
				var typeGraphTransient;

				toProdCast = function (typeGraph2) {
					console.log(typeGraph2);
					typeGraphTransient = typeGraph2;
				}
				prodCast = function (filtType2, typeGraph2) {
					console.log(this);
					console.log('This is the ID: ' + this.id);
					console.log(filtDiv.children[2].id);

					if (typeGraph2 != undefined) { //saved
						invertIndicator(filtType2, typeGraph2);
					} else { //direct clicks
						//alert('Calling...');
						console.log(this.graphType);
						invertIndicator(this.filtType, this.graphType);
					}
					/*
					for (var d=0;d < filtDiv.children.length;d++){
						if (this.id == filtDiv.children[d].id){
							console.log('Found...'+this.id);
							this.style.filter ='invert(100)';
							console.log('******');
							console.log(this.id);
							console.log(filtDiv.children[d].id);
							console.log('******');
						}else{
							filtDiv.children[d].style.filter ='invert(0)';
							console.log('-----');
							console.log(this.id);
							console.log(filtDiv.children[d].id);
							console.log('-----');
						}
					}
					
					
					
					alert('calllllllllleedeeeed!');
					
					//Saved info
					if (filtType2){
						imgFilter.style.filter ='invert(100)';
						for (var d=0;d < filtDiv.children.length;d++){
							if (filtType2 == filtDiv.children[d].filtType){
								filtDiv.children[d].style.filter ='invert(100)';
							}
						}
					}
					*/

					console.log(dashData);
					var arrFilt = {};
					//alert('Filtering...!');
					console.log(objDoc2);
					console.log(this.filtType);
					console.log(dashStatObj.filtType);
					filtTypeVar = (this.filtType ? this.filtType : dashStatObj.filtType);
					console.log(filtTypeVar);

					for (var a = 0; a < objDoc2.length; a++) {
						console.log('Entered..');
						for (var b in objDoc2[a]) {
							if (objDoc2[a].hasOwnProperty(b)) {
								console.log(b);
								console.log(filtTypeVar);
								if (b == filtTypeVar) {
									console.log(b);
									console.log(filtTypeVar);
									arrFilt[objDoc2[a][b]] = 0;
									console.log(arrFilt);
								}
							}
						}
					}



					for (var a = 0; a < objDoc2.length; a++) {
						//console.log('Entered..');
						for (var b in objDoc2[a]) {
							if (objDoc2[a].hasOwnProperty(b)) {
								//console.log('Entered pass...');
								if (b == filtTypeVar) {
									++arrFilt[objDoc2[a][b]];
								}
							}
						}
					}
					console.log(arrFilt);
					console.log(dashData);
					google.charts.setOnLoadCallback(function () {

						console.log(dashData);
						console.log(dashStatObj);

						var arrChart = [['Comp', 'Measure', { role: 'style' }]]
						//var arrChart1 =[];
						//arrChart1. push(['Comp', 'Measure', {role:'style'}]);
						for (var d in arrFilt) {
							if (arrFilt.hasOwnProperty(d)) {
								arrChart.push([d, arrFilt[d], 'color: green']);
							}
						}
						//console.log(arrFilt);
						//console.log(arrChart);
						delete (arrChart[arrChart.length]);
						//console.log(arrChart);	

						data1 = new google.visualization.arrayToDataTable(arrChart);
						//data.addColumn('string', 'Compliance');
						//data.addColumn('number', 'Number');	
						var options = {
							'title': 'GMP Profile',
							'width': 317,
							'height': 166
						};


						if (typeGraphTransient) {//graph has being modified. I think typeGraph2
							console.log(typeGraphTransient);
							switch (typeGraphTransient) {
								case 'ColumnChart':
									//alert('Columning Serious');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
									break;
								case 'PieChart':
									//alert('Pieing Serious');
									var chart = new google.visualization.PieChart(dashChartComplianceIcon);
									pieIcon.style.filter = 'invert(100)';
									break;
								case 'LineChart':
									var chart = new google.visualization.LineChart(dashChartComplianceIcon);
									lineIcon.style.filter = 'invert(100)';
									break;
								case 'Scatter':
									var chart = new google.charts.Scatter(dashChartComplianceIcon);
									scatIcon.style.filter = 'invert(100)';
									break;
								default:
									alert('Defaulting..');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
							}

						} else if (typeGraph2) { //graph has being modified
							console.log(typeGraph2);
							switch (typeGraph2) {
								case 'ColumnChart':
									//alert('Columning Serious');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
									break;
								case 'PieChart':
									//alert('Pieing Serious');
									var chart = new google.visualization.PieChart(dashChartComplianceIcon);
									pieIcon.style.filter = 'invert(100)';
									break;
								case 'LineChart':
									var chart = new google.visualization.LineChart(dashChartComplianceIcon);
									lineIcon.style.filter = 'invert(100)';
									break;
								case 'Scatter':
									var chart = new google.charts.Scatter(dashChartComplianceIcon);
									scatIcon.style.filter = 'invert(100)';
									break;
								default:
									alert('Defaulting..');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
							}


						} else if (dashStatObj) {
							//imgSet.style.filter ='invert(100)';

							switch (dashStatObj.graType) {
								case 'ColumnChart':
									//alert('Columning Serious');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
									break;
								case 'PieChart':
									//alert('Pieing Serious');
									var chart = new google.visualization.PieChart(dashChartComplianceIcon);
									pieIcon.style.filter = 'invert(100)';
									break;
								case 'LineChart':
									var chart = new google.visualization.LineChart(dashChartComplianceIcon);
									lineIcon.style.filter = 'invert(100)';
									break;
								case 'Scatter':
									var chart = new google.charts.Scatter(dashChartComplianceIcon);
									scatIcon.style.filter = 'invert(100)';
									break;
								default:
									alert('Defaulting..');
									var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									graphIcon.style.filter = 'invert(100)';
							}


						} else {
							var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
						}



						//var chart = new google.visualization.ColumnChart(dashChartCompliance);
						/*
						dashChartCompliance.objDoc = objDoc;
						dashChartCompliance.addEventListener('click', function(){
							//alert('clicked, output obj');
							//console.log(this.objDoc);
						});
						*/
						//console.log(dashChartCompliance);
						//console.log(dashChartCompliance.objDoc);
						//newDivGrabParentNode.appendChild(dashChartCompliance);

						console.log('Added Chart...');
						sendReq.setAttribute('value', 'Back');

						//	console.log(newDivGrab);
						//console.log(newDivGrabParentNode);
						//dashChartCompliance.appendChild(dashChartComplianceSwitch);
						console.log(chart2);
						if (chart2) {
							alert('Chart2 here');
							chart2.draw(data1, options);
						} else {
							//alert('Chart here');
							chart.draw(data1, options);
						}

						console.log(dashData);
						if (dashData) {
							console.log('Has dashData...');
							if (dashStatObj.dashStat == 'true') {
								//don't autosave on loading...
								//alert(dashData);
								newDivGrabContainer.style.borderColor = 'green';
							}
							//dashData = undefined;
							//AutoSaveGlo();



							//alert('Changes made');
							imgPinBool = false;
							//alert (imgPinBool);

							sendSavObj.savRep = true; //is this used at all?
							//if (sendSavObj.iDSavStr){
							imgPin.style.transitionDuration = "0.1s";
							//imgPin.style.transform = "rotate(15deg)";
							newDivGrabContainer.style.borderStyle = 'solid';
							newDivGrabContainer.style.borderColor = 'Green';
							//}

							if (dashData) {
								dashData = undefined;
							}
						} else {
							alert('No Data');
							console.log(dashDataObj);
							AutoSaveGlo();//enforcing resave;
						}



						console.log(data1);
						//for use by ChangeChart -to consistently change graphs on the same filter
						toChangeChart(data1);
						console.log(filtDivBool);
					});



					//return 'Musca Domestica';		


					newDivGrabContainer.children[2].children[0].classList.remove('filtDivClass2');
					newDivGrabContainer.children[2].children[0].classList.add('filtDivClass');
					console.log(newDivGrabContainer);
					newDivGrabContainer.children[0].style.opacity = 1;
					//filtDivBool = !filtDivBool;
					console.log(this);
					console.log(this.id);
					if (this.id == 'imgProdLineId' || this.id == 'imgProdId' || this.id == 'imgCompId') {
						console.log('Equality...');
						filtDivBool = !filtDivBool;
					}
					console.log('It shoud remove now');


				};

				imgProdLine.addEventListener('click', prodCast);

				imgProd.addEventListener('click', prodCast);
				imgComp.addEventListener('click', prodCast);








			})(newDivGrab2, newDivGrab, newDivGrabContainer, filtDiv, filtDivBool, chart2);

			function menuIndicate(this2, bool) {
				alert('Inverting...');
				console.log(this2);
				if (bool) {
					//this2.style.filter ='invert(100)';
				} else {
					//this2.style.filter ='none';
				}
			}

			var imgSet = document.createElement('img');
			imgSet.setAttribute('src', '/ProfilePicsFoldera/set-icon.png');
			imgSet.setAttribute('width', 20);
			imgSet.setAttribute('height', 20);
			imgSet.setAttribute('class', 'imgSetClass');


			var customDivContainer = document.createElement('div');

			var customDiv = document.createElement('div');
			customDiv.setAttribute('class', 'customDivClass');

			var customGraph = document.createElement('div');
			customGraph.setAttribute('class', 'customDivClassGraph');

			var dashChartComplianceIcon;
			//var newDivGrabParentNodeIcon;
			var objDocIcon; //for storing data to use in ChangeChart 
			var typeGraph = "ColumnChart"; //for storing the type of graph for use
			var typeGraph2;

			var graphIcon = document.createElement('img');
			graphIcon.setAttribute('src', '/ProfilePicsFoldera/graph.png');
			graphIcon.setAttribute('width', 40);
			graphIcon.setAttribute('height', 40);
			graphIcon.setAttribute('class', 'customDivClassGraphIcon');
			graphIcon.graphType = 'ColumnChart';


			var pieIcon = document.createElement('img');
			pieIcon.setAttribute('src', '/ProfilePicsFoldera/Pie Chart.png');
			pieIcon.setAttribute('width', 40);
			pieIcon.setAttribute('width', 40);
			pieIcon.setAttribute('class', 'customDivClassGraphIcon');
			pieIcon.graphType = 'PieChart';

			var lineIcon = document.createElement('img');
			lineIcon.setAttribute('src', '/ProfilePicsFoldera/lineIcon.png');
			lineIcon.setAttribute('width', 40);
			lineIcon.setAttribute('width', 40);
			lineIcon.setAttribute('class', 'customDivClassGraphIcon');
			lineIcon.graphType = 'LineChart';

			var stackIcon = document.createElement('img');
			stackIcon.setAttribute('src', '/ProfilePicsFoldera/stackedChartIcon.png');
			stackIcon.setAttribute('width', 40);
			stackIcon.setAttribute('width', 40);
			stackIcon.setAttribute('class', 'customDivClassGraphIcon');
			stackIcon.graphType = '';


			var scatIcon = document.createElement('img');
			scatIcon.setAttribute('src', '/ProfilePicsFoldera/ScatterPlotIcon.png');
			scatIcon.setAttribute('width', 40);
			scatIcon.setAttribute('width', 40);
			scatIcon.setAttribute('class', 'customDivClassGraphIcon');
			scatIcon.graphType = 'Scatter';

			customGraph.appendChild(graphIcon);
			customGraph.appendChild(pieIcon);
			customGraph.appendChild(lineIcon);
			customGraph.appendChild(stackIcon);
			customGraph.appendChild(scatIcon);

			var customDivBool = true;
			var addCustomCtrl;







			var absolutDiv = document.createElement('div');
			absolutDiv.style.position = 'relative';

			newDivGrabContainer.appendChild(absolutDiv);

			//if (dashStatObj.dashStat !='true'){
			//alert('Ya');
			newDivGrabContainer.appendChild(customDivContainer);
			newDivGrabContainer.appendChild(filtDivContainer);
			console.log(newDivGrabContainer);

			//}

			//alert(newDivGrabContainer.children[1].className);
			console.log(newDivGrabContainer);

			//if (dashStatObj.dashStat =='true'){
			//alert(dashStatObj.dashStat);
			//newDivGrabContainer.appendChild(customGraph);
			//}




			var chart2;
			(function (newDivGrab, newDivGrabContainer, customDivBool) {


			})(newDivGrab, newDivGrabContainer, customDivBool);




			var customDivBool = true;
			(function (newDivGrab2, newDivGrabContainer, customDivBool) {
				imgSet.addEventListener('click', function () {
					if (customDivBool) {
						//alert('Adding...');
						alert('This is customDivBool ' + customDivBool);
						console.log(newDivGrabContainer);

						//customDiv.classList.remove('customDivClass');
						newDivGrabContainer.children[1].children[0].classList.add('customDivClass2');
						//customDiv.setAttribute('class', 'customDivClass2');
						console.log(newDivGrabContainer.children[0]);
						console.log('Appended...!');
						customDivBool = !customDivBool;
					} else {
						alert('This is customDivBool ' + customDivBool);
						//alert('Subtracting...');
						//newDivGrab2.removeChild(customDiv);
						newDivGrabContainer.children[1].children[0].classList.remove('customDivClass2');
						newDivGrabContainer.children[1].children[0].classList.add('customDivClass');
						console.log(newDivGrabContainer);
						newDivGrabContainer.children[0].style.opacity = 1;
						customDivBool = !customDivBool;
					}

				});

				//(function (newDivGrab, newDivGrabContainer, customDivBool){
				//console.log(customDivBool);
				addCustomCtrl = function () {
					//console.log(customDivBool);
					alert(this.reportType);
					alert(this.arr.length);
					alert(this.arr);
					//console.log(new Date().getMonth());
					//console.log(this);
					while (newDivGrab.childNodes.length) {
						newDivGrab.removeChild(newDivGrab.childNodes[0]);
					}
					console.log(this.arr);
					//creating local copy of this.arr. Objects are passed by reference, and splice operation will be destructive.
					var objArr = [];
					for (a in this.arr) {
						if (this.arr.hasOwnProperty(a)) {
							//console.log(a);
							objArr[a] = this.arr[a];
						}
					}

					for (a in this) {
						if (this.hasOwnProperty(a)) {
							//console.log(a);
							objArr[a] = this[a];
						}
					}

					//objArr.report = 'Monthly, Annual or PEBEC';
					//console.log(objArr);
					//console.log(objArr.length);
					console.log(objArr.reportType);
					for (var k = 0; k < this.arr.length; k++) {
						//console.log('Adding...');
						addNewControls(newDivGrab, objArr);
					}
					AutoSaveGlo();

					newDivGrabContainer.children[1].children[0].classList.remove('customDivClass2');
					newDivGrabContainer.children[1].children[0].classList.add('customDivClass');
					console.log(newDivGrabContainer);
					newDivGrabContainer.children[0].style.opacity = 1;
					console.log(customDivBool);
					customDivBool = !customDivBool;
					alert('customDiv in Month:' + customDivBool);

				};
				//})(newDivGrab, newDivGrabContainer, customDivBool);





			})(newDivGrab2, newDivGrabContainer, customDivBool);


			var customDivAR = document.createElement('input');
			customDivAR.setAttribute('type', 'button');
			customDivAR.setAttribute('value', 'Annual Report');
			customDivAR.setAttribute('class', 'customDivARInputClass');
			customDivAR.arr = ['DateFrom', 'DateTo'];
			customDivAR.reportType = 'Annual';
			customDivAR.addEventListener('click', addCustomCtrl, false);



			var customDivMR = document.createElement('input');
			customDivMR.setAttribute('type', 'button');
			customDivMR.setAttribute('value', 'Monthly Report');
			customDivMR.setAttribute('class', 'customDivARInputClass');
			customDivMR.arr = ['DateFrom', 'DateTo'];
			customDivMR.reportType = 'Monthly';
			customDivMR.addEventListener('click', addCustomCtrl);

			var customDivPR = document.createElement('input');
			customDivPR.setAttribute('type', 'button');
			customDivPR.setAttribute('value', 'PEBEC Report');
			customDivPR.setAttribute('class', 'customDivARInputClass');
			customDivPR.arr = ['DateFrom', 'DateTo'];
			customDivPR.reportType = 'PEBEC';
			customDivPR.addEventListener('click', addCustomCtrl);

			customDiv.appendChild(customDivAR);
			customDiv.appendChild(customDivMR);
			customDiv.appendChild(customDivPR);



			customDivContainer.appendChild(customDiv);

			//imgSet.addEventListener('dblclick',function(){


			var invertIndicator;
			(function (filtDiv, customGraph, imgSet, imgFilter) {
				invertIndicator = function (filtType, graType) {
					//console.log(graType);
					//console.log(customGraph);
					//console.log(filtType);
					//console.log(filtDiv);
					if (graType) {
						imgSet.style.filter = 'invert(100)';
					}
					if (filtType) {
						imgFilter.style.filter = 'invert(100)';
					}
					for (var a = 0; a < filtDiv.children.length; a++) {
						if (filtType == filtDiv.children[a].filtType) {
							filtDiv.children[a].style.filter = 'invert(100%)';
							console.log('Done', filtType);
						} else {
							filtDiv.children[a].style.filter = 'invert(0)';
						}
					}

					for (var a = 0; a < customGraph.children.length; a++) {
						if (graType == customGraph.children[a].graphType) {
							customGraph.children[a].style.filter = 'invert(100%)';
							console.log('Done', graType);
						} else {
							customGraph.children[a].style.filter = 'invert(0)';
						}
					}

				}
			})(filtDiv, customGraph, imgSet, imgFilter);




			var sendSavObj = {
				sendSavStr: "",
				iDSavStr: ""
			};
			var divStr;
			var AutoSaveGlo;
			var toImgPin;
			(function (imgPin, newDivGrab, newDivGrabContainer, imgPinBool, sendSavObj, dashData, typeGraph2) {
				AutoSaveGlo = function AutoSave() {
					alert('Changes made');
					imgPinBool = true;
					alert(imgPinBool);

					sendSavObj.savRep = true; //is this used at all?
					if (sendSavObj.iDSavStr) {
						imgPin.style.transitionDuration = "0.1s";
						imgPin.style.transform = "rotate(15deg)";
						newDivGrabContainer.style.borderStyle = 'solid';
						newDivGrabContainer.style.borderColor = 'Yellow';
					}

					if (dashData) {
						dashData = undefined;
					}
				}
				newDivGrabContainer.addEventListener('change', AutoSaveGlo);
				/* 
				toProdCast = function (typeGraph2) {
									console.log(typeGraph2);
									typeGraphTransient = typeGraph2;
								}
				*/
				var typeGraph2transient;
				toImgPin = function (typeGraph2) {
					console.log('Entered graph transient');
					typeGraph2transient = typeGraph2
				}

				imgPin.addEventListener('click', function () {
					console.log(filtTypeVar);

					alert('graphType: ' + typeGraph);
					if (imgPinBool && sendSavObj.iDSavStr && dashData) {








						var conBool = confirm('Are you sure you want to delete this dashboard (Cancel to Resave)?');
						if (conBool) {
							alert(sendSavObj.iDSavStr);
							alert(imgPinBool);
							var sendReqRequestObj = new XMLHttpRequest();
							sendReqRequestObj.open('POST', 'insight2', true);
							sendReqRequestObj.responseType = 'json';

							sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
							sendReqRequestObj.send("oId=" + sendSavObj.iDSavStr);

							sendReqRequestObj.onreadystatechange = function () {
								console.log('...is deleting...');
								if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
									console.log('...have arrived.');
									console.log('This has been deleted: ', sendReqRequestObj.response);
									var objDoc = sendReqRequestObj.response;
									console.log('This is length, ' + objDoc.length);
									delete sendSavObj.iDSavStr;

									//if(imgPinBool){
									imgPin.style.transitionDuration = "0.1s";
									imgPin.style.transform = "rotate(45deg)";
									imgPinBool = !imgPinBool;
									console.log(imgPinBool);
									//}
									newDivGrabContainer.style.borderColor = 'red';

								}
							}


							imgPin.style.transitionDuration = "0.1s";
							imgPin.style.transform = "rotate(45deg)";
							imgPinBool = !imgPinBool;
							console.log(imgPinBool);
						} else {
							alert('updating...no confirm');
							alert(sendSavObj.iDSavStr);

							alert(newDivGrabContainer.className);
							if (newDivGrabContainer.children[2].className == 'newDiv') { //expecting a newDivGrab;
								alert('It is false...!newDiv');
								divStr = false;
							} else { //expecting a dashChartCompliance	
								divStr = true;
								alert('It is true...!dashComp');
							}

							alert(imgPinBool);

							var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
							var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
							console.log(selectTypeClassGrab);
							console.log(selectTypeChildValsClassGrab);

							alert(selectTypeClassGrab.length);

							console.log('Truthy or falsy: ', sendSavObj.iDSavStr);
							var boolSavStr;
							sendSavObj.sendSavStr = "";
							for (var a = 0; a < selectTypeClassGrab.length; a++) {
								console.log(selectTypeChildValsClassGrab[a]);
								selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
								sendSavObj.sendSavStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";
							}

							sendSavObj.sendSavStr += "updateId=" + sendSavObj.iDSavStr + "&";
							sendSavObj.sendSavStr += "divStr=" + divStr + '&';
							sendSavObj.sendSavStr += "graType=" + typeGraph + "&";
							sendSavObj.sendSavStr += "filtType=" + filtTypeVar; //filterState info;


							console.log('This is sendSavObj.sendSavStr');
							console.log(sendSavObj.sendSavStr);

							var sendReqRequestObj = new XMLHttpRequest();
							sendReqRequestObj.open('POST', 'insight2', true);
							sendReqRequestObj.responseType = 'json';

							sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
							sendReqRequestObj.send(sendSavObj.sendSavStr);

							sendReqRequestObj.onreadystatechange = function () {
								console.log('...is updating...');
								if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
									console.log('...have arrived.');
									console.log('This has been updated: ', sendReqRequestObj.response);
									var objDoc = sendReqRequestObj.response;
									console.log('This is length, ' + objDoc.length);

									//if(imgPinBool){
									imgPin.style.transitionDuration = "0.1s";
									imgPin.style.transform = "rotate(-45deg)";
									imgPinBool = !imgPinBool;
									console.log(imgPinBool);
									//}

									newDivGrabContainer.style.borderStyle = 'solid';
									newDivGrabContainer.style.borderColor = 'green';
								}
							}
						}






					} else if (imgPinBool && sendSavObj.iDSavStr) {
						alert('updating...');
						alert(sendSavObj.iDSavStr);

						alert(newDivGrabContainer.className);
						if (newDivGrabContainer.children[3].className == 'newDiv') { //expecting a newDivGrab;
							alert('It is false...!newDiv');
							divStr = false;
							console.log(newDivGrabContainer);
						} else { //expecting a dashChartCompliance	
							divStr = true;
							alert('It is true...!dashComp');
						}

						alert(imgPinBool);

						var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
						var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
						console.log(selectTypeClassGrab);
						console.log(selectTypeChildValsClassGrab);

						alert(selectTypeClassGrab.length);

						console.log('Truthy or falsy: ', sendSavObj.iDSavStr);
						var boolSavStr;
						sendSavObj.sendSavStr = "";

						/*
						for (var a=0;a<selectTypeClassGrab.length;a++){
							console.log(selectTypeChildValsClassGrab[a]);
							selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
							sendSavObj.sendSavStr += selectTypeChildValsClassGrab[a].name +"="+ selectTypeChildValsClassGrab[a].value+"&";
						}
						*/

						for (var a = 0; a < selectTypeClassGrab.length; a++) {
							console.log(selectTypeChildValsClassGrab[a]);
							selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
							sendSavObj.sendSavStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";
							//sendSavObj.optStr[a] = selectTypeChildValsClassGrab[a].options;
							if (selectTypeClassGrab[a].parentNode.children[0].checked == true) {
								alert(selectTypeClassGrab[a].value + ' is checked!');
								//sendSavObj.sendSavStr += 'checkDisagg='+true+'&';
								checkDisaggArr = selectTypeClassGrab[a].value;
							}
						}

						if (dashStatObj.graType) {
							console.log('Entered here1');
							typeGraph = dashStatObj.graType;

						}

						if (typeGraph2) {
							console.log('Entered here2');
							typeGraph = typeGraph2
						}

						if (typeGraph2transient) {
							typeGraph = typeGraph2transient;
						}

						sendSavObj.sendSavStr += 'checkDisagga=' + checkDisaggArr + '&'
						sendSavObj.sendSavStr += "updateId=" + sendSavObj.iDSavStr + "&";
						sendSavObj.sendSavStr += "divStr=" + divStr + "&";
						sendSavObj.sendSavStr += "graType=" + typeGraph + "&";
						sendSavObj.sendSavStr += "filtType=" + filtTypeVar;

						console.log('This is sendSavObj.sendSavStr');
						console.log(sendSavObj.sendSavStr);

						var sendReqRequestObj = new XMLHttpRequest();
						sendReqRequestObj.open('POST', 'insight2', true);
						sendReqRequestObj.responseType = 'json';

						sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
						sendReqRequestObj.send(sendSavObj.sendSavStr);

						sendReqRequestObj.onreadystatechange = function () {
							console.log('...is updating...');
							if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
								console.log('...have arrived.');
								console.log('This has been updated: ', sendReqRequestObj.response);
								var objDoc = sendReqRequestObj.response;
								console.log('This is length, ' + objDoc.length);

								//if(imgPinBool){
								imgPin.style.transitionDuration = "0.1s";
								imgPin.style.transform = "rotate(-45deg)";
								imgPinBool = !imgPinBool;
								console.log(imgPinBool);
								//}

								newDivGrabContainer.style.borderStyle = 'red';
								newDivGrabContainer.style.borderColor = 'green';
							}
						}



					} else if (imgPinBool) {


						alert('Saving now...');
						console.log(newDivGrabContainer.children[3].className);
						if (newDivGrabContainer.children[3].className == 'newDiv') { //expecting a newDivGrab;
							alert('It is false...!newDiv');
							alert('clasname ' + newDivGrabContainer.children[2].className);
							divStr = false;
							console.log(newDivGrabContainer);
						} else { //expecting a dashChartCompliance	
							divStr = true;
							console.log('It is true...!dashComp');
							console.log(newDivGrabContainer.children[2].className);
							console.log(newDivGrabContainer.children[2]);
							console.log(newDivGrabContainer);
						}
						console.log(newDivGrabContainer);
						//dashChartCompliance
						var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
						var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
						console.log(selectTypeClassGrab);
						console.log(selectTypeChildValsClassGrab);

						alert(selectTypeClassGrab.length);

						console.log('Truthy or falsy: ', sendSavObj.iDSavStr);
						var boolSavStr;
						sendSavObj.sendSavStr = "";
						sendSavObj.optStr = [];
						var checkDisaggArr;
						for (var a = 0; a < selectTypeClassGrab.length; a++) {
							console.log(selectTypeChildValsClassGrab[a]);
							selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
							sendSavObj.sendSavStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";
							sendSavObj.optStr[a] = selectTypeChildValsClassGrab[a].options;
							if (selectTypeClassGrab[a].parentNode.children[0].checked == true) {
								alert(selectTypeClassGrab[a].value + ' is checked!');
								//sendSavObj.sendSavStr += 'checkDisagg='+true+'&';
								checkDisaggArr = selectTypeClassGrab[a].value;
							}
						}
						console.log(Array.isArray(checkDisaggArr));
						console.log(checkDisaggArr);
						sendSavObj.sendSavStr += 'checkDisagga=' + checkDisaggArr + '&';
						console.log(sendSavObj);
						console.log('-------------');
						sendSavObj.sendSavStr += 'divStr=' + divStr + '&';
						sendSavObj.sendSavStr += "graType=" + typeGraph;
						sendSavObj.sendSavStr += "divStr=" + divStr + "&";
						sendSavObj.sendSavStr += "graType=" + typeGraph + "&";
						sendSavObj.sendSavStr += "filtType=" + filtTypeVar;

						console.log('This is sendSavObj.sendSavStr');
						console.log(sendSavObj.sendSavStr);
						var sendReqRequestObj = new XMLHttpRequest();
						sendReqRequestObj.open('POST', 'insight2', true);
						sendReqRequestObj.responseType = 'json';

						sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
						sendReqRequestObj.send(sendSavObj.sendSavStr);

						sendReqRequestObj.onreadystatechange = function () {
							console.log('...is saving...');
							if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
								console.log('...have arrived.');
								console.log(sendReqRequestObj.response);
								sendSavObj.iDSavStr = sendReqRequestObj.response;
								objDoc = sendReqRequestObj.response;
								//console.log('This is length, '+ objDoc.length);

								//if(imgPinBool){
								imgPin.style.transitionDuration = "0.1s";
								imgPin.style.transform = "rotate(-45deg)";
								imgPinBool = !imgPinBool;
								console.log(imgPinBool);
								//}
								newDivGrabContainer.style.borderColor = 'green';
							}
						}

					} else { //end of imgPinBool
						var conBool = confirm('Are you sure you want to delete this dashboard (Cancel to Resave)?');
						if (conBool) {
							alert(sendSavObj.iDSavStr);
							alert(imgPinBool);
							var sendReqRequestObj = new XMLHttpRequest();
							sendReqRequestObj.open('POST', 'insight2', true);
							sendReqRequestObj.responseType = 'json';

							sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
							sendReqRequestObj.send("oId=" + sendSavObj.iDSavStr);

							sendReqRequestObj.onreadystatechange = function () {
								console.log('...is deleting...');
								if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
									console.log('...have arrived.');
									console.log('This has been deleted: ', sendReqRequestObj.response);
									var objDoc = sendReqRequestObj.response;
									console.log('This is length, ' + objDoc.length);
									delete sendSavObj.iDSavStr;

									//if(imgPinBool){
									imgPin.style.transitionDuration = "0.1s";
									imgPin.style.transform = "rotate(45deg)";
									imgPinBool = !imgPinBool;
									console.log(imgPinBool);
									//}
									newDivGrabContainer.style.borderColor = 'red';

								}
							}

							imgPin.style.transitionDuration = "0.1s";
							imgPin.style.transform = "rotate(45deg)";
							imgPinBool = !imgPinBool;
							console.log(imgPinBool);
						} else {
							alert('Saving now2...');
							var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
							var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
							console.log(selectTypeClassGrab);
							console.log(selectTypeChildValsClassGrab);

							alert(selectTypeClassGrab.length);

							console.log('Truthy or falsy: ', sendSavObj.iDSavStr);
							var boolSavStr;
							sendSavObj.sendSavStr = "";
							for (var a = 0; a < selectTypeClassGrab.length; a++) {
								console.log(selectTypeChildValsClassGrab[a]);
								selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
								sendSavObj.sendSavStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";
							}

							//Are these really necessary?
							sendSavObj.sendSavStr += 'divStr=' + divStr + '&';
							sendSavObj.sendSavStr += "graType=" + typeGraph + "&";
							sendSavObj.sendSavStr += "filtType=" + filtTypeVar;

							console.log('This is sendSavObj.sendSavStr');
							console.log(sendSavObj.sendSavStr);
							var sendReqRequestObj = new XMLHttpRequest();
							sendReqRequestObj.open('POST', 'insight2', true);
							sendReqRequestObj.responseType = 'json';

							sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
							sendReqRequestObj.send(sendSavObj.sendSavStr);

							sendReqRequestObj.onreadystatechange = function () {
								console.log('...is saving...');
								if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
									console.log('...have arrived.');
									console.log(sendReqRequestObj.response);
									sendSavObj.iDSavStr = sendReqRequestObj.response;
									objDoc = sendReqRequestObj.response;
									//console.log('This is length, '+ objDoc.length);

									//if(imgPinBool){
									imgPin.style.transitionDuration = "0.1s";
									imgPin.style.transform = "rotate(-45deg)";
									imgPinBool = false;
									console.log(imgPinBool);
									//}
									newDivGrabContainer.style.borderColor = 'green';
								}
							}
						}

					}//if conBool
				});
			})(imgPin, newDivGrab, newDivGrabContainer, imgPinBool, sendSavObj, dashData, typeGraph2);


			var searchComp = document.createElement('input');
			searchComp.setAttribute('class', 'searchCompClass');
			searchComp.setAttribute('name', 'searchCompName');
			searchComp.setAttribute('size', 16);
			//searchComp.setAttribute('type', 'search');
			searchComp.setAttribute('placeholder', 'Search Company...');

			(function (imgSearch) {
				searchComp.addEventListener('blur', function () {
					console.log(this.parentNode);
					//alert(searchComp.size);
					//setTimeout(function(){
					this.parentNode.appendChild(imgSearch);
					this.parentNode.removeChild(this);
					//}, 300);
				});
			})(imgSearch);



			var remType = document.createElement('input');
			remType.setAttribute('type', 'button');
			remType.setAttribute('value', 'Remove');
			//(function (newDivGrab) {
			remType.addEventListener('click', function () {
				alert('Removing');
				console.log(newDivGrab);
				newDivGrab.removeChild(this.parentNode);
				DisableCheckbox(newDivGrab);
			});
			//})(newDivGrab);
			var addType = document.createElement('input');
			addType.setAttribute('class', 'dashFltRt');
			addType.setAttribute('type', 'button');
			addType.setAttribute('value', 'Add');

			var arrayType = ['Company', 'DosageForms', 'State', 'InspectionType', 'Generic', 'SubClass', 'Inspectors', 'DateFrom', 'DateTo', 'Compliance', 'NRN'];

			(function (newDivGrab, arrayType) {
				addType.addEventListener('click', function () {
					var arrayType = ['Company', 'DosageForms', 'State', 'InspectionType', 'Generic', 'SubClass', 'Inspectors', 'DateFrom', 'DateTo', 'Compliance', 'NRN'];
					if (newDivGrab.getElementsByClassName('selectTypeClass').length < arrayType.length) {
						addNewControls(newDivGrab, arrayType);
					}
					DisableCheckbox(newDivGrab);
					AutoSaveGlo();
				});
			})(newDivGrab, arrayType);
			var selectTypeChildVals = document.createElement('select');

			var disableCheckGrey;
			var newDivDisableGrey;
			function DisableCheckbox(newDivGrab) {
				console.log(newDivGrab);
				disableCheckGrey = newDivGrab.getElementsByClassName('containControls');
				console.log(disableCheckGrey);


				if (disableCheckGrey.length > 1) {
					console.log('More than one...');
					console.log(disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0]);
					disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = false;
					/*
					for (var a = 0;a <disableCheckGrey.length;a++){
						console.log(disableCheckGrey[a]);
					}
					*/
				} else if (disableCheckGrey.length == 1) {
					//Grab the one and only control row, go for the first element
					console.log('Only one...');
					//disableCheckGrey[0].getElementsByClassName('checkDisagg')[0].disabled = true;
					disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = true;
				} else {
					console.log('Something else');
					console.log(disableCheckGrey.length);
				}

			}

			var controlCont = document.createElement('div');
			controlCont.setAttribute('class', 'containControls');
			selectTypeChildVals.setAttribute('name', 'selectTypeChildValsName');
			selectTypeChildVals.setAttribute('id', 'selectTypeChildValsId');

			//selectTypeChildVals.setAttribute('class', 'dashFltRt');
			selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');

			var selectType = document.createElement('select');
			selectType.setAttribute('name', 'selectTypeName');
			selectType.setAttribute('class', 'selectTypeClass');
			selectType.setAttribute('id', 'selectTypeId');

			var checkDisagg = document.createElement('input');
			checkDisagg.setAttribute('class', 'checkDisaggClass');
			checkDisagg.setAttribute('type', 'checkbox');
			checkDisagg.setAttribute('name', 'checkDisaggName');

			//var checkDisaggBool = true;
			checkDisagg.addEventListener('click', function () {
				//alert(this.parentNode.getElementsByClassName ('selectTypeClass')[0].value);
				if (this.checked == true) {
					alert('True');
					var checkDisaggClassGrab = newDivGrab.getElementsByClassName('checkDisaggClass');
					for (var d = 0; d < checkDisaggClassGrab.length; d++) {
						checkDisaggClassGrab[d].checked = false;
					}
					this.checked = true;
				}
			});

			var sendReqDiv = document.createElement('div');
			sendReqDiv.setAttribute('class', 'sendReqDivClass');
			sendReqDiv.setAttribute('id', 'sendReqDivId');
			var sendReq = document.createElement('input');
			sendReq.setAttribute('type', 'button');
			sendReq.setAttribute('value', 'Send');
			sendReq.setAttribute('class', 'sendReqClass');

			var sendingReq;
			var ChangeChart;

			(function (newDivGrab2, newDivGrab, newDivGrabContainer, sendReq, customDiv, customGraph, dashData, dashStatObj, imgProd, imgProdLine, customDivBool, chart2, typeGraph2, data1, imgFilter) {
				var newDivGrabWap; //temporary hold for swapped div;
				var dashChartCompliance; //the new;
				var newDivGrabParentNode;

				var data;
				var data2;
				sendingReq = function (graphType) {
					console.log('Sending... now');
					console.log(chart2);
					if (dashStatObj) {
						console.log(dashStatObj.graType);
					}
					// if (newDivGrabContainer.child)
					console.log(this.graphType);


					//alert ('Sending in the first Original!');



					var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
					var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
					console.log(selectTypeClassGrab);
					//alert(selectTypeChildValsClassGrab[0].value);

					//alert (selectTypeClassGrab.length);
					var sendStr = '';
					for (var a = 0; a < selectTypeClassGrab.length; a++) {
						if (selectTypeChildValsClassGrab[a].parentNode.children[0].checked == false) {//excluding checked item
							//alert('Are you counting '+a);
							console.log(selectTypeChildValsClassGrab[a]);
							selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
							sendStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";
						}
					}

					//alert('This is sendStr');
					console.log('Original function sendStr: ' + sendStr);
					var sendReqRequestObj = new XMLHttpRequest();
					sendReqRequestObj.open('POST', 'insight', true);
					sendReqRequestObj.responseType = 'json';

					sendReqRequestObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
					sendReqRequestObj.send(sendStr);


					sendReqRequestObj.onreadystatechange = function () {
						console.log('...is changing...');
						if (sendReqRequestObj.readyState == 4 && sendReqRequestObj.status == 200) {
							newDivGrabContainer.children[1].removeChild(customDiv);
							console.log(customGraph);
							newDivGrabContainer.children[1].appendChild(customGraph); //custom graph option
							console.log(newDivGrabContainer);
							console.log('insight have arrived.');
							console.log(sendReqRequestObj.response);
							var objDoc = sendReqRequestObj.response;
							objDoc2 = objDoc;
							objDocIcon = objDoc;
							newDivGrab2.tableInfo = objDoc2;
							console.log('This is length, ' + objDoc.length);
							//newDivGrab.objDoc =objDoc;
							newDivGrabParentNode = newDivGrab.parentNode; //newDivGrab2
							//newDivGrabParentNode.objDoc;
							dashChartCompliance = document.createElement('div');
							dashChartComplianceIcon = dashChartCompliance; //for use in ChangeChart

							var dashChartComplianceSwitchDiv = document.createElement('div');

							var dashChartComplianceSwitchDiv2 = document.createElement('div');
							dashChartComplianceSwitchDiv2.setAttribute('class', 'dashChartComplianceSwitchDiv2Class');
							dashChartComplianceSwitchDiv.style.backgroundColor = 'cyan';

							var dashChartComplianceSwitch = document.createElement('input');

							dashChartComplianceSwitch.setAttribute('type', 'button');
							dashChartComplianceSwitch.setAttribute('value', 'Switch');
							dashChartComplianceSwitch.addEventListener('click', function () {
								alert('I have been clicked!');
							});

							newDivGrabParentNode = newDivGrab.parentNode;
							newDivGrabWap = newDivGrabParentNode.removeChild(newDivGrab);
							console.log(newDivGrabWap);


							//newDivGrab.getElementsByClassName(checkDisaggClass);

							//console.log(objDocCompliance);
							google.charts.load('current', { packages: ['bar', 'scatter', 'controls', 'charteditor'] });


							google.charts.setOnLoadCallback(function () {

								var checkDisaggClassGrab = newDivGrab.getElementsByClassName('checkDisaggClass');

								console.log(checkDisaggClassGrab);
								var checkedSelectTypeChildVals = 0; //for storing options of checked selectVals in use for disaggregation
								for (var c = 0; c < checkDisaggClassGrab.length; c++) { //checking for any checked disagg checkbox
									if (checkDisaggClassGrab[c].checked == true) {
										alert(checkDisaggClassGrab[c].parentNode.getElementsByClassName('selectTypeChildValsClass')[0].value);
										checkedSelectTypeChildVals = checkDisaggClassGrab[c].parentNode.getElementsByClassName('selectTypeChildValsClass')[0];
										checkedSelectTypeChildVals.selTypeDisagg = checkDisaggClassGrab[c].parentNode.getElementsByClassName('selectTypeClass')[0].value;
									}
								}

								var objDisAgg = {};
								if (checkedSelectTypeChildVals) { // if disagg checkbox are checked


									for (var e = 0; e < checkedSelectTypeChildVals.options.length; e++) {
										console.log(checkedSelectTypeChildVals.options[e].value);
										objDisAgg[checkedSelectTypeChildVals.options[e].value] = 0;
									}
									objDisAgg.disAggVal = checkedSelectTypeChildVals.selTypeDisagg;
									console.log(objDisAgg);
									console.log(checkedSelectTypeChildVals.selTypeDisagg);

									switch (objDisAgg.disAggVal) {
										case 'DosageForms':
											objDisAgg.disAggVal = 'DosFormsType';
											break;
										case 'InspectionType':
											objDisAgg.disAggVal = 'InspTypeName';
											break;
										case 'Inspectors':
											objDisAgg.disAggVal = 'InspectorName';
											break;
										default:
											alert('No category');
									}
									console.log(objDisAgg);
								} else {
									objDisAgg['Critical'] = 0;
									objDisAgg['Major'] = 0;
									objDisAgg['Other'] = 0;
									objDisAgg['resolve'] = 0;
									objDisAgg.disAggVal = 'FindObservation'; //especially for saved dashboards
								} //


								console.log(objDisAgg);
								console.log(newDivGrab);


								//var objDocCompliance = {Critical:0, Major:0, Other:0, resolve:0 };

								//var objDisAgg = (objDisAgg)?objDisAgg:objDocCompliance;

								console.log(objDisAgg);
								console.log(objDisAgg.length);

								//console.log(objDocCompliance);
								console.log('---???---???---');
								for (var a = 0; a < objDoc.length; a++) {
									//console.log('Entered..');
									for (var b in objDoc[a]) {
										if (objDoc[a].hasOwnProperty(b)) {
											//console.log('Entered pass...');
											if (b == objDisAgg.disAggVal) {
												console.log(b + ' Equals');
												//console.log(objDisAgg.disAggVal);
												//console.log(objDoc[a][b]);
												//console.log(b);
												++objDisAgg[objDoc[a][objDisAgg.disAggVal]];
											}
										}
									}
								}

								var arrChart = [['Comp', 'Measure', { role: 'style' }]]
								//var arrChart1 =[];
								for (var d in objDisAgg) {
									if (objDisAgg.hasOwnProperty(d)) {
										//console.log('Entered pass...');
										arrChart.push([d, objDisAgg[d], 'color: yellow']);
										//arrChart.push(arrChart1);
									}
								}
								console.log(objDisAgg);
								console.log(arrChart);
								//console.log(arrChart.pop());
								delete (arrChart[arrChart.length]);
								console.log(arrChart);

								data = new google.visualization.arrayToDataTable(arrChart);
								//data.addColumn('string', 'Compliance');
								//data.addColumn('number', 'Number');	
								var options = {
									'title': 'GMP Profile',
									'width': 317,
									'height': 166
								};


								var chart = new google.visualization.ColumnChart(dashChartComplianceIcon); //creating new chart

								if (dashStatObj) {
									console.log('Entered1');
									if (dashStatObj.graType) {


										switch (dashStatObj.graType) {
											case 'ColumnChart':
												console.log('Columning Serious');
												var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
												break;
											case 'PieChart':
												console.log('pie...');
												alert('Pieing nowa...');
												//alert('Pieing Seriousa');
												var chart = new google.visualization.PieChart(dashChartComplianceIcon);
												break;
											case 'LineChart':
												console.log('Line...');
												var chart = new google.visualization.LineChart(dashChartComplianceIcon);
												break;
											case 'Scatter':
												var chart = new google.charts.Scatter(dashChartComplianceIcon);
												break;
											default:
												alert('Defaulting...now');
												console.log(dashStatObj);
												var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
										}

									} else {
										var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
									}

								}









								//var chart = new google.visualization.ColumnChart(dashChartCompliance);

								dashChartCompliance.objDoc = objDoc;
								dashChartCompliance.addEventListener('click', function () {
									//alert('clicked, output obj');
									//console.log(this.objDoc);
								});
								console.log(chart);
								console.log(dashChartCompliance);

								dashChartCompliance.setAttribute('class', 'dashChartComplianceClass');
								console.log(dashChartCompliance.objDoc);
								newDivGrabParentNode.appendChild(dashChartCompliance);
								console.log(newDivGrabParentNode);
								console.log(newDivGrabParentNode.children[0]);
								console.log(newDivGrabParentNode.children[0].className);
								if (newDivGrabParentNode.children[3] == dashChartCompliance) {
									console.log('Enabling...');
									console.log(imgFilter);
									imgFilter.addEventListener('click', filterOption);
									imgFilter.style.opacity = 1;
									imgFilter.setAttribute('width', '20');

								}

								console.log('Added Chart...');
								sendReq.setAttribute('value', 'Back');

								//	console.log(newDivGrab);
								console.log(newDivGrabParentNode);
								//dashChartCompliance.appendChild(dashChartComplianceSwitch);
								console.log(chart2);
								//console.log(newDivGrabParentNode.changeChart);
								console.log(chart);

								console.log('Regular charting...');
								chart.draw(data, options);

								if (dashData && dashStatObj.dashStat) {
									console.log('Has dashData...');
									console.log(dashStatObj.dashStat);
									if (dashStatObj.dashStat == 'true') {
										//don't autosave on loading...
										//alert(dashData);
										newDivGrabContainer.style.borderColor = 'green';
									}
									//dashData = undefined;
									//AutoSaveGlo();



									//alert('Changes made');
									imgPinBool = false;
									//alert (imgPinBool);

									sendSavObj.savRep = true; //is this used at all?
									//if (sendSavObj.iDSavStr){
									imgPin.style.transitionDuration = "0.1s";
									//imgPin.style.transform = "rotate(15deg)";
									newDivGrabContainer.style.borderStyle = 'solid';
									newDivGrabContainer.style.borderColor = 'Green';
									//}

									if (dashData) {
										dashData = undefined;
									}
									//AutoSaveGlo();
								} else {
									console.log('No data');
									alert('No Data');
									AutoSaveGlo();//enforcing resave;
								}
							});


							if (dashStatObj) {
								console.log('Entered11');
								if (dashStatObj.filtType) {
									//alert('This is filtType: '+dashStatObj.filtType);
									console.log(dashStatObj);
									console.log(filtTypeVar);
									//filtTypeVar.click();
									alert('Calling prodcast...!');
									if (dashStatObj.filtType != "undefined") {
										prodCast(dashStatObj.filtType, typeGraph2);
									}
									imgPin.style.transitionDuration = "0.1s";
									imgPin.style.transform = "rotate(-45deg)";
									imgPinBool = true;
									console.log(imgPinBool);
									console.log(newDivGrabContainer);
									newDivGrabContainer.style.borderColor = 'green';
									console.log(newDivGrabContainer.style.borderColor);
									console.log(imgSet);
									console.log(imgFilter);
									invertIndicator(dashStatObj.filtType, dashStatObj.graType, imgSet, imgFilter);

								}

							}















							function switchBack() {
								alert('Going back!');
								console.log(chart2);
								newDivGrabParentNode.removeChild(dashChartCompliance);
								newDivGrabContainer.children[1].removeChild(customGraph);
								newDivGrabContainer.children[1].appendChild(customDiv);
								newDivGrabContainer.children[1].children[0].classList.remove('customDivClass2');
								newDivGrabContainer.children[1].children[0].classList.add('customDivClass');
								alert('Removed');
								newDivGrabParentNode.appendChild(newDivGrabWap);
								AutoSaveGlo(); //enforcing resave
								sendReq.removeEventListener('click', switchBack);
								sendReq.addEventListener('click', sendingReq);

								sendReq.setAttribute('value', 'Send');
								imgProd.removeEventListener('click', prodCast);

								if (newDivGrabParentNode.children[3] !== dashChartCompliance) {
									console.log('Disabling...');
									imgFilter.removeEventListener('click', filterOption);
									imgFilter.style.opacity = 0.1;
									imgFilter.setAttribute('width', '20');
								}
							}



							sendReq.addEventListener('click', switchBack);







						} //end of 200 success.
					}

					sendReq.removeEventListener('click', sendingReq);


				} //sendingReq
				var data1Transient;
				toChangeChart = function (data1) {
					console.log(data1);
					data1Transient = data1;
				}

				ChangeChart = function () {
					alert('Type of Chart: ' + this.graphType);
					console.log(newDivGrabContainer);
					var iconT = this.graphType;
					console.log(data2);
					console.log(data1Transient);
					(function (iconT) {
						google.charts.setOnLoadCallback(function () {


							var objDocCompliance = { Critical: 0, Major: 0, Other: 0, resolve: 0 };


							console.log(objDocCompliance);
							console.log('---???---???---');
							for (var a = 0; a < objDocIcon.length; a++) {
								//console.log('Entered..');
								for (var b in objDocIcon[a]) {
									if (objDocIcon[a].hasOwnProperty(b)) {
										//console.log('Entered pass...');
										if (b == "FindObservation") {
											//console.log(b);
											++objDocCompliance[objDocIcon[a].FindObservation];
										}
									}
								}
							}

							console.log(objDocCompliance);


							/*
							var data = new google.visualization.DataTable();
							data.addColumn('string', 'Compliance');
							data.addColumn('number', 'Number');
							
							data.addRows([
								['Critical', objDocCompliance['Critical']],
								['Major', objDocCompliance['Major']]
								]);
							*/
							var options = {
								'title': 'GMP Profile',
								'width': 317,
								'height': 166,
								isStacked: true,
							};

							alert(iconT);

							switch (iconT) {
								//alert('Inside Switch');
								case 'ColumnChart':
									//alert('Columning');
									chart2 = new google.visualization.ColumnChart(dashChartComplianceIcon);
									console.log(chart2);
									break;
								case 'PieChart':
									//alert('Pieing');
									chart2 = new google.visualization.PieChart(dashChartComplianceIcon);
									console.log(chart2);
									break;
								case 'LineChart':
									chart2 = new google.visualization.LineChart(dashChartComplianceIcon);
									break;
								case 'Scatter':
									chart2 = new google.charts.Scatter(dashChartComplianceIcon);
									break;
								default:
									alert('Defaulting..');
									chart2 = new google.visualization.ColumnChart(dashChartComplianceIcon);
							}

							//var chart2 = new google.visualization[this.graphType](dashChartComplianceIcon);

							newDivGrabContainer.appendChild(dashChartComplianceIcon);

							console.log('Added Chart...');
							sendReq.setAttribute('value', 'Back');

							//	console.log(newDivGrab);
							//console.log(newDivGrabParentNode);
							chart2.draw(data1Transient, options);
							typeGraph = iconT;
							alert('Type of Graph:' + typeGraph);
							AutoSaveGlo();//enforcing resave;
							console.log(chart2);
							//newDivGrabContainer.changeChart = chart2;
							typeGraph2 = typeGraph;
							console.log(dashStatObj.filtType);
							invertIndicator(dashStatObj.filtType, typeGraph2);
							toProdCast(typeGraph2); //making variable available to prodCast
							toImgPin(typeGraph2);
						});
					})(iconT);

					newDivGrabContainer.children[1].children[0].classList.remove('customDivClass2');
					newDivGrabContainer.children[1].children[0].classList.add('customDivClass');
					console.log(newDivGrabContainer);
					newDivGrabContainer.children[0].style.opacity = 1;
					customDivBool = !customDivBool;
					console.log('It shoud remove now');
					console.log(customDivBool);


				}//changeChart

				if (sendReq.value == 'Send') {
					sendReq.addEventListener('click', sendingReq);
				} else {

				}

			})(newDivGrab2, newDivGrab, newDivGrabContainer, sendReq, customDiv, customGraph, dashData, dashStatObj, imgProd, imgProdLine, customDivBool, chart2, typeGraph2, data1, imgFilter);


			graphIcon.addEventListener('click', ChangeChart);
			pieIcon.addEventListener('click', ChangeChart);
			lineIcon.addEventListener('click', ChangeChart);
			scatIcon.addEventListener('click', ChangeChart);
			sendReqDiv.appendChild(sendReq);

			imgRemov.alt = imgRemov.src;
			imgContainer.appendChild(imgRemov);
			imgContainer.appendChild(imgPin);
			imgContainer.appendChild(imgFilter);
			imgContainer.appendChild(imgSet)
			imgContainer.appendChild(imgSearch);
			//imgContainer.appendChild(searchComp);
			imgContainer.appendChild(imgReport);
			imgContainer.appendChild(checkCombi);
			imgContainer.appendChild(addType);

			controlCont.appendChild(checkDisagg);
			controlCont.appendChild(remType);
			controlCont.appendChild(selectType);
			controlCont.appendChild(selectTypeChildVals);



			//newDivGrab.appendChild(imgContainer);
			newDivGrab.appendChild(controlCont);

			//newDivIdGrab.appendChild(newDivGrab);
			//newDivIdGrab.appendChild(sendReqDiv);

			newDivGrab2.addEventListener('change', function () {
				alert('I have been changed!');
			});
			newDivGrab2.appendChild(imgContainer);
			newDivGrabContainer.appendChild(newDivGrab);
			newDivGrab2.appendChild(newDivGrabContainer);
			newDivGrab2.appendChild(sendReqDiv);

			//newDivIdGrab.appendChild(sendReq);
			dashboardaGrab.appendChild(newDivGrab2);
			//dashboardaGrab.appendChild(sendReqDiv);

			var selectTypeGrab = document.getElementsByClassName('selectTypeClass'); //Any need for this?
			var selectTypeChildValsIdGrab = document.getElementById('selectTypeChildValsId');


			//selectTypeChildValsIdGrab = document.getElementById('selectTypeChildValsId');

			for (var a = 0; a < arrayType.length; a++) {
				selectType.options[a] = new Option(arrayType[a]);
			}


			(function (selectTypeChildVals, newDivGrab) {
				let companySelectTypeChildVals;
				searchComp.addEventListener('keyup', function () {
					for (var a = 0; a < newDivGrab.children.length; a++) {
						if (newDivGrab.children[a].children[2].value == 'Company') {
							companySelectTypeChildVals = newDivGrab.children[a].children[3]; //now referencing the selectTypeChildVals of Company;
							//companySelectTypeChildVals = newDivGrab.getElementsByClassName('selectTypeChildValsClass')[0];//now referencing the selectTypeChildVals of Company;
							console.log(companySelectTypeChildVals);
						}
					}
					//alert('Key released....');
					CompanyOptionsCallDash(this, companySelectTypeChildVals);
				});
			})(selectTypeChildVals, newDivGrab);

			//selectTypeGrab[0].addEventListener('change', AddSelectFilter);
			selectType.addEventListener('change', AddSelectFilter);

			function AddSelectFilter() {
				console.log('Too much o...!');
				var arrResponse = [];
				var selFilter = document.createElement('select');
				selFilter.setAttribute('class', 'selFilterClass');

				switch (this.value) {
					case 'Company':
						console.log('This is Company Original');
						arrResponseBack(this);
						break;
					case 'DosageForms':
						console.log('This is DosageForms');
						arrResponseBack(this);
						break;
					case 'InspectionType':
						console.log('This is inspection type');
						arrResponseBack(this);
						break;
					case 'State':
						//arrResponseBack(this);
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}
						for (var a = 0; a < statesArr.length; a++) {
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(statesArr[a]);
						}
						break;
					case 'DateTo':
						this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
						selectTypeChildVals = document.createElement('input'); //reassigning
						selectTypeChildVals.setAttribute('type', 'date');
						selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						//selectTypeChildVals.setAttribute('name','DateTo');
						this.parentNode.appendChild(selectTypeChildVals);
						break;
					case 'DateFrom':
						console.log(this.parentNode.getElementsByClassName('selectTypeChildValsClass dashFltRt')[0]);
						this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
						selectTypeChildVals = document.createElement('input'); //reassigning
						selectTypeChildVals.setAttribute('type', 'date');
						selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						//selectTypeChildVals.setAttribute('name','DateFrom');
						this.parentNode.appendChild(selectTypeChildVals);

						break;
					case 'Inspectors':
						arrResponseBack(this);
						break;
					case 'Compliance':
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}
						for (var a = 0; a < complianArr.length; a++) {
							console.log('Populating Comp...');
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(complianArr[a]);
						}
						break;
					case 'NRN':
						console.log('Inside NRN...');
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							alert('NRN is input...');
							console.log(this);
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}
						for (var a = 0; a < nrnArr.length; a++) {
							console.log('Populating NRN...');
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(nrnArr[a]);
						}
						break;
					default:
						alert(`This if for na ${this.value}`);
				}

				function arrResponseBack(this2) {
					console.log('Calling now...');
					var para = "nameOfSel=" + this2.value;
					var xmlBack = new XMLHttpRequest();
					xmlBack.open('GET', 'getBack?' + para, true);
					//xmlBack.setRequestHeader ('Content-Type','application/x-www-form-urlencoded');
					xmlBack.responseType = 'json';
					xmlBack.send();

					xmlBack.onreadystatechange = function () {
						if (xmlBack.readyState == 4 && xmlBack.status == 200) {
							alert('Successful!');
							var objDoc = xmlBack.response;
							console.log(objDoc);

							//checking if selectTypeChildVals is nodeName = 'INPUT'. All objDoc returned by xmlHttp fits into select

							/*
							if (this.parentNode.children[2].nodeName == 'INPUT'){
								var selectTypeChildVals = document.createElement('select');
								selectTypeChildVals.setAttribute('class','selectTypeChildValsClass dashFltRt');
								this.parentNode.removeChild(this.parentNode.children[2]);
								this.parentNode.appendChild(selectTypeChildVals);
							}
							*/
							console.log('Did it come here?');
							console.log(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
							if (this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].nodeName == 'INPUT') {
								alert('A case of input!');
								console.log(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
								this2.parentNode.removeChild(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
								var selectTypeChildVals = document.createElement('select');
								//this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0] = document.createElement('select'); //reassigning
								//selectTypeChildVals.setAttribute('type','date');
								selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
								//selectTypeChildVals.setAttribute('name','DateFrom');
								this2.parentNode.appendChild(selectTypeChildVals);
							}



							for (var a = 0; a < objDoc.length; a++) {
								this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].options[a] = new Option(objDoc[a]);
							}
						}
					}
				}
			}

			if (dashData) {
				imgPin.style.transitionDuration = "0.1s";
				imgPin.style.transform = "rotate(-45deg)";
				imgPinBool = true;
				console.log(imgPinBool);
				newDivGrabContainer.style.borderColor = 'green';
				console.log(dashData);
				console.log(dashData.SavData);
				var dashDataObj = JSON.parse(dashData.SavData);
				dashStatObj = JSON.parse(dashData.DashStatus);
				//alert(dashStatObj.dashStat);
				//console.log()
				newDivGrab.removeChild(newDivGrab.children[0]); //removing original  'Company name'
				var counterObj = 0;
				for (g in dashDataObj) {
					if (dashDataObj.hasOwnProperty(g)) {
						var ca = dashDataObj['checkDisagga'];
						//console.log(counterObj);
						//console.log('Creating controls');
						//console.log(dashDataObj['Company'], dashDataObj['DosageForms']);
						//alert (a);
						//console.log(g);
						//alert('This is first dashDataObj[a]:'+ dashDataObj[g]);
						//alert(dashData.SavData[a]);
						var controlCont = document.createElement('div');
						controlCont.setAttribute('class', 'containControls');

						var checkDisagg = document.createElement('input');
						checkDisagg.setAttribute('class', 'checkDisaggClass');
						checkDisagg.setAttribute('type', 'checkbox');
						checkDisagg.setAttribute('name', 'checkDisaggName');

						//var checkDisaggBool = true;
						checkDisagg.addEventListener('click', function () {
							//alert(this.parentNode.getElementsByClassName ('selectTypeClass')[0].value);
							if (this.checked == true) {
								alert('True');
								var checkDisaggClassGrab = newDivGrab.getElementsByClassName('checkDisaggClass');
								for (var d = 0; d < checkDisaggClassGrab.length; d++) {
									checkDisaggClassGrab[d].checked = false;
								}
								this.checked = true;
							}
						});


						var remType = document.createElement('input');
						remType.setAttribute('type', 'button');
						remType.setAttribute('value', 'Remove');
						remType.addEventListener('click', function () {
							//alert('Removing...');
							newDivGrab.removeChild(this.parentNode);
							DisableCheckbox(newDivGrab);
							//console.log(this.parentNode);
						});

						var disableCheckGrey;
						function DisableCheckbox(newDivGrab) {
							console.log(newDivGrab);
							disableCheckGrey = newDivGrab.getElementsByClassName('containControls');
							console.log(disableCheckGrey);

							if (disableCheckGrey.length > 1) {
								console.log('More than one...');
								console.log(disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0]);
								disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = false;
							} else if (disableCheckGrey.length == 1) {
								//Grab the one and only control row, go for the first element
								console.log('Only one...');
								//disableCheckGrey[0].getElementsByClassName('checkDisagg')[0].disabled = true;
								disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = true;
							} else {
								console.log('Something else');
								console.log(disableCheckGrey.length);
							}

						}

						console.log(dashDataObj[g]);
						if (g == "DateFrom" || g == "DateTo") {
							//alert('Date stuff twice!')
							var selectTypeChildVals = document.createElement('input'); //reassigning
							selectTypeChildVals.setAttribute('type', 'date');
							selectTypeChildVals.setAttribute('name', 'selectTypeChildValsName');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						} else {

							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('name', 'selectTypeChildValsName');
							//selectTypeChildVals.setAttribute('id', 'selectTypeChildValsId');


							//selectTypeChildVals.setAttribute('value', dashDataObj[a]);

							//selectTypeChildVals.setAttribute('class', 'dashFltRt');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						}

						var selectType = document.createElement('select');
						selectType.setAttribute('name', 'selectTypeName');
						selectType.setAttribute('class', 'selectTypeClass');

						for (var b = 0; b < arrayType.length; b++) {
							selectType.options[b] = new Option(arrayType[b]);
						}
						//console.log(g);

						selectType.value = g;
						var checkedBool = false;
						if (g == 'checkDisagga') {
							checkedBool = true;
							//alert ('Ode!');
							console.log(g);
							console.log(checkedBool);
							var checkDisaggaArr = dashDataObj[g];
							//console.log(dashDataObj[g]);
							//console.log(dashDataObj[g].length);
							//console.log(JSON.parse(dashDataObj[g]));
							selectType.checkedBool = checkedBool;
							//console.log(selectType);
							//console.log(selectType.value);
							//checkDisagg.setAttribute('checked', true);

							checkDisagg.checkedBool = checkedBool;
							//console.log(checkDisagg);
						}
						//console.log(checkDisaggaArr);

						(function (selectTypeChildVals, selectType, controlCont, remType, g, sendReq, checkDisagg, checkedBool) {
							if (g == 'checkDisagga') {
								//Do nothing;
								alert('g!!!!!!!!!!!!!!!!!!!!!');
							} else {
								arrResponseBack(selectType.value);
							}
							function arrResponseBack(thisName) {
								//console.log('Calling now...');
								//console.log(checkDisaggaArr);
								var para = "nameOfSel=" + thisName;
								//console.log(para);
								var xmlBack = new XMLHttpRequest();
								xmlBack.open('GET', 'getBack?' + para, true);
								//xmlBack.setRequestHeader ('Content-Type','application/x-www-form-urlencoded');
								xmlBack.responseType = 'json';
								xmlBack.send();
								//(function (selectTypeChildVals,selectType, g, counterObj) { 
								xmlBack.onreadystatechange = function () {
									if (xmlBack.readyState == 4 && xmlBack.status == 200) {
										//alert ('Successful!');
										console.log(checkDisaggaArr);
										if (checkDisaggaArr) {
											var checkDisaggaArr2 = checkDisaggaArr;
											//console.log(checkDisaggaArr2);
											checkDisagg.setAttribute('checked', true);
										}
										//console.log(checkDisaggaArr2);
										counterObj++;
										var objDoc = xmlBack.response;
										//console.log(objDoc);

										console.log(selectTypeChildVals.nodeName);
										if (selectTypeChildVals.nodeName == "INPUT") {
											selectTypeChildVals.value = "";//objDoc[0];
											//alert('adding');
										} else {

											for (var d = 0; d < objDoc.length; d++) {
												selectTypeChildVals.options[d] = new Option(objDoc[d]);
											}
										}



										selectTypeChildVals.value = dashDataObj[g];
										controlCont.appendChild(checkDisagg);
										//console.log(checkDisagg.checkedBool);
										//console.log('---------');
										//checkDisagg.setAttribute('checked',checkedBool);
										controlCont.appendChild(remType);
										controlCont.appendChild(selectType);
										console.log(selectType.checkDi);
										console.log(selectType.value);
										controlCont.appendChild(selectTypeChildVals);
										newDivGrab.appendChild(controlCont);
										//console.log(newDivGrab);
										//console.log(newDivGrab.children.length);
										//alert('This is second dashDataObj[a]: '+dashDataObj[g]);
										//alert ('This is DashStat'+ dashStatObj.dashStat);
										//alert('Counter outside: '+counterObj);
										console.log(checkDisaggaArr);

										if (counterObj == Object.keys(dashDataObj).length) {
											console.log(g);
											console.log(dashDataObj);
											console.log(checkDisaggaArr2);
											for (j in dashDataObj) {
												if (dashDataObj.hasOwnProperty(j)) {
													console.log(j);
													console.log(dashDataObj[j]);
												}
											}
											//console.log(dashDataObj);
											console.log(dashDataObj['checkDisagga']);


											var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
											var checkDisaggClassGrab = newDivGrab.getElementsByClassName('checkDisaggClass');
											console.log(checkDisaggClassGrab);
											console.log(dashStatObj.checkDisagg);
											if (dashStatObj.checkDisagg) { //for Dashboards with checks
												console.log('Present')
												for (var d = 0; d < selectTypeClassGrab.length; d++) {
													if (dashStatObj.checkDisagg == selectTypeClassGrab[d].value) {
														console.log('Equality found!');
														selectTypeClassGrab[d].parentNode.children[0].setAttribute('checked', true);
														//checkDisaggClassGrab[d].checked;
													}
												}
											}

											console.log('Counter inside: ' + counterObj);
											console.log('Counter dashObject Length: ' + Object.keys(dashDataObj).length);
											//sendReq.value ='Send';
											//console.log();
											/*	
											if (dashStatObj.checkDisagg){
												alert ('checking dissagregation');
											}
											*/

											if (dashStatObj.dashStat == 'true') {

												//newDivGrabContainer.appendChild(customGraph);

												selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
												var selectTypeChildValsClassGrab = newDivGrab.getElementsByClassName('selectTypeChildValsClass');
												//alert (selectTypeChildValsClassGrab[1].value);

												var sendStr = '';
												for (var a = 0; a < selectTypeChildValsClassGrab.length; a++) {
													console.log(selectTypeClassGrab[a], selectTypeClassGrab[a].value);
													console.log('----');
													console.log(selectTypeChildValsClassGrab[a], selectTypeChildValsClassGrab[a].value);
													selectTypeChildValsClassGrab[a].name = selectTypeClassGrab[a].value;
													sendStr += selectTypeChildValsClassGrab[a].name + "=" + selectTypeChildValsClassGrab[a].value + "&";

												}
												console.log('Counter inside String: Inner sendStr: ' + sendStr);
												sendReq.click();

											} else {
												//gray out filter
												imgFilter.style.opacity = 0.1;
												console.log(imgFilter);
												console.log('Has dashData...');
												//don't autosave on loading...
												//alert(dashData);
												newDivGrabContainer.style.borderColor = 'green';


												imgPinBool = false;
												sendSavObj.savRep = true; //is this used at all?

												imgPin.style.transitionDuration = "0.1s";
												//imgPin.style.transform = "rotate(15deg)";
												newDivGrabContainer.style.borderStyle = 'solid';
												newDivGrabContainer.style.borderColor = 'Green';


												if (dashData) {
													dashData = undefined;
												}


											}
										} else {
											console.log('exceeded three');
										}
									}
								}
								//})(selectTypeChildVals,selectType, g, counterObj);


							}
						})(selectTypeChildVals, selectType, controlCont, remType, g, sendReq, checkDisagg, checkedBool);






						/*
						var sendReqGrabs= document.getElementsByClassName('sendReqDivClass');
						
						for (var i=0;i<sendReqGrabs.length;i++){
							var butArr = sendReqGrabs[i].getElementsByClassName('sendReqClass');
						
								console.log(butArr);
								butArr[0].click();
						}
							*/

						(function (selectTypeChildVals) { //Is this still useful? If it is likely to replace with other case '' code, and possibly arrResponse code
							selectType.addEventListener('change', function () {
								console.log('Too much o...!');
								var arrResponse = [];
								var selFilter = document.createElement('select');
								selFilter.setAttribute('class', 'selFilterClass');

								switch (this.value) {
									case 'CompanyName':
										console.log('This is Company');
										arrResponseBack(this.value);
										break;
									case 'DosageForms':
										console.log('This is DosageForms');
										arrResponseBack(this.value);
										break;
									case 'InspectionType':
										console.log('This is inspection type');
										arrResponseBack(this.value);
										break;
									case 'State':
										//arrResponseBack(this.value);
										for (var a = 0; a < statesArr.length; a++) {
											this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(statesArr[a]);
										}
										break;
									case 'DateTo':
										this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
										selectTypeChildVals = document.createElement('input'); //reassigning
										selectTypeChildVals.setAttribute('type', 'date');
										selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
										//selectTypeChildVals.setAttribute('name','DateTo');
										this.parentNode.appendChild(selectTypeChildVals);
										break;
									case 'DateFrom':
										console.log(this.parentNode.getElementsByClassName('selectTypeChildValsClass dashFltRt')[0]);
										this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
										selectTypeChildVals = document.createElement('input'); //reassigning
										selectTypeChildVals.setAttribute('type', 'date');
										selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
										//selectTypeChildVals.setAttribute('name','DateFrom');
										this.parentNode.appendChild(selectTypeChildVals);

										break;
									case 'Inspectors':
										arrResponseBack(this.value);
										break;
									case 'Compliance':
										for (var a = 0; a < complianArr.length; a++) {
											console.log('Populating Comp...');
											this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(complianArr[a]);
										}
										break;
									case 'NRN':
										console.log('Inside NRN...');
										for (var a = 0; a < NRNArr.length; a++) {
											console.log('Populating NRN...');
											this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(nrnArr[a]);
										}
										break;
									default:
										alert(`This if for na ${this.value}`);
								}


							}
							)
						})(selectTypeChildVals);


						//selectTypeChildVals.value =dashDataObj[a];
						//Work on seselectTypeChildVals
						//selectType.addEventListener('change', AddSelectFilter);
						//controlCont.appendChild(remType);

						console.log(dashData.DashboardID);
						sendSavObj.iDSavStr = dashData.DashboardID;
					}


				}

			}
		}



		function addNewControls(newDivGrab, arrayType) {
			console.log('+++++++++++++++++++++');
			console.log(arrayType);
			//console.log(arrayType.reportType);

			var selectTypeClassGrab = newDivGrab.getElementsByClassName('selectTypeClass');
			console.log(selectTypeClassGrab);


			var arrTypePresent = [];
			for (var a = 0; a < selectTypeClassGrab.length; a++) {
				console.log('count', a);
				arrTypePresent.push(selectTypeClassGrab[a].value);
			}
			console.log(arrTypePresent);
			console.log(arrayType);
			console.log(arrayType.indexOf(arrTypePresent[0]));
			for (var a = 0; a < arrTypePresent.length; a++) {
				if (arrayType.indexOf(arrTypePresent[a]) !== -1) {
					console.log('spliced');
					arrayType.splice(arrayType.indexOf(arrTypePresent[a]), 1);
				}
			}

			arrTypePresent = []; //initializing...

			//alert('Adding control...');
			var remType = document.createElement('input');
			remType.setAttribute('type', 'button');
			remType.setAttribute('value', 'Remove');
			remType.addEventListener('click', function () {
				alert('Removing');
				newDivGrab.removeChild(this.parentNode);
				DisableCheckbox(newDivGrab);
			});

			var disableCheckGrey;
			function DisableCheckbox(newDivGrab) {
				console.log(newDivGrab);
				disableCheckGrey = newDivGrab.getElementsByClassName('containControls');
				console.log(disableCheckGrey);

				if (disableCheckGrey.length > 1) {
					console.log('More than one...');
					console.log(disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0]);
					disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = false;
					/*
					for (var a = 0;a <disableCheckGrey.length;a++){
						console.log(disableCheckGrey[a]);
					}
					*/
				} else if (disableCheckGrey.length == 1) {
					//Grab the one and only control row, go for the first element
					console.log('Only one...');
					//disableCheckGrey[0].getElementsByClassName('checkDisagg')[0].disabled = true;
					disableCheckGrey[0].getElementsByClassName('checkDisaggClass')[0].disabled = true;
				} else {
					console.log('Something else');
					console.log(disableCheckGrey.length);
				}

			}
			var newDivDisableGrey;
			function disableOnchangeToDateToFrom() {
				newDivDisableGrey = newDivGrab.getElementsByClassName('selectTypeClass');
				console.log(newDivDisableGrey);
				console.log(newDivDisableGrey.length);
				console.log(newDivDisableGrey[0]);
				console.log(newDivDisableGrey[newDivDisableGrey.length - 1].value);
				if (this.value == 'DateTo' || this.value == 'DateFrom') {
					alert('That');
					console.log(this);
					this.parentNode.getElementsByClassName('checkDisaggClass')[0].disabled = true;
				} else {
					this.parentNode.getElementsByClassName('checkDisaggClass')[0].disabled = false;
				}

			}
			var selectType = document.createElement('select');
			selectType.setAttribute('name', 'selectTypeName');
			selectType.setAttribute('class', 'selectTypeClass');
			selectType.setAttribute('id', 'selectTypeId');
			selectType.addEventListener('change', disableOnchangeToDateToFrom);
			var selectTypeGrab = document.getElementById('selectTypeId');
			//var arrayType = ['Company', 'DosageForms', 'State', 'InspectionType', 'Generic', 'SubClass', 'Inspectors', 'DateFrom', 'DateTo', 'Compliance', 'NRN'];
			console.log(arrayType);
			//console.log(selectTypeGrab);
			for (var a = 0; a < arrayType.length; a++) {
				//console.log(selectType);
				selectType.options[a] = new Option(arrayType[a]);
			}


			var controlCont = document.createElement('div');
			//containControls
			var selectTypeChildVals = document.createElement('select');
			selectTypeChildVals.setAttribute('name', 'selectTypeChildValsName');
			selectTypeChildVals.setAttribute('id', 'selectTypeChildValsId');
			//selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass');
			selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
			//selectTypeChildVals.setAttribute('class', 'dashFltRt');
			console.log(selectTypeChildVals);

			var checkDisagg = document.createElement('input');
			checkDisagg.setAttribute('class', 'checkDisaggClass');
			checkDisagg.setAttribute('type', 'checkbox');
			checkDisagg.setAttribute('name', 'checkDisaggName');
			checkDisagg.addEventListener('click', function () {
				//alert(this.parentNode.getElementsByClassName ('selectTypeClass')[0].value);
				if (this.checked == true) {
					alert('True');
					var checkDisaggClassGrab = newDivGrab.getElementsByClassName('checkDisaggClass');
					for (var d = 0; d < checkDisaggClassGrab.length; d++) {
						checkDisaggClassGrab[d].checked = false;
					}
					this.checked = true;
				}
			});

			//(function(selectType, selectTypeChildVals){
			selectType.addEventListener('change', function () {
				console.log(this);
				console.log(selectTypeChildVals);
				console.log(selectType);
				console.log('Too much o...!');
				var arrResponse = [];
				var selFilter = document.createElement('select');
				selFilter.setAttribute('class', 'selFilterClass');



				switch (this.value) {
					case 'Company':
						console.log('This is Company');
						arrResponseBack(this);
						break;
					case 'DosageForms':
						console.log('This is DosageForms');
						arrResponseBack(this);
						break;
					case 'InspectionType':
						console.log('This is inspection type');
						arrResponseBack(this);
						break;
					case 'State':
						//arrResponseBack(this);
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}

						for (var a = 0; a < statesArr.length; a++) {
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(statesArr[a]);
						}
						break;
					case 'Generic':
						console.log('This is Generic');
						arrResponseBack(this);
						break;
					case 'SubClass':
						console.log('This is SubClass');
						arrResponseBack(this);
						break;
					case 'DateTo':
						this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
						selectTypeChildVals = document.createElement('input'); //reassigning
						selectTypeChildVals.setAttribute('type', 'date');
						selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						//selectTypeChildVals.setAttribute('name','DateTo');
						this.parentNode.appendChild(selectTypeChildVals);
						break;
					case 'DateFrom':
						alert('Date');
						console.log(this.parentNode.getElementsByClassName('selectTypeChildValsClass dashFltRt')[0]);
						this.parentNode.removeChild(this.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
						selectTypeChildVals = document.createElement('input'); //reassigning
						selectTypeChildVals.setAttribute('type', 'date');
						selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
						//selectTypeChildVals.setAttribute('name','DateFrom');
						this.parentNode.appendChild(selectTypeChildVals);

						break;
					case 'Inspectors':
						arrResponseBack(this);
						break;
					case 'Compliance':
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}
						for (var a = 0; a < complianArr.length; a++) {
							console.log('Populating Comp...');
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(complianArr[a]);
						}
						break;
					case 'NRN':
						console.log('Inside NRN...');
						if (this.parentNode.children[2].nodeName == 'INPUT') {
							alert('NRN is input...');
							console.log(this);
							var selectTypeChildVals = document.createElement('select');
							selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
							this.parentNode.removeChild(this.parentNode.children[2]);
							this.parentNode.appendChild(selectTypeChildVals);
						}
						for (var a = 0; a < nrnArr.length; a++) {
							console.log('Populating NRN...');
							this.parentNode.getElementsByTagName('select')[1].options[a] = new Option(nrnArr[a]);
						}
						break;
					default:
						alert(`This if for na ${this.value}`);
				}



				function arrResponseBack(this2) {
					console.log('Calling now...');
					console.log(this);
					var para = "nameOfSel=" + this2.value;
					console.log(para);
					var xmlBack = new XMLHttpRequest();
					xmlBack.open('GET', 'getBack?' + para, true);
					//xmlBack.setRequestHeader ('Content-Type','application/x-www-form-urlencoded');
					xmlBack.responseType = 'json';
					xmlBack.send();

					xmlBack.onreadystatechange = function () {
						if (xmlBack.readyState == 4 && xmlBack.status == 200) {
							alert('Successful!');
							var objDoc = xmlBack.response;
							console.log(objDoc);
							//console.log


							if (this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].nodeName == 'INPUT') {
								alert('A case of input!');
								console.log(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
								this2.parentNode.removeChild(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0]);
								var selectTypeChildVals = document.createElement('select');
								//this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0] = document.createElement('select'); //reassigning
								//selectTypeChildVals.setAttribute('type','date');
								selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');
								//selectTypeChildVals.setAttribute('name','DateFrom');
								this2.parentNode.appendChild(selectTypeChildVals);
							}
							/*
							while(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].children){
								console.log('Removing...');
								//this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].options.remove(0);
							}
							*/

							while (this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].length > 0) {
								this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].remove(0);
							}

							this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0] = [];
							console.log(this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].options);
							for (var a = 0; a < objDoc.length; a++) {
								this2.parentNode.getElementsByClassName('selectTypeChildValsClass')[0].options[a] = new Option(objDoc[a]);
								console.log('loadig...');
							}
						}
					}
				} //end of ArrResponseBack





			});


			//})(selectType, selectTypeChildVals);



			if (selectType.value == "DateFrom" || selectType.value == "DateTo") {
				alert('Date issues');
				console.log(selectTypeChildVals);
				selectTypeChildVals = document.createElement('input'); //reassigning
				selectTypeChildVals.setAttribute('type', 'date');
				selectTypeChildVals.setAttribute('class', 'selectTypeChildValsClass dashFltRt');

				if (selectType.value == "DateTo") {
					var date = new Date();
					selectTypeChildVals.setAttribute('value', date.getFullYear().toString() + '-' + (date.getMonth() + 1).toString().padStart(2, 0) +
						'-' + date.getDate().toString().padStart(2, 0));
				}


				if (selectType.value == "DateFrom") {
					console.log('Inside From:');
					console.log(arrayType.reportType);
					var date = new Date();
					switch (arrayType.reportType) {
						case "Annual":
							console.log('Dealing with Annual');
							console.log(date.getFullYear().toString() + '-' + '01' + '-' + '01');
							var dateFrom = date.getFullYear().toString() + '-' + '01' + '-' + '01';
							console.log(dateFrom);
							selectTypeChildVals.setAttribute('value', date.getFullYear().toString() + '-' + '01' + '-' + '01');
							break;
						case "Monthly":
							selectTypeChildVals.setAttribute('value', date.getFullYear().toString() + '-' + (date.getMonth() + 1).toString().padStart(2, 0) + '-' + '01');
							break;

						default:
							console.log('Not any');
					}
					console.log(arrayType.reportType);

					//selectTypeChildVals.setAttribute('value', date.getFullYear().toString() + '-' + (date.getMonth() + 1).toString().padStart(2, 0) +
					//'-' + date.getDate().toString().padStart(2, 0));
				}
				//selectTypeChildVals.setAttribute('name','DateTo');
				//this.parentNode.appendChild(selectTypeChildVals);

			} else if (selectType.value == "Compliance" || selectType.value == "NRN") {
				alert('No server calls');
				if (selectType.value == "Compliance") {
					//alert('Compliance: No server calls');
					//alert('Nothing Server...');
					//console.log(complianArr)
					for (var b = 0; b < complianArr.length; b++) {
						//alert('Populating Comp...');
						console.log(newDivGrab.getElementsByTagName('select')[1]);
						console.log(selectTypeChildVals);
						selectTypeChildVals.options[b] = new Option(complianArr[b]);
					}
				}

				if (selectType.value == "NRN") {
					alert('NRN: No server calls');
					for (var b = 0; b < nrnArr.length; b++) {
						//console.log('Populating NRN...');
						console.log(selectTypeChildVals);
						console.log(newDivGrab.getElementsByTagName('select')[1]);
						selectTypeChildVals.options[b] = new Option(nrnArr[b]);
					}
				}
			} else {
				arrResponseBack1(selectType.value);
			}
			var controlCont = document.createElement('div');
			controlCont.setAttribute('class', 'containControls');
			controlCont.appendChild(checkDisagg);
			controlCont.appendChild(remType);
			controlCont.appendChild(selectType);
			controlCont.appendChild(selectTypeChildVals);
			newDivGrab.appendChild(controlCont);

			function arrResponseBack1(selectTypevalue) {
				console.log('Calling now...');
				var para = "nameOfSel=" + selectTypevalue;
				var xmlBack = new XMLHttpRequest();
				xmlBack.open('GET', 'getBack?' + para, true);
				//xmlBack.setRequestHeader ('Content-Type','application/x-www-form-urlencoded');
				xmlBack.responseType = 'json';
				xmlBack.send();

				xmlBack.onreadystatechange = function () {
					if (xmlBack.readyState == 4 && xmlBack.status == 200) {
						alert('Successful!');
						var objDoc = xmlBack.response;
						console.log(objDoc);

						for (var a = 0; a < objDoc.length; a++) {


							selectTypeChildVals.options[a] = new Option(objDoc[a]);
						}
					}
				}
			}

			//

		}

		function CompanyOptionsCallDash(this2, companySelectTypeChildVals) {
			//alert('Commencing dashboard search...');
			console.log('Now counting yeah...');
			if ((this2.value).length > 1) {

				if (XMLHttpRequestObj5) {
					XMLHttpRequestObj5.abort();
				}

				console.log('Calling Ajax...!');
				XMLHttpRequestObj5 = new XMLHttpRequest();
				XMLHttpRequestObj5.open('POST', 'AutocompleteDash', true);
				XMLHttpRequestObj5.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
				XMLHttpRequestObj5.responseType = 'json';

				XMLHttpRequestObj5.send(this2.name + '=' + this2.value);
				XMLHttpRequestObj5.onreadystatechange = function () {
					console.log('Request back');
					console.log(XMLHttpRequestObj5.readyState);
					if (XMLHttpRequestObj5.readyState == 4 && XMLHttpRequestObj5.status == 200) {
						console.log('Successfully hit server');
						xmlAuto = XMLHttpRequestObj5.response;
						console.log(xmlAuto);
						AutoProcessDash(xmlAuto, companySelectTypeChildVals);
					}
				}
			}

		}

		function AutoProcessDash(xmlAuto2, companySelectTypeChildVals) { //for processing Company Name and Company Address
			//alert('Specifically for dashboard search...');
			nocSelAddGrab = document.getElementById('nocSelAdd');
			// Emptying select box
			console.log(nocSelName);
			console.log(nocSelNameDiv);
			console.log(companySelectTypeChildVals);
			while (companySelectTypeChildVals.length > 0) {
				companySelectTypeChildVals.remove(0);
			}


			var autoArr = [];
			var autoArr2 = [];

			var autoAdd = [];
			var autoAdd2 = [];

			console.log('Processing xml...!' + xmlAuto2);
			var xmlAutoDoc = xmlAuto2.companyName;
			var xmlAutoAdd = xmlAuto2.companyAdd;
			console.log('This is the number: ' + xmlAutoDoc.length);
			console.log('This is the number: ' + xmlAutoAdd.length);

			for (var a = 0; a < xmlAutoDoc.length; a++) {
				autoArr.push(xmlAutoDoc[a]);
				autoAdd.push(xmlAutoAdd[a]);
			}
			autoArr.sort(function (a, b) {
				return (a.name > b.name);
			});

			autoAdd.sort();
			console.log(autoArr);
			console.log(autoAdd);
			console.log('length of autoArr', autoArr.length);
			console.log(autoArr[0]);
			console.log(autoArr[1]);
			for (var b = 0; b < autoArr.length; b++) {
				console.log('This is autoArr:')
				console.log(autoArr[b + 1]);
				if (autoArr[b].name == ((autoArr[b + 1] == undefined) ? autoArr[b + 1] : autoArr[b + 1].name)) {
					delete autoArr[b];
				}
			}

			for (var b = 0; b < autoAdd.length; b++) {
				if (autoAdd[b] == autoAdd[b + 1]) {
					delete autoAdd[b];
				}
			}

			for (var d = 0; d < autoArr.length; d++) {
				if (autoArr[d] != undefined) {
					autoArr2.push(autoArr[d]);
				}

				if (autoAdd[d] != undefined) {
					autoAdd2.push(autoAdd[d]);
				}
			}
			console.log('Final Arr: ');
			console.log(autoArr2);
			console.log(autoAdd2);


			for (var c = 0; c < autoArr2.length; c++) {
				console.log(companySelectTypeChildVals);
				console.log(companySelectTypeChildVals.length);
				companySelectTypeChildVals.options[c] = new Option(autoArr2[c].name);
				//nocSelAddGrab.options[c] = new Option(autoArr2[c].add);
			}

		}


		function AddDashboard2() {
			console.log('Adding dash...');
			var newDivGrab = document.createElement('div');
			newDivGrab.setAttribute('class', 'newDiv');

			var imgRemov = document.createElement('img');
			imgRemov.setAttribute('src', '/ProfilePicsFoldera/icons8-delete-24.png');
			imgRemov.setAttribute('width', 20);
			imgRemov.setAttribute('height', 20);

			imgRemov.addEventListener('click', function () {
				dashboardaGrab.removeChild(this.parentNode);
			});

			var selectGeneric = document.createElement('select');
			selectGeneric.setAttribute('id', 'selectGenericId');
			//var selectGenericId 
			//selectGeneric.addEventListener('change', populateGeneric);


			imgRemov.alt = imgRemov.src;
			//imgRemov.width = 20;
			//imgRemov.height = 20;
			newDivGrab.appendChild(imgRemov);
			newDivGrab.appendChild(selectGeneric);

			dashboardaGrab.appendChild(newDivGrab);

			var selectGenericGrab = document.getElementById('selectGenericId');
			var selectGenericObj = new XMLHttpRequest();

			selectGenericObj.open('GET', 'compData', true);
			//selectGenericObj.setRequestHeader ('Content-Type','application/x-www-form-urlencoded');
			selectGenericObj.responseType = 'json';
			selectGenericObj.send();

			selectGenericObj.onreadystatechange = function () {
				console.log('Entering...');
				if (selectGenericObj.readyState == 4 && selectGenericObj.status == 200) {
					console.log('Entered...');
					var objDoc2 = selectGenericObj.response;
					console.log(objDoc2);
					console.log(selectGeneric);
					console.log(selectGeneric.id);
					for (var a = 0; a < objDoc2.length; a++) {
						console.log('pup');
						selectGenericGrab.options[a] = new Option(objDoc2[a]);
					}

				}
				console.log(selectGenericGrab.options);
			}

		}

		function populateGeneric() {
			alert()
		}

		function InspectionProfile() {
			var InspProfObj = new XMLHttpRequest();

			InspProfObj.open('POST', 'profileInspector', true);
			InspProfObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			InspProfObj.responseType = 'json';
			InspProfObj.send('InspectorName=' + 'Malachi');

			InspProfObj.onreadystatechange = function () {
				if (InspProfObj.readyState == 4 && InspProfObj.status == 200) {
					objDoc2 = hInspProfObj.response;
					ComplianceCharting(objDoc2);
				}

			}//end of anonymous function

			//alert('Alerting inspection...!');
			var InspProfChart = new google.visualization.ColumnChart(newDivIdGrab);

			var data = new google.visualization.DataTable();
			data.addColumn('string', 'Inspections');
			data.addColumn('number', 'Number');
			data.addRows([
				['Major', 12],
				['Critical', 14],
				['Other', 13],
				['None', 21]
			]);

			var options = {
				'title': 'Inspection Profile',
				'width': 290,
				'height': 200
			};
			InspProfChart.draw(data, options);
		}

		function Dashboards() {
			var dashboardObj = new XMLHttpRequest();

			dashboardObj.open('POST', 'GetDashboards', true);
			dashboardObj.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			dashboardObj.responseType = 'json';
			dashboardObj.send();

			dashboardObj.onreadystatechange = function () {
				if (dashboardObj.readyState == 4 && dashboardObj.status == 200) {
					objDoc2 = dashboardObj.response;
					console.log(objDoc2);
					objDoc2.forEach(a => {
						console.log(a.SavData);
						//alert(a.DashStatus.dashStat);
						AddDashboard(a);
					});
				}

			}
		}


		function GetProPic() {
			alert('Updating');
			var profImgGrab = document.getElementById('profImg');
			var profImgGrab2 = document.getElementById('profImg2');
			var getProPic = new XMLHttpRequest();


			getProPic.open('GET', 'image.png', true);
			getProPic.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			getProPic.responseType = 'text';
			getProPic.send();

			getProPic.onreadystatechange = function () {
				alert(getProPic.response);
				if (getProPic.readyState == 4 && getProPic.status == 200) {
					console.log('Arrived...!');
					console.log(getProPic.response);
					profImgGrab.src = getProPic.response;
					profImgGrab2.src = getProPic.response;
				}

			}

		}

		function EditArc(b) {
			var editConfirm = window.confirm('Editing present Company location');
			if (editConfirm) {
				editPass = window.prompt('Input Password:');
				if (editPass) {
					nocSelNameADiv.click();
				} else {
					alert('Access Denied');
				}
			}
		}

		function combinate() {
			//alert('I will combine');
			console.log(this.parentNode);
			var dashboardImgContainerClassGrab = dashboardaGrab.getElementsByClassName('imgContainerClass');
			var checkedCombiNewDivArr = [];

			for (var a = 0; a < dashboardImgContainerClassGrab.length; a++) {
				var checkCombiClassGrab = dashboardImgContainerClassGrab[a].getElementsByClassName('checkCombiClass');
				if (checkCombiClassGrab[0].checked) {
					//alert(checkCombiClassGrab[0].checked);
					checkedCombiNewDivArr.push(dashboardImgContainerClassGrab[a].parentNode.getElementsByClassName('dashChartComplianceClass'));
				}

			}
			console.log(checkedCombiNewDivArr);
			var objDocCombi = [];
			for (var b = 0; b < checkedCombiNewDivArr.length; b++) {
				console.log(checkedCombiNewDivArr[b][0].objDoc);
				objDocCombi.push(checkedCombiNewDivArr[b][0].objDoc);
			}
			//
			//console.log(document.getElementsByClassName('newDivGrab2Class'));
			console.log(objDocCombi);

			var imgRemov = document.createElement('img');
			imgRemov.setAttribute('src', '/ProfilePicsFoldera/icons8-delete-24.png');
			imgRemov.setAttribute('width', 20);
			imgRemov.setAttribute('height', 20);

			var imgBlow = document.createElement('img');
			imgBlow.setAttribute('src', '/ProfilePicsFoldera/Expand4.png');
			imgBlow.setAttribute('width', 20);
			imgBlow.setAttribute('height', 20);
			imgBlow.setAttribute('class', 'imgBlowClass');

			var isStackedImg = document.createElement('img');
			isStackedImg.setAttribute('src', '/ProfilePicsFoldera/stackedColumn2.png');
			isStackedImg.setAttribute('width', 20);
			isStackedImg.setAttribute('height', 20);
			isStackedImg.setAttribute('class', 'isStackedImgClass');
			isStackedImg.addEventListener('click', chartStack100);

			/*
			var isStackedImg100 = document.createElement('img');
			isStackedImg100.setAttribute('src', '/ProfilePicsFoldera/100.png');
			isStackedImg100.setAttribute('width', 20);
			isStackedImg100.setAttribute('height', 20);
			isStackedImg100.setAttribute('class', 'isStackedImg100Class');
			isStackedImg100.addEventListener('click', chartStack100);
			*/

			var combiDivMenuBool = false;

			var MaxiMini;
			(function (imgBlow) {
				MaxiMini = function (ev) {
					if (!combiDivMenuBool) {
						console.log('Maximizing...');
						ev.stopPropagation();
						//alert('Maximizing...');
						this.parentNode.parentNode.style.position = "fixed";
						this.parentNode.parentNode.style.top = "39%"; //50% of container - 50% of the object to be moved (50-11)
						this.parentNode.parentNode.style.left = "39%";
						this.parentNode.parentNode.style.marginLeft = "10px";
						//this.parentNode.style.transitionDuration = "all 5s";
						//this.parentNode.style.transform = "translateX(200px)";
						this.parentNode.parentNode.style.transform = "scale(2)";
						//this.parentNode.style.marginLeft = "5px";
						//alert(this.parentNode.style.marginLeft);
						this.parentNode.parentNode.style.zIndex = 11;
						//dashboardaGrab.style.opacity = 0.4;
						this.parentNode.parentNode.style.opacity = 0.9;
						combiDivMenuBool = true;
					} else {
						console.log(this);
						this.parentNode.parentNode.style.position = "relative";
						this.parentNode.parentNode.style.top = "0%";
						this.parentNode.parentNode.style.left = "0%";
						//this.parentNode.style.marginLeft = this.parentNode.style.width/2
						this.parentNode.parentNode.style.transform = "scale(1)";
						//this.parentNode.style.marginLeft = "5px";
						//alert(this.parentNode.style.marginLeft);
						this.parentNode.parentNode.style.zIndex = 1;
						//dashboardaGrab.style.opacity = 1.0;
						combiDivMenuBool = false;
					}
				}
			})(imgBlow);


			imgBlow.addEventListener('click', MaxiMini, false);


			(function (imgBlow) {
				document.addEventListener('click', function () {
					alert(combiDivMenuBool);
					if (combiDivMenuBool) {
						MaxiMini.call(imgBlow);
					}
				});
			})(imgBlow);


			function chartStack() {
				isStackedBool = true;
				google.charts.setOnLoadCallback(ChartNow);
			}

			function chartStack100() {
				if (!isStackedBool) {
					isStackedBool = 'percent';
					google.charts.setOnLoadCallback(ChartNow);
				} else {
					isStackedBool = false;
					google.charts.setOnLoadCallback(ChartNow);
				}
			}

			var combiDiv2 = document.createElement('div');
			combiDiv2.setAttribute('class', 'combiDiv2Class');

			var combiDivCont = document.createElement('div');
			combiDivCont.setAttribute('class', 'combiDivContClass');

			var combiDiv = document.createElement('div');
			combiDiv.setAttribute('class', 'combiDivClass');

			var combiDivMenu = document.createElement('div');
			combiDivMenu.setAttribute('class', 'combiDivMenuClass');

			var isStackedBool = false;

			google.charts.setOnLoadCallback(ChartNow);

			function ChartNow() {
				console.log('isStackedBool: ', isStackedBool);
				var objDocComplianceCombiArr = [];
				for (var d = 0; d < objDocCombi.length; d++) {

					var objDocComplianceCombi = { Critical: 0, Major: 0, Other: 0, resolve: 0 };

					var arra = {};
					for (var f = 0; f < Object.keys(objDocComplianceCombi).length; f++) {
						console.log(Object.keys(objDocComplianceCombi)[f]);
						//arra[Object.keys(objDocComplianceCombi)[f]] =;

					}

					console.log(arra);

					console.log(objDocComplianceCombi);
					console.log('---???---???---');
					for (var a = 0; a < objDocCombi[d].length; a++) {
						//console.log('Entered..');
						for (var b in objDocCombi[d][a]) {
							if (objDocCombi[d][a].hasOwnProperty(b)) {
								//console.log('Entered pass...');
								if (b == "FindObservation") {
									//console.log(b);
									++objDocComplianceCombi[objDocCombi[d][a].FindObservation];
								}
							}
						}
						console.log(objDocCombi[d][a].CompanyName);
						objDocComplianceCombi.CompanyName = objDocCombi[d][a].CompanyName;
					}

					objDocComplianceCombiArr.push(objDocComplianceCombi);

				}
				/*
				var objDocComplianceCombiArrInvat = [];
				for (var d=0;d <objDocComplianceCombiArr.length;d++){
					objDocComplianceCombiArrInvat
				}
				*/
				console.log(objDocComplianceCombi);

				//data.addColumn('string', 'Compliance');
				//data.addColumn('number', 'Number');

				var objDocComplianceCombiArrArr = [['Compliance', 'Value', 'value', { role: 'style' }]];
				for (var d = 0; d < objDocComplianceCombiArr.length; d++) {
					objDocComplianceCombiArrArr.push([objDocComplianceCombiArr[d].CompanyName, objDocComplianceCombiArr[d]['Critical'], objDocComplianceCombiArr[d]['Major'], 'color:red']);

				}
				var data = new google.visualization.arrayToDataTable(objDocComplianceCombiArrArr);

				var options = {
					'title': 'GMP Profile',
					'width': 317,
					'height': 166,
					'isStacked': isStackedBool
				};

				/*
				if (dashStatObj) {
				
				
					switch (dashStatObj.graType){
						//alert('Inside Switch');
						case 'ColumnChart':
							//alert('Columning Serious');
							var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
						break;
						case 'PieChart':
							//alert('Pieing Serious')
						var chart = new google.visualization.PieChart(dashChartComplianceIcon);
						break;
						case 'LineChart':
						var chart = new google.visualization.LineChart(dashChartComplianceIcon);
						break;
						case 'Scatter':
						var chart = new google.charts.Scatter(dashChartComplianceIcon);
						break;
						default:
							alert('Defaulting..');
						var chart = new google.visualization.ColumnChart(dashChartComplianceIcon);
					 }
				
				
				} else {
						var chart = new google.visualization.ColumnChart(combiDiv);
				}
				*/

				var chart = new google.visualization.ColumnChart(combiDiv);

				//dashChartCompliance.objDoc = objDoc;
				combiDiv.addEventListener('click', function () {
					alert('toggling class list');
					//console.log(this.objDoc);
				});

				console.log(combiDiv);
				//console.log(dashChartCompliance.objDoc);
				//newDivGrabParentNode.appendChild(dashChartCompliance);

				console.log('Added Chart...');
				//sendReq.setAttribute('value', 'Back');

				//	console.log(newDivGrab);
				//console.log(newDivGrabParentNode);
				//dashChartCompliance.appendChild(dashChartComplianceSwitch);

				chart.draw(data, options);

				/*
				if (dashData){
					console.log('Has dashData...');
					if (dashStatObj.dashStat =='true'){
						//don't autosave on loading...
						//alert(dashData);
						newDivGrabContainer.style.borderColor = 'green';
					}
					//dashData = undefined;
					//AutoSaveGlo();
					
					
					
				//alert('Changes made');
				imgPinBool =false;
				//alert (imgPinBool);
				
				sendSavObj.savRep = true; //is this used at all?
				//if (sendSavObj.iDSavStr){
					imgPin.style.transitionDuration = "0.1s";
					//imgPin.style.transform = "rotate(15deg)";
					newDivGrabContainer.style.borderStyle = 'solid';
					newDivGrabContainer.style.borderColor = 'Green';
				//}
				
				if(dashData){
					dashData =undefined;
				}
			}else{
					alert('No Data');
					AutoSaveGlo();//enforcing resave;
				}
				*/

			}



			console.log(combiDivMenu);
			combiDivCont.appendChild(combiDiv);
			combiDivMenu.appendChild(isStackedImg);
			//combiDivMenu.appendChild(isStackedImg100);
			combiDivMenu.appendChild(imgBlow);
			combiDiv2.appendChild(combiDivMenu);
			combiDiv2.appendChild(combiDivCont);

			dashboardaGrab.appendChild(combiDiv2);

		}

		function InspectorsBring(staTypeGrabVal, b, fromDate, toDate) {
			console.log(staTypeGrabVal);
			console.log(b);

			var InspBringObj = new XMLHttpRequest();

			InspBringObj.open('GET', 'bringInspector' + '?statInfo=' + staTypeGrabVal + '&inspInfo=' + b, true);
			InspBringObj.responseType = 'json';
			InspBringObj.send(null);

			InspBringObj.onreadystatechange = function () {
				if (InspBringObj.readyState == 4 && InspBringObj.status == 200) {
					objDoc2 = InspBringObj.response;
					console.log(objDoc2);
					//var objDoc2Object = JSON.parse(objDoc2);
					//console.log(objDoc2Object);
					//ComplianceCharting(objDoc2);
					objDoc2.forEach((a, i) => {
						inspectorObject[a.InspLastName + ' ' + a.InspFirstName] = [];
					});

					objDoc2.forEach((a, i) => {
						dispInspectorGrab.options[i] = new Option(a.InspLastName + ' ' + a.InspFirstName);
						console.log(dispInspectorGrab.options[i].innerHTML);
						/*
						var dispInspectorInspnNowGrabMapped = dispInspectorInspnNowGrab.map((nowItem, i) => {
							return nowItem.text;
						});
						*/
						(function (fromDate, toDate, i) {
							dispInspectorGrab.options[i].addEventListener('click', function () {
								//bringingInspections(this.innerHTML);
								console.log(dispInspectorInspnPendGrab);

								while (dispInspectorInspnPendGrab.options.length) {
									console.log('Removing...');
									dispInspectorInspnPendGrab.remove(0);
								}

								console.log(objInspectionsPending);
								console.log('Inspection: ', inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('(')));
								//pendingOptions(objPending2, dispInspectorInspnPendGrab)
								if (objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))]) {
									console.log(dispInspectorGrab.value, " ", inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('(')));

									Array.from(objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))]).forEach((arrPendItem, j) => {
										//console.log(arrPendItem);
										dispInspectorInspnPendGrab.options[j] = new Option(arrPendItem);
									});
								}

								while (dispInspectorInspnNowGrab.options.length) {
									dispInspectorInspnNowGrab.remove(0);
								}
								console.log(dispInspectorGrab);
								console.log(inspectorObject);
								console.log(dispInspectorGrab.options[i].innerHTML);
								console.log(inspectorObject[dispInspectorGrab.options[i].innerHTML]);
								if (inspectorObject[dispInspectorGrab.options[i].innerHTML]) {
									console.log(i);
									Array.from(inspectorObject[dispInspectorGrab.options[i].innerHTML]).forEach((arrItem2, j) => {
										//console.log(arrItem2);
										dispInspectorInspnNowGrab.options[j] = new Option(arrItem2);
									});
								}
								console.log(inspectorObject);
								console.log(objInspectionsPending[dispInspectorGrab.value]);
								console.log(inspectorObject[dispInspectorGrab.value]);

								console.log(objInspectionsPending);
								//objInspectionsPending[dispInspectorGrab.value]
								console.log(dispInspectorInspnPendGrab);
								console.log(dispInspectorInspnNowGrab);
								console.log(Array.from(dispInspectorInspnPendGrab.options).length);
								console.log(Array.from(dispInspectorInspnNowGrab.options).length);


								//objInspectionsPending[dispInspectorGrab.value]

								var pendInspectorInspTypeArr = objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))];
								console.log(pendInspectorInspTypeArr);
								pendInspectorInspTypeArrVal = (pendInspectorInspTypeArr || pendInspectorInspTypeArr.length) ? pendInspectorInspTypeArr.length : 0;
								var inspector = (inspectorObject[dispInspectorGrab.value] || inspectorObject[dispInspectorGrab.value].length) ? inspectorObject[dispInspectorGrab.value] : 0;
								//var inspectorLength = (inspectorObject[dispInspectorGrab.value]) ? inspectorObject[dispInspectorGrab.value].length : 0;
								var inspectorLength = inspectorObject; //(inspectorObject[dispInspectorGrab.value]) ? inspectorObject[dispInspectorGrab.value].length : inspectorObject[dispInspectorGrab.value];
								console.log(inspectorLength);
								//var objPendInspectorInspection = objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))].length;
								var objPendInspectorInspection = objInspectionsPending;//[dispInspectorGrab.value];
								//inspectorObjToChart(inspectorLength, objPendInspectorInspection);
								inspectorObjToChart(inspectorLength, objPendInspectorInspection);

							});//
						})(fromDate, toDate, i);
						dispInspectorGrab.selectedIndex = dispInspectorGrab.options[0];
						//dispInspectorGrab.options[0].click();
						console.log(nowInspections);
						console.log(nowInspectionsGrab);
						nowInspections.click();
					});
					console.log('++++++++++++++++++++++++');
					//pendingInspectorsBring(staTypeGrab.value, dispInspectorGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value);
					console.log(dispInspectorGrab.value);
				}

			}//end of anonymous function


		}

		function bringingInspections(this2, checkThis) {
			alert('Called inspections...');
			console.log(this2);
			console.log(checkThis);
			var fromDate2 = document.getElementById('fromDateLimitInspector');
			var toDate2 = document.getElementById('toDateLimitInspector');
			console.log(this2);
			console.log(fromDate2);
			var InspBringInspectionsObj = new XMLHttpRequest();
			var str = (checkThis) ? 'inspectorInspections' + '?inspectorName=' + this2 + '&fromDate=' + fromDate2.value + '&toDate=' + toDate2.value + '&checkValue=' + checkThis : 'inspectorInspections' + '?inspectorName=' + this2 + '&fromDate=' + fromDate2.value + '&toDate=' + toDate2.value
			console.log(str);
			InspBringInspectionsObj.open('GET', str, true);
			var str = 'inspectorName=' + this2 + '&fromDate=' + fromDate2.value + '&toDate=' + toDate2.value;
			console.log(str);
			InspBringInspectionsObj.responseType = 'json';
			InspBringInspectionsObj.send(null);

			InspBringInspectionsObj.onreadystatechange = function () {
				if (InspBringInspectionsObj.readyState == 4 && InspBringInspectionsObj.status == 200) {
					objDocInspections2 = InspBringInspectionsObj.response;
					console.log(objDocInspections2);
					var sortObjDocInspections2 = sortInspectResult(objDocInspections2);
					console.log(sortObjDocInspections2);
					console.log(dispInspectorInspnAllGrab);
					console.log(dispInspectorInspnPendGrab);

					while (dispInspectorInspnAllGrab.options.length) {
						dispInspectorInspnAllGrab.remove(0);
					}

					var counterdispInspectorInspn = 0;
					sortObjDocInspections2.forEach((inspn, i) => {
						dispInspectorInspnAllGrab.options[i] = new Option(inspn.CompanyName);
					});

					while (dispInspectorInspnPendGrab.options.length) {
						dispInspectorInspnPendGrab.remove(0);
					}

					sortObjDocInspections2.forEach((inspn, i) => {
						//console.log(inspn);
						//console.log(inspn.InspStatus);
						if (inspn.InspStatus == 'Pending') {
							console.log(inspn);
							dispInspectorInspnPendGrab.options[counterdispInspectorInspn] = new Option(inspn.CompanyName);
							++counterdispInspectorInspn;
						}
					});
					console.log(dispInspectorInspnPendGrab)
					console.log(dispInspectorInspnPendGrab.options.length);
					while (assignHistoryGrab.options.length) {
						assignHistoryGrab.remove(0);
					}

					var sortObjDocInspections2Filtered = sortObjDocInspections2.filter((inspn, i) => {
						if (sortObjDocInspections2[i + 1] != undefined) {
							return inspn.InspDate != sortObjDocInspections2[i + 1].InspDate;
						}
					});

					console.log(sortObjDocInspections2Filtered);
					sortObjDocInspections2Filtered.forEach(insp => {

					});

					var sortObjDocInspections3 = sortInspectResultWithoutDate(objDocInspections2);


					//inspectorObjToChart(dispInspectorInspnNow.options.length, dispInspectorInspnPend.options.length);
				}
			}

		}



		function InspectionBring(inspType, fromDate, toDate, staType, objDecommit, secondTimePop) {
			console.log(inspType);
			console.log(fromDate);
			console.log(toDate);
			console.log(staType);
			var InspnBringObj = new XMLHttpRequest();
			if (inspType) {
				var inspType = inspType.slice(0, inspType.indexOf("("));
				console.log(inspType);
				var str = 'bringInspection?' + 'inspType=' + inspType + '&fromDate=' + fromDate + '&toDate=' + toDate + '&staType=' + staType;
				console.log(str);
			} else {
				var str = 'bringInspection?' + 'fromDate=' + fromDate + '&toDate=' + toDate + '&staType=' + staType;
				console.log(str);
			}
			console.log(str);
			InspnBringObj.open('GET', str, true); //without regard to Inspection

			InspnBringObj.responseType = 'json';
			InspnBringObj.send(null);
			console.log(arguments);
			console.log(str);
			InspnBringObj.onreadystatechange = function () {
				if (InspnBringObj.readyState == 4 && InspnBringObj.status == 200) {
					objDoc2Scheduler = InspnBringObj.response;
					objDoc2Again = InspnBringObj.response;
					objDoc2Scheduler2 = InspnBringObj.response;
					console.log(objDoc2Scheduler);
					console.log(objDoc2Scheduler2);
					console.log(objDoc2Again);
					//var objDoc2Object = JSON.parse(objDoc2);
					//console.log(objDoc2Object);
					//ComplianceCharting(objDoc2);

					objDoc2Scheduler.sort((a, b) => {
						if (a.CompanyName > b.CompanyName) return 1;
						if (a.CompanyName < b.CompanyName) return -1;
						if (a.CompanyAdd > b.CompanyAdd) return 1;
						if (a.CompanyAdd < b.CompanyAdd) return -1;
						if (a.ProductLineName > b.ProductLineName) return 1;
						if (a.ProductLineName < b.ProductLineName) return -1;
						if (a.InspectionID > b.InspectionID) return 1;
						if (a.InspectionID < b.InspectionID) return -1;
						if (a.DosFormsType > b.DosFormsType) return 1;
						if (a.DosFormsType < b.DosFormsType) return -1;
						if (a.InspDate > b.InspDate) return 1;
						if (a.InspDate < b.InspDate) return -1;
						if (a.InspTypeName > b.InspTypeName) return 1;
						if (a.InspTypeName < b.InspTypeName) return -1;
					});

					objDoc2Again.sort((a, b) => {
						if (a.CompanyName > b.CompanyName) return 1;
						if (a.CompanyName < b.CompanyName) return -1;
						if (a.CompanyAdd > b.CompanyAdd) return 1;
						if (a.CompanyAdd < b.CompanyAdd) return -1;
						if (a.ProductLineName > b.ProductLineName) return 1;
						if (a.ProductLineName < b.ProductLineName) return -1;
						if (a.InspectionID > b.InspectionID) return 1;
						if (a.InspectionID < b.InspectionID) return -1;
						if (a.DosFormsType > b.DosFormsType) return 1;
						if (a.DosFormsType < b.DosFormsType) return -1;
						if (a.InspDate > b.InspDate) return 1;
						if (a.InspDate < b.InspDate) return -1;
						if (a.InspTypeName > b.InspTypeName) return 1;
						if (a.InspTypeName < b.InspTypeName) return -1;
					});

					/*
										objDoc2.map((a, i) => {
											if (objDoc2[i + 1]) {
												if (objDoc2[i].CompanyName == objDoc2[i + 1].CompanyName) {
													delete objDoc2[i];
												}
											}
										});
										*/

					console.log(objDoc2Scheduler);

					objDoc2Filtered = objDoc2Scheduler.filter(a => a != undefined);

					console.log(objDoc2Filtered);

					console.log(dispInspectionGrab);
					//console.log(inspectionMapDisp.getMarkers());
					/*
					inspectionMapDisp.getMarkers().forEach((marker)=>{
						marker.setMap(null);
					});
					*/
					if (inspectionMarkersArr) {
						inspectionMarkersArr.forEach(marker => {
							marker.setMap(null);
						});
					}

					//inspectionTypeGrab
					if (!inspType) { //this should only execute on date manipulations, not on inspection manipulation
						populateInspectionDropDown(objDoc2Filtered);
					} else {
						alert('*Not populating');
						console.log('*Not populating')
						/*
						alert('___________________ not populating')
						if (!secondTimePop) {
							populateInspectionDropDown(objDoc2Filtered, secondTimePop);
						}
						*/
					}

					inspectionMarkersArr = [];
					while (dispInspectionGrab.options.length) {
						dispInspectionGrab.remove(0);
					}

					while (dispPLGrab.options.length) {
						dispPLGrab.remove(0);
					}

					var objDoc2Filtered2 = objDoc2Filtered.filter((a, i) => {
						if (objDoc2Filtered[i + 1]) {
							return objDoc2Filtered[i].CompanyName != objDoc2Filtered[i + 1].CompanyName;
						} else {
							return true;
						}
					});

					console.log(objDoc2Filtered2);

					objDoc2Filtered2.forEach((a, i) => {
						dispInspectionGrab.options[i] = new Option(a.CompanyName);
						console.log(dispInspectionGrab);
						dispInspectionGrab.options[i].addEventListener('click', function () {
							//function to display ProductLines
							//dispProductL(objDoc2Again, this.innerHTML, dispInspectorInspnNow);
							alert('clicked CompanyOption');
							dispAdd(objDoc2Scheduler, this.innerHTML, dispInspectorInspnNow, objDoc2Again);
						});
						var inspectionMarkerOpts = {
							position: { lat: a.Latitude, lng: a.Longitude },
							map: inspectionMapDisp,
							title: a.CompanyName,
							draggable: true,
						}
						var inspectionMarker = new google.maps.Marker(inspectionMarkerOpts);
						inspectionMarkersArr.push(inspectionMarker);
					});





					if (dispInspectionGrab.options[0]) {
						dispInspectionGrab.options[0].click();
						assignButGrab.disabled = false;
					} else {
						//blank address select
						assignButGrab.disabled = true;
						while (dispAddressGrab.options.length) {
							dispAddressGrab.remove(0);
						}
					}
					dispInspectionGrab.selectedIndex = 0;
					console.log(inspectionMarkersArr);
					pendingInspections.click();


					if (objDecommit) {
						console.log(objDecommit.inspectionDetail.compName);
						var dispInspectionGrabMapArr = Array.from(dispInspectionGrab.options).map((item, i) => {
							return item.innerHTML;
						});
						console.log(dispInspectionGrabMapArr);
						var companyIndex = dispInspectionGrabMapArr.indexOf(objDecommit.inspectionDetail.compName);
						console.log(companyIndex);
						dispInspectionGrab.selectedIndex = companyIndex;
						dispInspectionGrab.options[dispInspectionGrab.selectedIndex].disabled = false;
						dispInspectionGrab.options[dispInspectionGrab.selectedIndex].click();

						var dispAddressGrabMapArr = Array.from(dispAddressGrab.options).map((item, i) => {
							return item.innerHTML;
						});
						var addressIndex = dispAddressGrabMapArr.indexOf(objDecommit.inspectionDetail.compAdd);
						console.log(dispAddressGrabMapArr);
						console.log(addressIndex);
						dispAddressGrab.selectedIndex = addressIndex;
						dispAddressGrab.options[dispAddressGrab.selectedIndex].disabled = false;
						dispAddressGrab.options[dispAddressGrab.selectedIndex].click();

						var dispPLGrabArr = Array.from(dispPLGrab.options).map((item, i) => {
							return item.innerHTML;
						});

						var pLIndex = dispPLGrabArr.indexOf(objDecommit.inspectionDetail.prodLine);
						console.log(pLIndex);
						console.log(dispPLGrabArr);
						dispPLGrab.selectedIndex = pLIndex;
						dispPLGrab.options[dispPLGrab.selectedIndex].disabled = false;

						//dispAddress.value = objDecommit2.inspectionDetail.compAdd;
						//dispAddress.click();
						//dispPLGrab.value = objDecommit2.inspectionDetail.prodLine;
					}
				}
				console.log(InspnBringObj.readyState, InspnBringObj.status);
				console.log('Anything called...');


				//console.log(objDoc2[1].Latitude);

			}
			console.log('End of call');
			//console.log(objDecommit);

			//used to reset highlights on Decommited (restored) inspections


		}


		function dispAdd(dataObjDoc2, compOption, dispInspectorInspnNow2, objDoc2Again) {
			console.log(dispAddressGrab);
			console.log(dataObjDoc2);
			console.log(compOption);
			var dispInspectorInspnNow2Options = dispInspectorInspnNowGrab.getElementsByTagName('option');
			var dispInspectorInspnNow2OptionsMap = Array.from(dispInspectorInspnNow2Options).map((aOption, i) => {
				console.log(aOption.innerText);
				console.log(i);
				console.log(aOption.innerText.slice(aOption.innerText.indexOf("(") + 1, aOption.innerText.length - 1));
				return (aOption.innerText.slice(aOption.innerText.indexOf("|") + 1, aOption.innerHTML.lastIndexOf('(')));

			});

			console.log(dispInspectorInspnNow2Options);
			console.log(dispInspectorInspnNow2OptionsMap);



			dataObjDoc2.sort(function (a, b) {
				if (a.CompanyName > b.CompanyName) return 1;
				if (a.CompanyName < b.CompanyName) return -1;
				if (a.CompanyAdd > b.CompanyAdd) return 1;
				if (a.CompanyAdd < b.CompanyAdd) return -1;
			});

			dataObjDoc2.map((a, i) => {
				if (dataObjDoc2[i + 1]) {
					if (dataObjDoc2[i].CompanyName == dataObjDoc2[i + 1].CompanyName && dataObjDoc2[i].CompanyAdd == dataObjDoc2[i + 1].CompanyAdd) {
						delete dataObjDoc2[i];
					}
				}
			});

			console.log(dataObjDoc2);
			var data2 = [];
			dataObjDoc2.map((a, i) => {
				if (a) {
					console.log(a);
					if (a.CompanyName == compOption) {
						console.log(a);
						data2.push(a);
					}
				}
			});

			console.log(data2);
			while (dispAddressGrab.options.length) {
				dispAddressGrab.remove(0);
			}

			var counter = 0;

			data2.forEach((objItem, i) => {

				if (dispInspectorInspnNow2OptionsMap.length) {
					if (dispInspectorInspnNow2OptionsMap.indexOf(objItem.CompanyAdd) == -1) {
						dispAddressGrab.options[counter] = new Option(objItem.CompanyAdd);
						dispAddressGrab.options[counter].addEventListener('click', function () {
							dispProductL(objDoc2Again, this.innerHTML, dispInspectorInspnNow2);
						});
						++counter;
					} else {
						var brandNewOption = new Option(objItem.CompanyAdd);
						//brandNewOption.disabled = true;
						dispAddressGrab.options[counter] = brandNewOption;
						dispAddressGrab.options[counter].addEventListener('click', function () {
							dispProductL(objDoc2Again, this.innerHTML, dispInspectorInspnNow2);
						});
						console.log(brandNewOption);
						brandNewOption.disabled = checkDispProductL(objDoc2Again, brandNewOption.innerHTML, dispInspectorInspnNow2);
						console.log(brandNewOption, brandNewOption.disabled);
						++counter;
						//dispAddressGrab.selectedIndex = counter;
					}
				} else {

					dispAddressGrab.options[counter] = new Option(objItem.CompanyAdd);
					dispAddressGrab.options[counter].addEventListener('click', function () {
						dispProductL(objDoc2Again, this.innerHTML, dispInspectorInspnNow2);
					});
					++counter;
				}

				/*
								if (objItem.CompanyName == compOption) {
									dispAddressGrab.options[counter] = new Option(objItem.CompanyAdd);
									dispAddressGrab.options[counter].addEventListener('click', function () {
										dispProductL(data2, this.innerHTML, dispInspectorInspnNow2);
									});
									counter++;
								}
				*/

			});
			//finding the first option that is not disabled;
			var firstEnabled;
			Array.from(dispAddressGrab.options).forEach((addItem, i) => {
				if (!addItem.disabled) {
					if (firstEnabled != undefined) {
						//do nothing; firstEnabled has being assigned.
					} else {
						firstEnabled = i; //setting it to the index of addItem;
					}
					console.log('Not disabled');
				}
			});
			console.log(firstEnabled);
			//firstEnabled = (firstEnabled ==undefined)?0:firstEnabled;
			if (firstEnabled != undefined) { //if there is an enabled option; this is to prevent calling the block with undefined as an option index
				dispAddressGrab.options[firstEnabled].selected = true;
				dispProductL(objDoc2Again, dispAddressGrab.options[firstEnabled].innerHTML, dispInspectorInspnNow2);
			}

		}


		function dispProductL(data, addOption, dispInspectorInspnNow2) {
			console.log(data);
			console.log(addOption);
			console.log(dispInspectorInspnNow2);
			var dispInspectorInspnNowGrab = document.getElementById('dispInspectorInspnNow');
			var dispInspectorInspnNow2Options = dispInspectorInspnNowGrab.getElementsByTagName('option');
			console.log(dispInspectorInspnNow2.children);
			console.log(dispInspectorInspnNow2.children.length);
			console.log(dispInspectorInspnNow2Options);
			console.log([...dispInspectorInspnNow2Options].length);
			console.log(dispInspectorInspnNow2Options.length);
			//console.log(dispInspectorInspnNow2Options[1].innerHTML);
			for (var a = 0; a > dispInspectorInspnNow2Options.length; a++) {
				console.log(a);
			}
			var dispInspectorInspnNow2OptionsMap = Array.from(dispInspectorInspnNow2Options).map((aOption, i) => {
				console.log(aOption.innerText);
				console.log(i);
				console.log(aOption.innerText.slice(aOption.innerText.indexOf("(") + 1, aOption.innerText.length - 1));
				return (aOption.innerText.slice(aOption.innerText.indexOf("(") + 1, aOption.innerText.indexOf(')')));
			});

			console.log(dispInspectorInspnNow2Options);
			console.log(dispInspectorInspnNow2OptionsMap);
			/*
						data.sort(function (a, b) {
							//if (a.CompanyName > b.CompanyName) return 1;
							//if (a.CompanyName < b.CompanyName) return -1;
							if (a.ProductLineName > b.ProductLineName) return 1;
							if (a.ProductLineName < b.ProductLineName) return -1;
						});
			*/
			data.map((a, i) => {
				if (data[i + 1]) {
					if (data[i].ProductLineName == data[i + 1].ProductLineName) {
						//Wow, to delete or not to delete; ProductLineNames may repeat themselves under many repetitions
						//Do delete these extra ones, or represent their numbers?
						delete data[i];
						console.log('deleting...');
					}
				}
			});

			console.log(data);
			while (dispPLGrab.options.length) {
				dispPLGrab.remove(0);
			}

			var counter = 0;

			inspIDArr = {};
			data.forEach((objItem, i) => {
				inspIDArr[objItem.ProductLineName] = objItem.InspectionID;
				if (objItem.CompanyAdd == addOption) {
					if (dispInspectorInspnNow2OptionsMap.length) {
						/*
						dispInspectorInspnNow2OptionsMap.forEach(nowItem => {
							if (objItem.ProductLineName != nowItem) {
								dispPLGrab.options[counter++] = new Option(objItem.ProductLineName);
							}

						})
						*/
						if (dispInspectorInspnNow2OptionsMap.indexOf(objItem.ProductLineName) == -1) {
							dispPLGrab.options[counter] = new Option(objItem.ProductLineName);

							dispPLGrab.options[counter].inspectionID = objItem.InspectionID;
							console.log(dispPLGrab.options[counter].inspectionID);
							++counter;
						} else {
							var brandNewOption = new Option(objItem.ProductLineName);
							brandNewOption.inspectionID = objItem.InspectionID;
							console.log(brandNewOption.inspectionID);
							brandNewOption.disabled = true;
							dispPLGrab.options[counter] = brandNewOption;
							//dispPLGrab.options[counter].selected = true;
							++counter;
							//console.log(counter);
							//dispPLGrab.options[counter].disabled = true;
							//console.log(counter);
						}
						//dispPLGrab.options[counter].selected = true;

					} else {
						dispPLGrab.options[counter] = new Option(objItem.ProductLineName);
						dispPLGrab.options[0].selected = true;
						++counter;

					}
				}
			});
			console.log(inspIDArr);
			//dispPLGrab.selectedIndex = 0;
			//dispPLGrab.options[0].selected = true;
			var enabledOpts = [];
			Array.from(dispPLGrab.options).forEach((arrItem, i) => {
				if (arrItem.disabled != true) {
					//alert('Trueeeeeeeeee-----eeeeeeeeeT');
					enabledOpts.push(i);
				}
			});
			console.log(enabledOpts);
			//set options.selected to first member of array
			if (enabledOpts.length) {
				dispPLGrab.options[enabledOpts[0]].selected = true;
			}
		}


		function populateInspectionDropDown(obj, secondTimePop2) {
			alert('Populating....&&&&&&&&&&&&&&');
			console.log(obj);
			var objIncrement = {};
			obj.forEach(item => {
				objIncrement[item.InspTypeName] ? ++objIncrement[item.InspTypeName] : objIncrement[item.InspTypeName] = 1;
				//console.log(objIncrement);
				//console.log(item);
			});
			console.log(objIncrement);
			while (inspectionTypeGrab.options.length) {
				inspectionTypeGrab.remove(0);
			}

			var counter = 0;
			for (d in objIncrement) {
				if (objIncrement.hasOwnProperty(d)) {
					inspectionTypeGrab.options[counter] = new Option(d + '(' + objIncrement[d] + ')');
					console.log(objIncrement[d]);
					++counter;
				}
			};
			//inspectionTypeGrab.value = inspectionTypeGrab.options[0];
			//if you want to see all the inspections, comment this bottom line out (call to InspectionBring)
			alert(inspectionTypeGrab.value);
			if (secondTimePop2) { //true, meaning second call with inspectionTypeGrab.value
				InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value, false);
			} else {
				//don't refresh
			}

		}
		//used to determine if maximum PL have been reached
		function checkDispProductL(data, addOption, dispInspectorInspnNow2) {
			console.log(data);
			console.log(addOption);
			console.log(dispInspectorInspnNow2);
			var dispInspectorInspnNowGrab = document.getElementById('dispInspectorInspnNow');
			var dispInspectorInspnNow2Options = dispInspectorInspnNowGrab.getElementsByTagName('option');
			console.log(dispInspectorInspnNow2.children);
			console.log(dispInspectorInspnNow2.children.length);
			console.log(dispInspectorInspnNow2Options);
			console.log([...dispInspectorInspnNow2Options].length);
			console.log(dispInspectorInspnNow2Options.length);
			//console.log(dispInspectorInspnNow2Options[1].innerHTML);
			for (var a = 0; a > dispInspectorInspnNow2Options.length; a++) {
				console.log(a);
			}
			var dispInspectorInspnNow2OptionsMap = Array.from(dispInspectorInspnNow2Options).map((aOption, i) => {
				console.log(aOption.innerText);
				console.log(i);
				console.log(aOption.innerText.slice(aOption.innerText.indexOf("(") + 1, aOption.innerText.length - 1));
				return (aOption.innerText.slice(aOption.innerText.indexOf("(") + 1, aOption.innerText.indexOf(')')));
			});

			console.log(dispInspectorInspnNow2Options);
			console.log(dispInspectorInspnNow2OptionsMap);
			/*
						data.sort(function (a, b) {
							//if (a.CompanyName > b.CompanyName) return 1;
							//if (a.CompanyName < b.CompanyName) return -1;
							if (a.ProductLineName > b.ProductLineName) return 1;
							if (a.ProductLineName < b.ProductLineName) return -1;
						});
			*/
			data.map((a, i) => {
				if (data[i + 1]) {
					if (data[i].ProductLineName == data[i + 1].ProductLineName) {
						delete data[i];
						console.log('deleting...')
					}
				}
			});

			console.log(data);

			var counter = 0
			var disabledCounter = 0;

			data.forEach((objItem, i) => {
				if (objItem.CompanyAdd == addOption) {
					++counter;
					if (dispInspectorInspnNow2OptionsMap.length) {
						console.log(objItem);
						console.log(dispInspectorInspnNow2OptionsMap);
						if (dispInspectorInspnNow2OptionsMap.indexOf(objItem.ProductLineName) != -1) {
							++disabledCounter;
						}

					}
				}
			});
			console.log(disabledCounter);
			console.log(counter);
			console.log(disabledCounter == counter);
			return disabledCounter == counter;
		}

		function pendingInspectorsBring(staTypeGrabValue, dispInspectorGrabValueArr, fromDateLimitInspectorGrabValue, toDateLimitInspectorGrabValue, dispInspectorInspnPendGrab) {
			//alert(dispInspectorGrabValueArr);
			console.log(dispInspectorGrabValueArr);
			alert('Bringing pending for inspectors');
			inspTypeVal = (inspectionTypeGrab.value).slice(0, (inspectionTypeGrab.value).indexOf('('));
			console.log(inspTypeVal);

			var pendXmlObject = new XMLHttpRequest();
			//var str = 'inspType' + inspTypeVal + '&state = ' + staTypeGrabValue + ' & inspector=' + dispInspectorGrabValueArr + ' & fromDate=' + fromDateLimitInspectorGrabValue + ' & toDate=' + toDateLimitInspectorGrabValue;
			var str = 'state=' + staTypeGrabValue + '&inspector=' + dispInspectorGrabValueArr + '&fromDate=' + fromDateLimitInspectorGrabValue + '&toDate=' + toDateLimitInspectorGrabValue;
			var jsonStr = JSON.stringify(str);
			pendXmlObject.open('GET', 'getPendingInpInspr?' + str, true); //without regard to Inspection

			pendXmlObject.responseType = 'json';
			pendXmlObject.send(null);
			console.log(str);
			pendXmlObject.onreadystatechange = function () {
				if (pendXmlObject.readyState == 4 && pendXmlObject.status == 200) {
					console.log(pendXmlObject.readyState);
					console.log(pendXmlObject.response);
					objPending = pendXmlObject.response;
					console.log(objPending);
					pendingOptions(objPending, dispInspectorInspnPend);
				}
			}

		}

		function pendingOptions(objPending2, dispInspectorInspnPendGrab) {
			/*
				Array.from(dispInspectorGrab.options).forEach(opt => {
					objInspectionsPending[opt] = [];
				});
			*/
			console.log(objPending2);
			var dispInspectorGrabArr = Array.from(dispInspectorGrab.options).map(arr => {
				return arr.innerHTML;
			});

			console.log(dispInspectorGrabArr);
			dispInspectorGrabArr.forEach(arr => {
				objInspectionsPending[arr] = {};
			})
			console.log(objInspectionsPending);

			while (dispInspectorInspnPendGrab.options.length) {
				dispInspectorInspnPendGrab.remove(0);
			}

			objPending2.forEach((insp, i) => {
				Object.keys(objInspectionsPending).forEach(objKey => {
					var firstName = objKey.split(" ")[1];
					var lastName = objKey.split(" ")[0];
					if (insp.InspFirstName == firstName && insp.InspLastName == lastName) {
						console.log('Iteration count: ', i, insp.InspTypeName);
						//objInspectionsPending[objKey].push(insp.CompanyName + '|' + insp.CompanyAdd + '|' + insp.ProductLineName + '|' + insp.InspTypeName);

						if (objInspectionsPending[objKey][insp.InspTypeName]) { //if inspection exists on the inspectorname, then skip the property creation, push values.
							objInspectionsPending[objKey][insp.InspTypeName].push(insp.CompanyName + '|' + insp.CompanyAdd + '|' + insp.ProductLineName + '|' + insp.InspTypeName);
						} else { //else create it
							objInspectionsPending[objKey][insp.InspTypeName] = [];
							objInspectionsPending[objKey][insp.InspTypeName].push(insp.CompanyName + '|' + insp.CompanyAdd + '|' + insp.ProductLineName + '|' + insp.InspTypeName);
						}
					}

				})
			});
			console.log(objInspectionsPending);
			//dispInspectorInspnPendGrab.options[i] = new Option(insp.CompanyName + '|' + insp.CompanyAdd + '|' + insp.ProductLineName + '|' + insp.InspTypeName);
			//dispInspectorInspnPendGrab.options = objInspectionsPending[dispInspectorGrab.value];

			console.log(inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('(')));
			console.log(dispInspectorGrab.value);
			console.log(objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))]);
			objInspectionsPending[dispInspectorGrab.value][inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))].forEach((arrItem, i) => { //all that splice information returns the inspection name in inspectionTypeGrab.value
				dispInspectorInspnPendGrab.options[i] = new Option(arrItem);
			})

			//objInspectionsPending[dispInspectorGrab.value] = dispInspectorInspnPendGrab.options;

			//console.log(objInspectionsPending);

			console.log(objInspectionsPending);
			console.log(dispInspectorInspnNowGrab)
			console.log(dispInspectorInspnPendGrab);
			console.log(dispInspectorInspnNowGrab.options.length)
			console.log(dispInspectorInspnPendGrab.options.length);
			console.log(objPending2);

			//Later unmute
			//inspectorObjToChart((dispInspectorInspnNowGrab.options).length, (dispInspectorInspnPendGrab.options).length);

		}

		function inspectorObjToChart(now, pend) {
			alert('Charting...');
			console.log(now);
			console.log(pend);

			//[inspectionTypeGrab.value.slice(0, inspectionTypeGrab.value.indexOf('('))]
			var inspectorNamesArr = Object.keys(now);
			console.log(inspectorNamesArr);
			var inspectorNamesArr2 = inspectorNamesArr.map((arrItem, i) => {
				//for (arrItem in now) {
				console.log(arrItem);
				//if (now.hasOwnProperty(arrItem)) {
				console.log('Yeah');
				return {
					inspectorName: arrItem,
					inspection: pend[arrItem],
					now: now[arrItem]
				}
				//}
				//}
			})
			//InpsectorChartD3([now, pend]);
			console.log(inspectorNamesArr2);
			InpsectorChartD3(inspectorNamesArr2);
		}

		function sortInspectResult(obj1) {
			obj1.sort(function (a, b) {
				if (a.CompanyName > b.CompanyName) return 1;
				if (a.CompanyName < b.CompanyName) return -1;
				if (a.CompanyAdd > b.CompanyAdd) return 1;
				if (a.CompanyAdd < b.CompanyAdd) return -1;
			});

			console.log(obj1);
			var obj1Clean = [];
			console.log(obj1Clean);
			for (var a = 0; a < obj1.length; a++) {
				console.log(a);
				if (obj1[a + 1]) {
					if (obj1[a].CompanyName == obj1[a + 1].CompanyName && obj1[a].CompanyAdd == obj1[a + 1].CompanyAdd) { //by their product id you shall...
						console.log('Skipped');
						//objSkipArr.push(obj1[a]);
					} else {
						obj1Clean.push(obj1[a]);
					}

				} else {
					obj1Clean.push(obj1[a]);
				}
			}
			return obj1Clean;
		}


		function sortInspectResultWithoutDate(obj1) {
			obj1.sort(function (a, b) {
				if (a.CompanyName > b.CompanyName) return 1;
				if (a.CompanyName < b.CompanyName) return -1;
				if (a.CompanyAdd > b.CompanyAdd) return 1;
				if (a.CompanyAdd < b.CompanyAdd) return -1;
			});

			console.log(obj1);
			var obj1Clean = [];
			console.log(obj1Clean);
			for (var a = 0; a < obj1.length; a++) {
				console.log(a);
				if (obj1[a + 1]) {
					if (obj1[a].CompanyName == obj1[a + 1].CompanyName && obj1[a].CompanyAdd == obj1[a + 1].CompanyAdd) { //by their product id you shall...
						console.log('Skipped');
						//objSkipArr.push(obj1[a]);
					} else {
						obj1Clean.push(obj1[a]);
					}

				} else {
					obj1Clean.push(obj1[a]);
				}
			}
			return obj1Clean;
		}

		function nextAble(theSelectCtrl) { //optionInd
			console.log(theSelectCtrl);
			alert('Inside nextAble!');
			var nextAbleArr = [];
			var nextAbleArrItem2 = []
			Array.from(theSelectCtrl.options).forEach((arrItem, i) => {
				if (!arrItem.disabled) {
					nextAbleArrItem2.push(arrItem);
					nextAbleArr.push(i);
				}
			});
			console.log(nextAbleArr);
			console.log(nextAbleArrItem2);
			return nextAbleArr;
		}

		function assignInspector(selectCtrl, dispPL, dispAddress2, toSelectCtrl, prodCat) {
			//assignResult = assignResult? assignResult: [];
			console.log('Assigning...');
			alert('Assigning...');
			assignResult = [];
			var options = dispPL && dispPL.options;
			var opt;

			console.log(options);

			for (var i = 0, iLen = options.length; i < iLen; i++) {
				opt = options[i];

				if (opt.selected) {
					if (opt.disabled != true) { //to prevent assigning disabled product lines
						assignResult.push(opt.value || opt.text);
					}
				}
			}
			console.log(assignResult);
			console.log(prodCatGrab);

			if (assignResult.length) { //productLines selected
				assignResult.forEach((item, i) => {
					Array.from(dispPL.options).forEach((selItem, j) => {
						//console.log(selItem);
						if (item == selItem.text) {
							//dispPL.remove(j);
							dispPL.options[j].disabled = true;
							//alert(dispPL.options[j + 1] ? (dispPL.options[j + 1].disabled != true ? j + 1 : j) : j);
							//dispPL.selectedIndex = dispPL.options[j + 1] ? (dispPL.options[j + 1].disabled != true ? j + 1 : j) : j; //highlight falls on next option if not disabled. if no next option, it remains.
							dispPL.selectedIndex = dispPL.options[j + 1] ? (dispPL.options[j + 1].disabled != true ? j + 1 : (nextAble(dispPL)).length ? nextAble(dispPL)[0] : j) : (nextAble(dispPL)).length ? nextAble(dispPL)[0] : j; //highlight falls on next option if not disabled. if no next option, it remains.

							//dispPL.selectedIndex = ((j + 1) && (dispPL.options[j + 1].disabled != true)) ? j + 1 : j; //highlight falls on next option. if no next option, it remains.
							var optAdd = document.createElement('option');
							Array.from(selectCtrl.options).forEach((compItem, k) => {
								if (compItem.selected) {
									console.log(compItem);
									optAdd.text = compItem.text + "(" + item + ")" + '|' + dispAddress.options[dispAddress.selectedIndex].text + '(' + toInspectionType.value + ')' + '*' + prodCatGrab.value + '*';
									//console.log(inspIDArr[k]);
									//optAdd.insptnID = selectCtrl.inspIDArr[k];
									toSelectCtrl.add(optAdd);
									console.log(optAdd);
									inspectorObject[dispInspectorGrab.options[dispInspectorGrab.selectedIndex].text] = Array.from(toSelectCtrl.options).map(arrItem => {
										return arrItem.innerHTML;
									});
									console.log(inspectorObject);
								}

								/*
								var dispPLOptCount = 0;
								Array.from(dispPL.options).forEach((pLItem, l) => {
									if (pLItem.disabled) {
										console.log(pLItem.text, ' disabled');
										++dispPLOptCount;
									}
									if (dispPL.options.length == dispPLOptCount) {
										selectCtrl.remove(k);
									}
								});
								*/
							});
							var dispPLOptCount = 0;
							var dispAddOptCount = 0;
							Array.from(dispPL.options).forEach((pLItem, l) => {
								if (pLItem.disabled) {
									console.log(pLItem.text, ' disabled');
									++dispPLOptCount;
								}
								if (dispPL.options.length == dispPLOptCount) {
									alert('dispPl =dispCount');
									//selectCtrl.remove(selectCtrl.selectedIndex);	
									dispAddress2.options[dispAddress2.selectedIndex].disabled = true;
									//dispAddress2.selectedIndex = dispAddress2.options[l + 1] ? (dispAddress2.options[l + 1].disabled != true ? l + 1 : l) : l; //highlight falls on next option if not disabled. if no next option, it remains.
									//dispAddress2.selectedIndex = (dispAddress2.options[dispAddress2.selectedIndex + 1]) ? dispAddress2.selectedIndex + 1 : dispAddress2.selectedIndex; //shifting it to next option
									console.log(dispAddress2.selectedIndex);
									dispAddress2.selectedIndex = dispAddress2.options[dispAddress2.selectedIndex + 1] ? (dispAddress2.options[dispAddress2.selectedIndex + 1].disabled != true ? dispAddress2.selectedIndex + 1 : (nextAble(dispAddress2)).length ? nextAble(dispAddress2)[0] : dispAddress2.selectedIndex) : (nextAble(dispAddress2)).length ? nextAble(dispAddress2)[0] : dispAddress2.selectedIndex; //highlight falls on next option if not disabled. if no next option, it remains.
									dispAddress2.options[dispAddress2.selectedIndex].click();
								}
							});
							console.log(dispPL.options.length);
							console.log(dispPLOptCount);

							Array.from(dispAddress2.options).forEach((addItem, l) => {
								if (addItem.disabled) {
									//console.log(pLItem.text, ' disabled');
									++dispAddOptCount;
								}
								if (dispAddress2.options.length == dispAddOptCount) {
									console.log(dispAddOptCount);
									//selectCtrl.remove(selectCtrl.selectedIndex);
									selectCtrl.options[selectCtrl.selectedIndex].disabled = true;;
								}
							});
							console.log(dispAddress2.options.length);
							console.log(dispAddOptCount);

						}
					});


				});
				var itemDisabled = 0;
				Array.from(dispPLGrab.options).forEach((item, i) => {
					if (item.disabled) {
						++itemDisabled;
					}
				}); //if all options are disabled

				if (itemDisabled == dispPLGrab.options.length) {
					Array.from(dispPLGrab.options).forEach((item, i) => {
						dispPLGrab.remove(0);
					});
				}

				//check for all PL options disabled.


			} else {
				/*
				// if no productLine is selected, remove everything, and the Company
				//this seems like old piece of code;is it even still desirable?
				console.log(assignResult.length);
				Array.from(dispPL.options).forEach((selItem, j) => {
					//dispPL.remove(0);
					dispPL.options[j].disabled = true;
					var optAdd = document.createElement('option');
					Array.from(selectCtrl.options).forEach((compItem, k) => {
						if (compItem.selected) {
							optAdd.text = compItem.text + "(" + selItem.text + ")";
							toSelectCtrl.add(optAdd);
						}
		
					});
				});
		
				Array.from(selectCtrl.options).forEach((compItem, k) => {
					if (compItem.selected) {
						selectCtrl.remove(k);
					}
				});
				*/
			}
			//Later unmute
			//inspectorObjToChart(toSelectCtrl.options.length, dispInspectorInspnPendGrab.options.length);
		}

		function DeAssignInspector(selectCtrl, toSelectCtrl, dispPL) {
			//assignResult = []; //reset this, as you have 
			var transToSelectCtrlArr;
			//deAssignResult = deAssignResult ? deAssignResult : [];
			deAssignResult = [];

			var options = selectCtrl && selectCtrl.options;
			var opt;

			for (var i = 0, iLen = options.length; i < iLen; i++) {
				opt = options[i];

				if (opt.selected) {
					deAssignResult.push(opt.value || opt.text);
				}
			}
			console.log(deAssignResult);

			deAssignResult.forEach((item, i) => {
				Array.from(selectCtrl.options).forEach((selItem, j) => { //is this necessary?
					//	console.log(selItem);
					console.log(item);
					if (item == selItem.text) { //is this necessary?
						selectCtrl.remove(j);
						inspectorObject[dispInspectorGrab.options[dispInspectorGrab.selectedIndex].text] = Array.from(selectCtrl.options);
						console.log(inspectorObject);
						var textToOptions = Array.from(toSelectCtrl.options).map(toItem => {
							return toItem.text;
						});

						var textToAddOptions = [];
						Array.from(dispAddress.options).map(addItem => {
							if (!addItem.disabled) {
								textToAddOptions.push(addItem.text);
							}
						});
						console.log(textToOptions);
						var pLName = item.slice(item.indexOf('(') + 1, item.indexOf('|') - 1);
						var compName = item.slice(0, item.indexOf('('));
						var addName = item.slice(item.indexOf('|') + 1, item.lastIndexOf('('));

						console.log(pLName);
						console.log(compName);
						console.log(addName);


						if (textToOptions.indexOf(compName) == -1) {
							console.log(item.slice(0, item.indexOf('(')));
							var optAdd = document.createElement('option');
							optAdd.text = compName;

							optAdd.addEventListener('click', function () {
								//function to display ProductLines
								dispProductL(objDoc2, this.innerHTML, selectCtrl);
							});
							toSelectCtrl.add(optAdd); //add the company name

							//add the productLine to dispPL
							var optAdd2 = document.createElement('option');
							optAdd2.text = pLName;
							dispPL.add(optAdd2);
						} else {
							console.log('Company Exists');
							Array.from(toSelectCtrl.options).forEach((compItem, j) => {
								if (compName == compItem.innerHTML) {
									console.log(compName);
									console.log(compItem.innerHTML);
									toSelectCtrl.options[j].disabled = false;
									toSelectCtrl.options[j].click(); //to refresh, giving fresh address list;
									toSelectCtrl.options[j].selected = true;
								} else {
									toSelectCtrl.options[j].selected = false;
								}
							});
							//add the productLine to dispPL
							/*
							var optAdd2 = document.createElement('option');
							optAdd2.text = pLName;
							dispPL.add(optAdd2);
							*/
						}
						console.log(textToAddOptions);
						if (textToAddOptions.indexOf(addName) == -1) {
							console.log('entered')
							Array.from(dispAddress.options).forEach(addItem => {
								if (addItem.text == addName) {
									addItem.disabled = false;
									console.log(addItem.text, addName);
								}
							});

						} else {
							//Do nothing;
						}

						//transToSelectCtrlArr = Array.from(toSelectCtrl.options)
						//alert(new Option(item).innerHTML);
						//toSelectCtrl.options.add(item, 0);
						//objDoc2Filtered.push(item);
					}
				});


			});
			//Later unmute
			//inspectorObjToChart(selectCtrl.options.length, dispInspectorInspnPendGrab.options.length);

		}

		InpsectorChartD3 = function (trackArrSummaryAvg) {
			alert('-------------------------------------------Loaded');
			console.log(inspectorChartGrab);
			var inspectorChartGrab = document.getElementById('inspectorChart');

			for (var a = 0; a < inspectorChartGrab.children.length; a++) { //clear old chart in view of recharting
				console.log('removing...')
				inspectorChartGrab.removeChild(inspectorChartGrab.children[a]);
			}

			var heightVar = 50;
			var canvasWidth = 1200;
			var canvasHeight = 400;
			var fontSize = 'smaller';
			var axesFont = "14px sans-serif";

			console.log(trackArrSummaryAvg);
			var data = trackArrSummaryAvg;
			var trackArrSummaryAvg2 = [...trackArrSummaryAvg];

			var maxArr = [];
			var maxArrLength = [];
			console.log(trackArrSummaryAvg2);

			trackArrSummaryAvg2.forEach(arrItem => {
				for (b in arrItem) {
					if (arrItem.hasOwnProperty(b)) {
						for (var a in arrItem[b]) {
							if (arrItem[b].hasOwnProperty(a)) {
								if (Array.isArray(arrItem[b][a])) {
									maxArrLength.push(arrItem[b][a].length);

								}
							}
						}
					}
				}

			});

			//	console.log(maxArr);
			console.log(maxArrLength);

			//var trackArrSummaryAvg3 = Object.assign({}, trackArrSummaryAvg);//{ ...trackArrSummaryAvg };


			var datAxesPos = trackArrSummaryAvg.length * (heightVar + 2) + 2;
			//work on this
			var widthScale = d3.scale.linear().domain([0, d3.max(maxArrLength)]).range([0, canvasWidth]); //d3.extent

			var axes = d3.svg.axis().ticks(10).scale(widthScale);

			var canvas = d3
				.select(".inspectorChart")
				.append("svg")
				.attr("height", canvasHeight)
				.attr("width", canvasWidth);
			console.log(canvas);

			var canvasG = canvas
				.append('g')
				.selectAll("g")
				.data(data)
				.enter()
				.append("g").attr('class', 'gInspection');



			/*
						[...gInspectionGrab].forEach((arrItem) => {
							//gInspectionGrabArr.push(arrItem.children.length);
							//should be
							console.log(arrItem);
							console.log(arrItem.getElementsByTagName('rect'));
							console.log(arrItem.getElementsByTagName('rect')[0].length);
							console.log(arrItem.children);
							console.log(arrItem.children.length);
							gInspectionGrabArr.push(arrItem.children.length);
			
						});
			
			console.log(gInspectionGrabArr);
			canvasG.attr('height', (d, i) => {
				return gInspectionGrabArr[i] * 600;
			});
*/
			//Actual
			//console.log(canvasG);
			canvasG
				.selectAll('rect')
				.data((d) => {
					console.log(d);
					var datArr = [];
					var datArr2 = [];
					var datArr3 = [];
					var datArr4 = [];
					for (var a in d) {
						console.log(d);
						console.log(a);
						if (d.hasOwnProperty(a)) {
							var obj = {};
							if (a == 'inspection') {
								//console.log('Entered Inspection...');
								for (var b in d[a]) {
									if (d[a].hasOwnProperty(b)) {
										obj[b] = d[a][b].length;
										console.log(obj);
										//datArr4.push(obj);
										console.log(b);
										console.log(d[a]);
										datArr.push(d[a][b].length);
										datArr2.push({ b: d[a][b].length });
										datArr3.push([b, d[a][b].length]);
									}

								}
							}
							if (d == 'now') { //('now' in d)
								//console.log('...now here');
								obj['now'] = d['now'].length;
								datArr4.push(obj);
								console.log(datArr4);
								alert('This is the array... ');
								alert(datArr4);
								return datArr4;
							} else {
								console.log('...in the else part')
								datArr4.push(obj);
								console.log(datArr4);
								alert('This is the array:');
								alert(datArr4[0]);
								return datArr4;
							}
						}

					}
				})
				.enter()
				.append("rect")
				.attr("fill", function (d, i) {
					return "green";
				})
				.attr("y", function (d, i) {
					//return i * (100 + 2);
					return i * (heightVar + 2);
				})
				.attr("height", function (d) {
					return heightVar;
				})
				.attr("width", function (d, i) {
					console.log(d);
					for (var a in d) {
						if (d.hasOwnProperty(a)) {
							console.log(d[a]);
							console.log(widthScale(d[a]));
							return (widthScale(d[a])); //initials
						}
					}

				});

			//console.log(datArr4);

			canvasG
				.append("rect")
				.attr("fill", function (d, i) {
					return "orange"; //datCol[i];
				})
				.attr("y", function (d, i) {
					//return i * (100 + 2) + 50;
					return i * (heightVar + 2);

				})
				.attr("height", function (d) {
					return heightVar;
				})
				.attr("width", function (d, i) {
					console.log(d);
					return (widthScale(d.now.length));
				});

			var gInspectionGrabArr = [];
			//document.addEventListener("DOMContentLoaded", function (e) {
			alert('-------------------------------------------Loaded')
			var gInspectionGrab = document.getElementsByClassName('gInspection');
			console.log(gInspectionGrab);
			console.log(gInspectionGrab.length);
			console.log(gInspectionGrab[0]);
			for (var a = 0; a < gInspectionGrab.length; a++) {
				console.log(gInspectionGrab[a])
				console.log(gInspectionGrab[a].getElementsByTagName('rect'))
				console.log(gInspectionGrab[a].getElementsByTagName('rect')[0]);
				console.log(gInspectionGrab[a].getElementsByTagName('rect').length);
				console.log(gInspectionGrab[a].children.length);
				gInspectionGrabArr.push(gInspectionGrab[a].getElementsByTagName('rect').length);
			}
			//});
			console.log(gInspectionGrabArr);

			canvasG.attr("transform", (d, i) => {
				if (i == 0) {
					console.log('Here how many times')
					return "translate(100,0)";
				} else {
					var sum = 0;
					for (var d = 0; d < i; d++) {
						sum += gInspectionGrabArr[d];
					}
					console.log(sum);
					//return "translate(100," + gInspectionGrabArr[i] * heightVar + ")";
					return "translate(100," + sum * heightVar + ")";
				}
				//return "translate(100,10)"
			});
			/*
						attr('height', (d, i) => {
							return gInspectionGrabArr[i] * heightVar;
						});
						*/
			/*
				  canvasG
					.append("text")
					.text(function (d, i) {
					  return d.sumInspections[Object.keys(d.sumInspections)[0]];
					})
					.attr("x", function (d, i) {
					  return widthScale(d.sumInspections[Object.keys(d.sumInspections)[0]]);
					})
					.attr("y", function (d, i) {
					  return i * (heightVar + 2) + heightVar / 2;
					})
					.attr("font-size", fontSize);
			
				  //Expected
				  canvasG
					.append("rect")
					.attr("fill", "pink")
					.attr("y", function (d, i) {
					  return i * (heightVar + 2);
					})
					.attr("height", heightVar)
					.attr("width", function (d, i) {
					  console.log(Object.keys(d)[1]);
					  return widthScale(d.sumInspections[Object.keys(d.sumInspections)[1]]);
					});
			
				  canvasG
					.append("text")
					.text(function (d, i) {
					  return (
						d.sumInspections[Object.keys(d.sumInspections)[1]] +
						" (" +
						Math.floor((d.sumInspections[Object.keys(d.sumInspections)[1]] /
						  d.sumInspections[Object.keys(d.sumInspections)[0]]) *
						  100) +
						"%)"
					  );
					})
					.attr("fill", "pink")
					.attr("x", function (d, i) {
					  return widthScale(d.sumInspections[Object.keys(d.sumInspections)[1]]);
					})
					.attr("y", function (d, i) {
					  return i * (heightVar + 2) + heightVar / 2;
					})
					.attr("font-size", fontSize);
			
				  //Listing the insepections.
				  canvasG //text for the bar.  It always refers to the first property in each object in the array
					.append("text")
					.text(function (d, i) {
					  return Object.keys(d.sumInspections)[0];
					})
					.attr("x", function (d, i) {
					  //this is why groups are good: they help transformations.
					  return -60;
					})
					.attr("y", function (d, i) {
					  return i * (heightVar + 2) + heightVar / 2;
					})
					.attr("font-size", fontSize)
					.on("click", InspectionOutlier);
			
				  
					*/
			/*
				canvasG
					.append("text")
					.text(dispInspectorGrab.value)
					.attr("transform", `translate(0,${datAxesPos + 20})`)
	*/

			canvas
				.append("g")
				.style("font", axesFont)
				.attr("transform", `translate(100,${datAxesPos})`)
				.call(axes);
		}//end of function

		/*
				InpsectorChartD3 = function (trackArrSummaryAvg) {
					console.log(inspectorChartGrab);
					var inspectorChartGrab = document.getElementById('inspectorChart');
		
					for (var a = 0; a < inspectorChartGrab.children.length; a++) { //clear old chart in view of recharting
						console.log('removing...')
						inspectorChartGrab.removeChild(inspectorChartGrab.children[a]);
					}
		
					var heightVar = 50;
					var canvasWidth = 1200;
					var canvasHeight = 400;
					var fontSize = 'smaller';
					var axesFont = "14px sans-serif";
		
					console.log(trackArrSummaryAvg);
					var data = trackArrSummaryAvg;
					var trackArrSummaryAvg2 = [...trackArrSummaryAvg];
		
					var maxArr = [];
					var maxArrLength = [];
					console.log(trackArrSummaryAvg2);
		
					trackArrSummaryAvg2.forEach(arrItem => {
						for (b in arrItem) {
							if (arrItem.hasOwnProperty(b)) {
								for (var a in arrItem[b]) {
									if (arrItem[b].hasOwnProperty(a)) {
										if (Array.isArray(arrItem[b][a])) {
											maxArrLength.push(arrItem[b][a].length);
											
										}
									}
								}
							}
						}
		
					});
		
					//	console.log(maxArr);
					console.log(maxArrLength);
		
					//var trackArrSummaryAvg3 = Object.assign({}, trackArrSummaryAvg);//{ ...trackArrSummaryAvg };
		
		
					var datAxesPos = trackArrSummaryAvg.length * (heightVar + 2) + 2;
					//work on this
					var widthScale = d3.scale.linear().domain([0, d3.max(maxArrLength)]).range([0, canvasWidth]); //d3.extent
		
					var axes = d3.svg.axis().ticks(10).scale(widthScale);
		
					var canvas = d3
						.select(".inspectorChart")
						.append("svg")
						.attr("height", canvasHeight)
						.attr("width", canvasWidth);
					console.log(canvas);
		
					var canvasG = canvas
						.selectAll("rect")
						.data(data)
						.enter()
						.append("g")
						.attr("transform", "translate(100,10)");
		
					//Actual
					console.log(canvasG);
					canvasG
						.append("rect")
						.attr("fill", function (d, i) {
							return "pink";;
						})
						.attr("y", function (d, i) {
							return i * (100 + 2);
						})
						.attr("height", function (d) {
							return heightVar;
						})
						.attr("width", function (d, i) {
							console.log(d);
							return (widthScale(d.inspection['Initial'].length)); //initials
		
						});
					canvasG
						.append("rect")
						.attr("fill", function (d, i) {
							return "yellow"; //datCol[i];
						})
						.attr("y", function (d, i) {
							return i * (100 + 2) + 50;
						})
						.attr("height", function (d) {
							return heightVar;
						})
						.attr("width", function (d, i) {
							console.log(d);
							return (widthScale(d.now.length));
						});
		
					canvasG
						.append("text")
						.text(dispInspectorGrab.value)
						.attr("transform", `translate(0,${datAxesPos + 20})`)
		
		
					canvas
						.append("g")
						.style("font", axesFont)
						.attr("transform", `translate(100,${datAxesPos})`)
						.call(axes);
				}//end of function
		*/
		function openDropDown(tabId, elmnt, color) {

			var tablinkGrab = document.getElementsByClassName('tablink2');
			for (var a = 0; a < tablinkGrab.length; a++) {
				tablinkGrab[a].style.backgroundColor = '';
			}

			var tabcontentGrab = document.getElementsByClassName('dispInspectorInspn');
			for (var a = 0; a < tabcontentGrab.length; a++) {
				tabcontentGrab[a].style.display = 'none';
				console.log('Hiding...');

			}

			var tabIdGrab = document.getElementById(tabId);
			tabIdGrab.style.display = 'block';
			tabIdGrab.style.backgroundColor = color;
			elmnt.style.outline = '2px inset powderblue';

			elmnt.style.backgroundColor = color;

		}

		function commitInspection(nowInsp, inspSelected) {
			var xmlCommitObj = new XMLHttpRequest();
			console.log(dispInspectorInspnNowGrab.options);
			var nowArrObj = {
				//nowArr:
				//inspector:
			};
			nowArrObj.nowArr = [];
			nowArrObj.inspIDArr = [];
			nowArrObj.inspIDAdd = [];
			nowArrObj.inspIDArrId = [];
			//nowArrObj.inspector = [];

			//nowArrObj.nowArr = [];
			Array.from(dispInspectorInspnNowGrab.options).forEach(nowItem => {
				console.log(nowItem);
				nowArrObj.nowArr.push(nowItem.innerHTML);

				//used in extracting productLine
				var startIndex = nowItem.innerText.indexOf("(");
				var endIndex = nowItem.innerText.indexOf(")");

				//used in extracting address from now select
				var startIndexAdd = nowItem.innerText.indexOf("|");
				var endIndexAdd = nowItem.innerText.lastIndexOf("(");

				//used in extracting inspection Type from now select
				var startIndexInspType = nowItem.innerText.lastIndexOf("(");
				var endIndexAddInspType = nowItem.innerText.lastIndexOf(")");

				//used in extracting company from now select
				var endIndexCompanyName = nowItem.innerText.indexOf("(");


				var itemAddress = nowItem.innerText.slice(startIndexAdd + 1, endIndexAdd);
				nowArrObj.inspIDAdd.push(itemAddress);
				nowArrObj.inspIDArr.push(nowItem.innerText.slice(startIndex + 1, endIndex));
				var prodLineName = nowItem.innerText.slice(startIndex + 1, endIndex);
				var inspTypeName = nowItem.innerText.slice(startIndexInspType + 1, endIndexAddInspType);
				var compNameToUse = nowItem.innerText.slice(0, endIndexCompanyName);
				console.log(compNameToUse, ",", prodLineName, ",", itemAddress, ",", inspTypeName);

				//Deassign selects last inspection, instead of inspection with newInsertId
				var getInspIDsVar = getInspIDs(compNameToUse, prodLineName, itemAddress, inspTypeName);
				console.log(getInspIDsVar);
				nowArrObj.inspIDArrId.push(getInspIDsVar); //push array into array
				console.log(nowItem.innerHTML);

			});
			nowArrObj.inspector = dispInspectorGrab.value;
			nowArrObj.category = prodCat.value;
			//Do we have to give it the name of the toInspection? 

			console.log(nowArrObj.inspIDArr);

			nowArrObj.inspIDArr.forEach((arrItem, i) => {
				//nowArrObj.inspIDArrId.push(inspIDArr[arrItem]);
			})

			console.log(nowArrObj);

			//nowArrObj.inspector = dispInspectorGrab.value;
			console.log(nowArrObj);

			var nowArrString = JSON.stringify(nowArrObj);
			console.log(nowArrString);
			console.log(nowArrObj);
			xmlCommitObj.open('POST', 'commitInspection', true);
			xmlCommitObj.responseType = 'text';
			xmlCommitObj.setRequestHeader('Content-Type', 'application/json');
			//xmlCommitObj.send(nowArrString);
			xmlCommitObj.send(nowArrString);

			xmlCommitObj.onreadystatechange = function () {
				alert('Calling');
				console.log('Calling');
				if (xmlCommitObj.readyState == 4 && xmlCommitObj.status == 200) {
					alert('Successful');
					console.log('Return successfully now');
					console.log(xmlCommitObj.responseText);

					//Blank the now select
					console.log(inspectorObject[dispInspectorGrab.value]);

					console.log('Blanking...');
					inspectorObject[dispInspectorGrab.value] = [];
					while (dispInspectorInspnNowGrab.options.length) {
						dispInspectorInspnNowGrab.remove(0);
					}

					//Update the pending select
					pendingInspectorsBring(staTypeGrab.value, dispInspectorGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value);

				}
			}

		}

		function DeCommitInspection() {
			alert(dispInspectorInspnPendGrab.value);
			console.log(dispInspectorInspnPendGrab.value);

			var xmlDeCommit = new XMLHttpRequest();
			xmlDeCommit.open('POST', 'deCommitInspection', true);
			xmlDeCommit.responseType = 'text';
			xmlDeCommit.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
			var deCommitStr = 'InspDetail=' + dispInspectorInspnPendGrab.value + '&inspector=' + dispInspectorGrab.value;
			xmlDeCommit.send(deCommitStr);

			xmlDeCommit.onreadystatechange = function () {
				if (xmlDeCommit.readyState == 4 && xmlDeCommit.status == 200) {
					var objDecommit = xmlDeCommit.responseText;
					pendingInspectorsBring(staTypeGrab.value, dispInspectorGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value);
					console.log('Committed');
					console.log(objDecommit);
					var objDecommit2 = JSON.parse(objDecommit);
					console.log(objDecommit2);
					InspectionBring(inspectionTypeGrab.value, fromDateLimitGrab.value, toDateLimitGrab.value, staTypeGrab.value, objDecommit2);
					console.log(dispInspectionGrab);
					/*
					console.log(objDecommit2.inspectionDetail.compName);
					var dispInspectionGrabMapArr = Array.from(dispInspectionGrab.options).map((item, i) => {
						return item.innerHTML;
					});
					console.log(dispInspectionGrabMapArr);
					var companyIndex = dispInspectionGrabMapArr.indexOf(objDecommit2.inspectionDetail.compName);
					console.log(companyIndex);
					dispInspectionGrab.selectedIndex = companyIndex;
					dispInspectionGrab.options[dispInspectionGrab.selectedIndex].click();
					*/
					//dispAddress.value = objDecommit2.inspectionDetail.compAdd;
					//dispAddress.click();
					//dispPLGrab.value = objDecommit2.inspectionDetail.prodLine;

					//Refresh


				}
			}
		}

		function getInspIDs(compNameToUse2, prodLineName, itemAddress2, inspTypeName2) {//inspector agnostic -that's why we are not filtering by inspector
			//var inspectorCommitArr = inspectorCommit.split(" ");
			//console.log(inspectorCommitArr);
			console.log(objPending);
			console.log(objDoc2Scheduler2);
			var prodLineArr = [];
			objDoc2Scheduler2.forEach((arrItem, i) => {

				//because a productLine may occur in two addresses; we filter by productLine and Address
				if (arrItem.CompanyName == compNameToUse2 && arrItem.ProductLineName == prodLineName && arrItem.CompanyAdd == itemAddress2 && arrItem.InspTypeName == inspTypeName2) {// && arrItem.InspFirstName == inspectorCommitArr[1] && arrItem.InspLastName == inspectorCommitArr[0]
					prodLineArr.push(arrItem.InspectionID); //If this fails, remove the product line array
				}
			});

			console.log(prodLineArr);
			return prodLineArr;

		}
		google.maps.event.addDomListener(window, 'load', StartOver);


	</script>



	<!--[if IE]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
</head>

<body onload='DissapearLoader();'>
	<!--
<div width = "60%" height = "60%" id = "d3ChartID" class = "d3ChartClass">
	<div><img src = '/ProfilePicsFoldera/cancel.png' /></div>
</div>
-->
	<button class="tablink" onclick="openPage('Profile',this, 'mistyrose')" id='defaultTab'>Profile</button>
	<button class="tablink" onclick="openPage('Scheduler',this, '#e6fff4')">Scheduler</button>
	<button class="tablink" onclick="openPage('Compliance ...and Training',this, 'OldLace')">Compliance ...and
		Training!</button>
	<button class="tablink" onclick="openPage('OverSight',this, 'LightCyan')">OverSight</button>
	<button class="tablink" onclick="openPage('Archive',this, 'AliceBlue')">Archive</button>


	<div id='Profile' class='tabcontent'>
		<button class='tabProfilelink' onclick="openProfileSubTab('profile', this, 'mistyrose')" id='defaultSubTab'>My
			Profile</button>
		<button class='tabProfilelink' onclick="openProfileSubTab('dashboard', this, 'snow')">Dashboard</button>
		<div class='tabsubcontent' id='profile'>
			<h1>My Profile</h1>
			<div id='profDiv'>
				<img src='/ProfilePicsFoldera/image.png' id='profImg' width='500' height='500'
					alt='Image goes in here'></img>
				<img src='' id='profImg2' width='500' height='500' alt='Another Image goes in here'></img>
				<button id='profUploadBut' value='Upload'></button>
				<form method="post" enctype="multipart/form-data" action="/upload">
					<input type="file" name="fileProfile">
					<input type="submit" value="Submit">
					<input type='button' id='getProfile' onClick='GetProPic()' value='Get Pic' />
				</form>
			</div>
		</div>
		<div class='tabsubcontent' id='dashboard'>
			<h1>Dashboard</h1>
			<button id='addDash' onclick='AddDashboard();'>Add Dashboard</button>
			<button id='combinate'>Combinate</button>
			<div class='dashboarda' id='dashboarda'>
				<div class='newDiv2' id='newDivId'></div>
			</div>
		</div>
		<div></div>
	</div>

	<div id='Scheduler' class='tabcontent' class='prada'>
		<h1>Scheduler</h1>
		<div>
			State:
			<select id='staType' class='inspectionType'>
			</select>
		</div>

		<div>
			Inspection:
			<select id='inspectionType' class='inspectionType'>
			</select>
			From:<input type='date' class='scheduleDateLimit' id='fromDateLimit' />
			To:<input type='date' class='scheduleDateLimit' id='toDateLimit' />
			<select id='dispInspection' size='5' multiple='true'>
				<option>Company here</option>
				<option></option>
			</select>
			<select id='dispAddress' size='5' multiple='true'>
				<option>Address here</option>
			</select>
			<input type='button' value='Assign' id='assignBut'
				onclick="assignInspector(dispInspection, dispPL, dispAddress, dispInspectorInspnNow)"></input>
			<select id='dispPL' class='dispPL' size="5" multiple='true'>
				<option>PL here</option>
			</select>
			<select name="toInspectionType" id='toInspectionType' class="toInspectionType"></select>
			<select id="prodCat" name='prodCat'>
				<option>Drug</option>
			</select>
		</div>
		<div>
			<select id='dispInspector' size='5'>
			</select>
			<div class='dispInspectorInspnDiv'>
				<button class='tablink2' id='allInspections'
					onclick="openDropDown('dispInspectorInspnAll',this, 'mistyrose')">All</button>
				<button class='tablink2' id='pendingInspections'
					onclick="openDropDown('dispInspectorInspnPend',this, 'pink')">Pending</button>
				<button class='tablink2' id='nowInspections'
					onclick="openDropDown('dispInspectorInspnNow',this, 'skyblue')">Now</button>
				<input type="checkbox" value='transfer'></input>
				<select class='dispInspectorInspn' id='dispInspectorInspnAll' size='5'>
					<option>Inspector All Inspections</option>
				</select>
				<select class='dispInspectorInspn' id='dispInspectorInspnPend' size='5'>
					<option>Inspector Pend Inspections</option>
				</select>
				<select class='dispInspectorInspn' id='dispInspectorInspnNow' size='5' multiple=true>
				</select>
				<select id='assignHistory' class='assignHistory'>
				</select>
				<button id='deAssign' class='deAssign'
					onclick="DeAssignInspector(dispInspectorInspnNow, dispInspection, dispPL)">DeAssign</button>
				<button id='deCommit' class='deCommit'>DeCommit</button>
				<button id='commitInsp' class='commitInsp'
					onclick="commitInspection(dispInspectorInspnNow,dispInspector )">Commit</button>
			</div>

			From:<input type='date' class='scheduleDateLimitInspector' id='fromDateLimitInspector' />
			To:<input type='date' class='scheduleDateLimitInspector' id='toDateLimitInspector' />

			<div class='divCheckInspection'>
				All:<input class='checkInspection' id='checkInspectionDone' type='checkbox' value='all' />
				Pending:<input class='checkInspection' id='checkInspectionPending' type='checkbox' value='pending' />
				Now:<input class='checkInspection' id='checkInspectionNow' type='checkbox' value='now' />
			</div>
		</div>
		<div id='inspectorChart' class='inspectorChart'>

		</div>
		<div id='inspectionMap' class='inspectionMap'>

		</div>
	</div>
	<div id='Compliance' class='tabcontent'>
		<h1>Compliance</h1>
	</div>

	<div id='OverSight' class='tabcontent'>
		<br />
		<header class="header" id="headerBar" style="z-index:0">
			<h1 style="font-size:20px;cursor:pointer" class="openNavClass" onclick="openNav()">&#9776; Open</h1>
		</header>
		<div id="mapOver"></div>

		<div id="navForm" class="geolocateNav"></div>


		<!--
		<div id = "navUIForm" class= "uiFormNav">
			<a href="javascript:void(0)" class="closeNavForm" onclick="closeNavForm();console.log('This is now navForm'); console.log(navForm)">&times;</a>
		</div>
		-->

		<div id="weeklyForm" class="weeklyNav">
			<!--	
			<a href="javascript:void(0)" class="closeNavForm" onclick="closeNavForm()">&times;</a>
			-->
		</div>


		<div id="queryTabOver"></div>


		<br /><br /><br />


		<div class="arrange">
			<input type="button" id='geolocateBut' class='geolocateBut' value='Geolocate' onclick='GeolocateOver()' />
		</div>
		<div class="arrange">
			<input type="button" id='scanBut' class='scanBut' value='Scan' />
		</div>
		<div class="arrange">
			<input type="button" class='weeklyReportBut' value="Weekly Report" id="butOver" onclick="popOver()" />
			<select id='selReport' name='selReport' onchange='AdjustWeekly(this)'>
				<option value='7'>7Days</option>
				<option value='14'>14Days</option>
				<option value='30'>30Days</option>
				<option value='Other'>Archive</option>
			</select>
		</div>

		<div id='dashWeekly'></div>

		<div class='CompChart'>
			<table>
				<tr>
					<td id='CompChartPlot' class='CompChartPlot'></td>
				</tr>
			</table>
		</div>

		<div class="loader" id='loaderContainer'>
			<svg viewBox="0 0 32 32" width="32" height="32">
				<circle id="spinner" cx="16" cy="16" r="14" fill="none"></circle>
			</svg>
		</div>



		<!--
		<input type="button" value="Fetch" onclick ="HalfQuery();" ><br/>
		<input type="button" value="ElVal" onclick = "ElValCreate()" />
		-->

		<br />

		<div id="imageAppend"></div>


		<table>
			<tr>
				<td>
					<div id="stateScanParent" class="stateScanParentClass"></div>
				</td>
				<td>
					<div id="inspScanParent" class="inspScanParentClass"></div>
				</td>
			</tr>
			<tr>
				<td id="chartCell" class="chartCellClass">
					<div id="chartDiv" name="chartDivName" class="chartDivClass1" style="display:flex">
						<div id="Charts" style="flex: 1"></div>
						<div id="Charts2" style="flex: 1"></div>
					</div>
				</td>
				<td id="chartCell2" class="chartCellClass">
					<div id="chartDiv2" name="chartDivName2" class="chartDivClass2" style="display:flex">
						<div id="Charts3" style="flex: 1"></div>
						<div id="Charts4" style="flex: 1"></div>
					</div>
				</td>
			</tr>
			<tr>
				<td id="panelCell">
					<div id="panelRenderContainer" class="panelRenderContainerClass">
						<div id="panelRender" class='panelRenderClass'></div>
						<div id="newPanelRender" class='NewpanelRenderClass'></div>
					</div>
				</td>
			</tr>
		</table>



		<div id="MEDashboard">
			<table class="">
				<tr>
					<td>
						<div id="MENumFilter"></div>
					</td>
					<td>
						<div id="MECatFilter"></div>
					</td>
				</tr>
				<tr>
					<td>
						<div id="MEChartBar"></div>
					</td>
					<td>
						<div id="MEChartPie"></div>
					</td>
					<td>
						<div id="MEChartColumn"></div>
					</td>
					<td>
						<div id="MEChartLine"></div>
					</td>
					<td>
						<div id="MEChartTable"></div>
					</td>
				</tr>
				<td>
					<div id="MEChartEditor" style="width:600px;height:400px;"></div>
				</td>
			</table>

		</div>
	</div>

	<div id='geoDiv' class='backy2' width='400' height='500'>
		<Form action='registrationMapNoC-Node' , method='POST' id='regForm'>
			<table class='tabPres' border='0' id='regFormTab'>
				<tr>
					<td></td>
					<td><label>Name of Company</label><br /><input required name='regNoC' id='regNoC' type='text'
							onkeyup='CompanyOptionsCall2A(regNoCA)'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Choose</label><br /><select size='4' name='nocSelName' id='nocSelName'
							onchange='BridgeAddRegulatedProductLine()'></select></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Latitude</label><br /><input name='regLat' id='regLat' type='text'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Longitude</label><br /><input name='regLong' id='regLong' type='text'></input></td>
				</tr></br>" +
				<tr>
					<td></td>
					<td><label>Company Address</label><br /><input required name='regCompAddress' id='regCompAddress'
							type='text' placeholder='Company Address'></input><input type='button' value=' New '
							id='newAdd' onclick='newAddress(this);'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Company Address</label><br /><select size=4 name='nocSelAdd' id='nocSelAdd'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>State</label><br /><select required name='regPlace' id='regPlace'></select></td>
				</tr> +
				<tr>
					<td></td>
					<td><label>Contact Person</label><br /><input required name='regContPers' id='regContPers'
							type='text' Placeholder='Name of Contact Person'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Email</label><br /><input required name='regEmail' id='regEmail' type='email'></input>
					</td>
				</tr>
				<tr>
					<td></td>
					<td><label>Regulated Product</label><br /><select id='regRegProd' name='regPLL[0][PL][ProdLineCat]'
							onchange='BridgeAddRegulatedProductLine(); ChangeDosageForm();'></select><input
							type='button' value='Add Product Line' class='formButs' id='regPLBut'></input></td>
				</tr>
				<tr id='regFormTabRow'>
					<td></td>
					<td><label>Recommendation</label><br /><input required name='regRecomm' id='regRecomm'
							type='text'></input></td>
				</tr>
				<tr>
					<td></td>
					<td><label>Team Lead</label><br /><select name='regTL' id='regTL' onfocus='PopStaff();'
							onclick='console.log(this.name)' required></select></td>
				</tr>
				<tr>
					<td></td>
					<td><input name='regButton' type='submit' value='Submit' class='submitBut'></input></td>
				</tr>
				<tr border='0'>
					<td colspan='2' align='center'><label id='statusLab'></label></td>
				</tr>
			</table>
		</Form>
	</div>





	<div id='Archive' class='tabcontent'>
		<h1>Archive</h1>
		<div id='geoDivA' class='backy2A' width='400' height='500'>
			<div class='divForm'>
				<Form action='registrationMapNoC-Node' , method='POST' id='regFormA' class='regFormACl'>
					<table class='tabPres' border='0' id='regFormTabA'>
						<tr>
							<td></td>
							<td><input type='button' value='EditMode' name='editBut' class='editBut' id='editBut'
									onClick='EditArc()' /></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Name of Company</label><br /><input required name='regNoC' class='formInpt'
									id='regNoCA' type='text' onkeyup='CompanyOptionsCall2A(regNoCA)'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Choose</label><br /><select size='4' name='nocSelName' class='formInpt'
									id='nocSelNameA' onchange='BridgeAddRegulatedProductLineA()'></select></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Latitude</label><br /><input name='regLat' class='formInpt' id='regLatA'
									type='text' value='0.00' readonly></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Longitude</label><br /><input name='regLong' class='formInpt' id='regLongA'
									type='text' value='0.00' readonly></input></td>
						</tr></br>
						<tr>
							<td></td>
							<td><label>Company Address</label><br /><input required class='formInpt'
									name='regCompAddress' id='regCompAddressA' type='text'
									placeholder='Company Address'></input><input type='button' value=' New ' id='newAdd'
									onclick='newAddress(this);'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Company Address</label><br /><select size=4 class='formInpt' name='nocSelAdd'
									id='nocSelAddA'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>State</label><br /><select required class='formInpt' name='regPlace'
									id='regPlaceA'></select></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Contact Person</label><br /><input required class='formInpt' name='regContPers'
									class='formInpt' id='regContPersA' type='text'
									Placeholder='Name of Contact Person'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Email</label><br /><input required class='formInpt' name='regEmail'
									id='regEmailA' type='email'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Regulated Product</label><br /><select id='regRegProdA' class='formInpt'
									name='regPLL[0][PL][ProdLineCat]'
									onchange='BridgeAddRegulatedProductLine(); ChangeDosageForm();'></select><input
									type='button' value='Add Product Line' class='formButs' id='regPLButA'></input></td>
						</tr>
						<tr id='regFormTabRowA'>
							<td></td>
							<td><label>Recommendation</label><br /><input required class='formInpt' name='regRecomm'
									id='regRecommA' type='text'></input></td>
						</tr>
						<tr>
							<td></td>
							<td><label>Team Lead</label><br /><select class='formInpt' name='regTL' id='regTLA'
									onfocus='PopStaffA();' onclick='console.log(this.name)' required></select></td>
						</tr>
						<tr>
							<td></td>
							<td><input name='regButton' type='submit' class='formInpt' value='Submit'
									class='submitBut'></input></td>
						</tr>
						<tr border='0'>
							<td colspan='2' align='center'><label id='statusLabA'></label></td>
						</tr>
					</table>
				</Form>
			</div>
		</div>

		<div>

			<script type='text/javascript'>
				//var regEmailAGrab;
				function GeoInpt2() {

					//alert('Loaded the Div for Archive!');
					console.log('I just clicked marker; this is geodivAGrab');
					console.log(geoDivAGrab);

					console.log('Attaching...');
					console.log(geoDivAGrab);
					//console.log(geoDivAGrab.cloneNode(true));

					console.log('DIV: ');
					console.log(document.getElementById('geoDiv'));


					geoDivAGrab = document.getElementById('geoDivA');
					editButGrab = document.getElementById('editBut');
					nocSelNameADiv = document.getElementById('nocSelNameA');
					nocSelNameADiv.addEventListener('click', function () {
						alert('Setting company name');
						editBut.style.display = 'inline';
						if (editPass) {
							alert('Truthy');
						}

						regNoCADiv.value = this.options[this.selectedIndex].text;
						for (var a = 0; a < xmlAuto.companyName.length; a++) {
							if (regNoCADiv.value == xmlAuto.companyName[a].name) {
								var addressVal = xmlAuto.companyName[a].add;
								console.log(a);
								break;
							}
						}
						console.log('ADDRESS: ');
						regCompAddressAGrab = document.getElementById('regCompAddressA');
						regCompAddressAGrab.readOnly = true; //boolean value
						regCompAddressAGrab.style.backgroundColor = 'white';
						regCompAddressABool = true;
						regCompAddressAGrab.value = addressVal;
						console.log(this.options[this.selectedIndex].text);
						selNoC = this.options[this.selectedIndex].text;
						console.log('------');
						AutoProcessAddressA(xmlAuto, selNoC);
						xmlAutoInptProdLine2A(xmlAuto, this.options[this.selectedIndex].text, addressVal);
						//EnumerateProduct();
						//ProdAutoComp();
						//ResetStrength();
						//ResetNRN();

						/*
						if (regFormTabAGrab.getElementsByClassName('PLRow2').length==0) {
							AddRegulatedProductLineNoCA();
							RearrangePL(regFormTabAGrab,pLName);
							console.log('Added Class...');
						}
						*/

						if (regFormTabAGrab.getElementsByClassName('PLRow2').length != 0) {
							console.log('Removing');

							while (regFormTabAGrab.getElementsByClassName('PLRow2').length) {
								regFormTabAGrab.removeChild(regFormTabAGrab.getElementsByClassName('PLRow2')[0]);
							}
						}

						//console.log('Choosing...!');
						if (!editPass) {
							AddRegulatedProductLineNoCA();
						} else {
							for (var a = 0; a < productLineArr2.length; a++) {
								AddRegulatedProductLineNoCA(null, a);
							}
						}
						RearrangePL(regFormTabAGrab, pLName);
						//AutoLineFill(xmlAuto);

					});
					console.log('this is nocSelNameADiv');
					console.log(nocSelNameADiv);
					nocSelAddAGrab = document.getElementById('nocSelAddA');
					console.log('This is nocSelAddAGrab');
					console.log(nocSelAddAGrab);
					nocSelAddAGrab.addEventListener('click', function () {
						regCompAddressAGrab = document.getElementById('regCompAddressA');
						regCompAddressAGrab.readOnly = 'true';
						regCompAddressBoolA = true;
						regCompAddressAGrab.style.backgroundColor = 'white';
						regCompAddressAGrab.value = this.options[this.selectedIndex].text;
						console.log(this.options[this.selectedIndex].text);
						console.log('------');
						console.log(regCompAddressAGrab);
						xmlAutoInptProdLine2A(xmlAuto, regNoCADiv.value, this.options[this.selectedIndex].text);

						console.log('Pre-Length: ' + regFormTabAGrab.getElementsByClassName('PLRow2').length);

						if (regFormTabAGrab.getElementsByClassName('PLRow2').length != 0) {
							console.log('Removing');
							/*
							for (var d=0;d< regFormTabAGrab.getElementsByClassName('PLRow2').length;d++){
								regFormTabAGrab.removeChild(regFormTabAGrab.getElementsByClassName('PLRow2')[d]);
							}
							*/
							while (regFormTabAGrab.getElementsByClassName('PLRow2').length) {
								regFormTabAGrab.removeChild(regFormTabAGrab.getElementsByClassName('PLRow2')[0]);
							}
						}
						//Reset number
						numInpts = 0;
						pLName.plNum = 0; //this can go?
						AddRegulatedProductLineNoCA();
						RearrangePL(regFormTabAGrab, pLName);
						console.log('Added Class...');
						console.log('Length: ' + regFormTabAGrab.getElementsByClassName('PLRow2').length);
						console.log(regFormTabAGrab.getElementsByClassName('PLRow2'));


					});
					regLatAGrab = document.getElementById('regLatA');
					regLngAGrab = document.getElementById('regLngA');
					regFormTabAGrab = document.getElementById('regFormTabA');
					regEmailAGrab = document.getElementById('regEmailA');
					regContPersAGrab = document.getElementById('regContPersA');
					regTLAGrab = document.getElementById('regTLA');
					regPlaceAGrab = document.getElementById('regPlaceA');
					console.log(statesArr);
					for (var a = 0; a < statesArr.length; a++) {
						regPlaceAGrab.options[a] = new Option(statesArr[a]);
						regPlaceAGrab.options[a].value = statesArr[a];
					}
					regPlaceAGrab.addEventListener('click', function () { alert(this.name); });
					console.log('This is email: ');
					console.log(regEmailAGrab);
					for (var a = 0; a < statesArr.length; a++) {
						regPlaceAGrab.options[a] = new Option(statesArr[a]);
						regPlaceAGrab.options[a].value = statesArr[a];
					}



					console.log(regFormTabAGrab);
					console.log('Grabbing regFormTabRowAGrab...');
					regFormTabRowAGrab = document.getElementById('regFormTabRowA');
					console.log(regFormTabRowAGrab);
					//regRowPNGrab = document.getElementById('regRowPN');
					regFormTabAGrab = regFormTabRowAGrab.parentNode;

					regRegProdAGrab = document.getElementById('regRegProdA');

					//regRegProdAGrab.value = 'Drug';
					for (var a = 0; a < regulatedProductsArr.length; a++) {
						regRegProdAGrab.options[a] = new Option(regulatedProductsArr[a]);
						regRegProdAGrab.options[a].value = regulatedProductsArr[a];
					}
					regRegProdAGrab.selectedIndex = 3;
					/*
					regPLButAGrab = document.getElementById('regPLButA');
					console.log('Product Line button has been grabbed: '+ regPLButAGrab);
					
					regPLButAGrab.addEventListener('click', function() {AddRegulatedProductLine();});
					*/

					//var geoDivDiv = document.getElementById('geoDiv');
					//geoDivDiv.className = 'backy2';

					//regNoCADiv =document.getElementsByName('regNoCA');
					regNoCADiv = document.getElementById('regNoCA');
					regNoCADiv.addEventListener('blur', function () {
						if (nocSelNameADiv.options.length == 0) {
							//SelectToInput(false);
						} else {
							//SelectToInput(true);	
						}
					});









					statusLabAGrab = document.getElementById('statusLabA'); //for displaying status of upload
					/*
					regRowPNGrab = document.getElementById('regRowPN');
					regCellPLGrab = document.getElementById('regCellPL');
					regCellPNGrab = document.getElementById('regCellPN');
					regCellStGrab = document.getElementById('regCellSt');
					regPLGrab = document.getElementById('regPL');
					regCellPNSelGrab = document.getElementById('regCellPNSel');
					regCellSCGrab =  document.getElementById('regCellSC');
					regCellDFGrab = document.getElementById('regCellDF');
					
					newRegPLGrab = document.getElementById('newRegPL');
					newRegPNGrab = document.getElementById('newRegPN');
					*/

					//newRegPLGrab.addEventListener('click',NewRegPLGrabFunc);
					function NewRegPLGrabFunc() {
						if (newRegPLGrabBool == true) {
							newRegPNGrabBool = true; //Product has to be new for ever new productline
							console.log('About to remove main PL');
							regCellPLGrab.removeChild(regPLGrab);
							regPLGrab = document.createElement('input');
							regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', 'regPLL[0][PL][ProdLine]');
							regPLGrab.setAttribute('placeholder', 'Input new ProductLine');
							regCellPLGrab.insertBefore(regPLAGrab, regPLButAGrab);
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							this.innerHTML = 'Old?';
							newRegPLGrabBool = false;
							NewRegPNGrabFunc();
						} else {
							console.log('Resetting2...');
							regCellPLGrab.removeChild(regPLGrab);
							regPLGrab = document.createElement('select');
							regPLGrab.setAttribute('name', 'regPLL[0][PL][ProdLine]');
							regPLGrab.addEventListener('change', function () {
								NewSingleProduct(false);
								EnumerateProduct();
								console.log('Ensuring selectbox is in place...');
								//NewSingleProduct(false);
								ProdAutoComp();
								console.log('CALLING STRENGTH...');
								ResetStrength();
								ResetNRN();
							});
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							/*
							if () {
								NewRegPNGrabFunc();	
							}
							*/

							xmlAutoInptProdLine(xmlAuto, nocSelNameADiv.options[nocSelNameADiv.selectedIndex].text);
							//NewRegPNGrabFunc()
							NewSingleProduct(false);
							//EnumerateProduct();
							ProdAutoComp();
							ResetStrength();
							ResetNRN();
							regCellPLGrab.insertBefore(regPLAGrab, regPLButAGrab);
							regPLGrab.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							this.innerHTML = 'New?';
							console.log('Before...');
							newRegPLGrabBool = true;
							console.log('After...');
						}
					}

					//newRegPNGrab.addEventListener('click', NewRegPNGrabFunc);
					function NewRegPNGrabFunc() {
						console.log('Init value PN: ' + newRegPNGrabBool);
						console.log('Init value PL: ' + newRegPLGrabBool);
						console.log('Clicking for bool');
						if (newRegPNGrabBool == true) {
							console.log('Thhis is val of bool: ' + newRegPNGrabBool);
							NewSingleProduct(newRegPNGrabBool);
							newRegPNGrab.innerHTML = 'Old?';
							newRegPNGrabBool = false;
							console.log('Now: ' + newRegPNGrabBool);
							console.log('Now: ' + newRegPLGrabBool);
						} else {

							if (newRegPLGrabBool == false) {
								console.log('Terminating function...');
								return;
								//NewRegPLGrabFunc();
							} else {
								console.log('Val of PL Bool:' + newRegPLGrabBool);
								console.log('Thhis is val of bool2: ' + newRegPNGrabBool);
								NewSingleProduct(newRegPNGrabBool);
								newRegPNGrab.innerHTML = 'New?';
								console.log('Setting it to true');
								newRegPNGrabBool = true;
								console.log('Now2: ' + newRegPNGrabBool);
								console.log('Now2: ' + newRegPLGrabBool);
							}
						}
					}

					function NewSingleProduct(newRegPNGrabBool) {
						if (newRegPNGrabBool == true) {
							console.log('About to remove main Product');
							regCellPNGrab.removeChild(regPNDiv);
							regCellStGrab.removeChild(regStGrab);

							regPNDiv = document.createElement('input');
							regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductName]');
							regPNDiv.setAttribute('placeholder', 'Input new Product');
							//regPNDiv.addEventListener ('click', function () {console.log('Name is: '+this.name)});

							/*
							regPNDiv.addEventListener('change', function () {
																			console.log('Added back...');
																			ProdAutoComp();
																			ResetStrength();
																			ResetNRN();
																			});
							
							
							*/

							while (regDFGrab.length > 0) {
								regDFGrab.remove(0);
								console.log('Wiping off...!');
							}

							for (var a = 0; a < DERDFArr.length; a++) {
								regDFGrab.options[a] = new Option(DERDFArr[a]);
								console.log('Populating DF...');
							}


							regStGrab = document.createElement('input');
							regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductStrength]');

							regStGrab.removeEventListener('click', ResetNRN);
							regDFGrab.removeEventListener('click', ResetStrength);

							regCellPNGrab.appendChild(regPNDiv);
							regCellStGrab.appendChild(regStGrab);

							//newRegPNGrabBool=false;
							console.log('Input Prod Element');
							console.log('PL' + newRegPLGrabBool);
							console.log('PN' + newRegPNGrabBool);
						} else {
							console.log('Boolean value for product: ' + newRegPNGrabBool);
							regCellPNGrab.removeChild(regPNDiv);
							regCellStGrab.removeChild(regStGrab);

							regPNDiv = document.createElement('select');
							regPNDiv.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductName]');

							EnumerateProduct();
							ProdAutoComp();
							regPNDiv.addEventListener('click', function () { console.log('Name is: ' + this.name) });
							regPNDiv.addEventListener('change', function () {
								console.log('Added back...');
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});
							regStGrab = document.createElement('select');
							regStGrab.setAttribute('name', 'regPLL[0][PL][Pr][0][ProductStrength]');
							regStGrab.addEventListener('click', ResetStrength);
							regStGrab.addEventListener('click', ResetNRN);
							regDFGrab.addEventListener('click', ResetStrength);

							regCellPNGrab.appendChild(regPNDiv);
							regCellStGrab.appendChild(regStGrab);

							console.log('Select Prod Element');
							console.log('PL' + newRegPLGrabBool);
							console.log('PN' + newRegPNGrabBool);

							//this.innerHTML = 'New';												
							//newRegPNGrabBool=true;
						}
					}



					/*
					regPLGrab.addEventListener('change', function() {
																	console.log('Calling Enumerate...');
																	EnumerateProduct();
																	//ProdAutoComp();
																	ResetStrength();
																	ResetNRN();});
																	*/
					function EnumerateProduct() {
						//console.log(regPLGrab.options[regPLGrab.selectedIndex].text);
						productArr = [];
						productArr2 = [];
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCADiv.value) {
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									productArr.push(xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data);
									console.log(productArr);
								}
							} else {
								console.log('Not product line');
							}

						}


						//Trimming productArr
						console.log('Trimming for Product Name...');
						productArr.sort();
						//console.log(autoArr);
						for (var b = 0; b < productArr.length; b++) {
							if (productArr[b] == productArr[b + 1]) {
								delete productArr[b];
							}
						}

						for (var d = 0; d < productArr.length; d++) {
							if (productArr[d] != undefined) {
								productArr2.push(productArr[d]);
							}
						}


						while (regPNDiv.length > 0) {
							regPNDiv.remove(0);
						}

						for (var c = 0; c < productArr2.length; c++) {
							console.log(productArr2[c]);
							regPNDiv.options[c] = new Option(productArr2[c]);
							console.log('Updating Product Name...');
						}

					}



					regPLButAGrab = document.getElementById('regPLButA');

					regPLButAGrab.addEventListener('click', function () {
						alert('Adding produt line!');
						console.log('Length of options: ' + nocSelNameADiv.options.length);
						if (nocSelNameADiv.options.length == 0) {
							console.log('No company showing up');
							AddRegulatedProductLineNoCNewNoCNameA();
						} else {
							console.log('Now calling AddRegulatedProductLineNoC');
							AddRegulatedProductLineNoCA();
						}
						RearrangePL(regFormTabAGrab, pLName);

					});

					regFormAGrab = document.getElementById('regFormA'); //Grabbing form used for data capture
					regRecommAGrab = document.getElementById('regRecommA');
					//If form elements are incoherent, look into uncommenting this
					//regFormAGrab =regRecommAGrab.parentNode;
					console.log(regFormAGrab.childNodes);
					console.log('Form Childnode is: ' + regFormAGrab.childNodes[0].nodeName);


					function SelectToInput(boolVal) {
						console.log('Trying to convert from select to text');
						console.log(boolVal);

						//regCellSt
						var PLStoredName = regPLGrab.name;
						var PNStoredName = regPNDiv.name;
						var StStoredName = regStGrab.name;

						regCellPLGrab.removeChild(regPLGrab);
						regCellPNGrab.removeChild(regPNDiv);
						regCellStGrab.removeChild(regStGrab);
						//grab product name, strength, remove their element
						//Below perform and insertBefore the next column


						if (boolVal) {
							regPLGrab = document.createElement('select');
							//regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', PLStoredName);
							regPLGrab.setAttribute('id', 'regPL');
							regPLGrab.setAttribute('placeholder', 'New product line');

							regPLGrab.addEventListener('change', function () {
								EnumerateProduct();
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});


							regPNDiv = document.createElement('select');
							//regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', PNStoredName);
							regPNDiv.setAttribute('id', 'regPN');
							regPNDiv.setAttribute('placeholder', 'Input new product');
							//regPNDiv.addEventListener('click', function() {console.log(this.name)});
							regPNDiv.addEventListener('input', function () {
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});

							regStGrab = document.createElement('select');
							//regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', StStoredName);
							regStGrab.setAttribute('id', 'regSt');
							regStGrab.setAttribute('placeholder', 'Input new Strength');
							regStGrab.addEventListener('click', ResetNRN);
						} else {
							regPLGrab = document.createElement('input');
							regPLGrab.setAttribute('type', 'text');
							regPLGrab.setAttribute('name', PLStoredName);
							regPLGrab.setAttribute('id', 'regPL');
							regPLGrab.setAttribute('placeholder', 'New product line');

							regPLGrab.addEventListener('change', function () {
								EnumerateProduct();
								ProdAutoComp();
								ResetStrength();
								ResetNRN();
							});


							regPNDiv = document.createElement('input');
							regPNDiv.setAttribute('type', 'text');
							regPNDiv.setAttribute('name', PNStoredName);
							regPNDiv.setAttribute('id', 'regPN');
							regPNDiv.setAttribute('placeholder', 'Input new product');
							regPNDiv.addEventListener('click', function () { console.log(this.name) });
							regPNDiv.addEventListener('input', ProdAutoComp);

							regStGrab = document.createElement('input');
							regStGrab.setAttribute('type', 'number');
							regStGrab.setAttribute('name', StStoredName);
							regStGrab.setAttribute('id', 'regSt');
							regStGrab.setAttribute('placeholder', 'Input new Strength');
							regStGrab.addEventListener('click', ResetNRN);

						}
						//regFormATabGrab.insertBefore(regPLGrab, regRowPNGrab);//1
						regCellPLGrab.insertBefore(regPLAGrab, regPLButAGrab);
						regCellPNGrab.appendChild(regPNDiv);
						regCellStGrab.appendChild(regStGrab);
						//regCellPNGrab.insertBefore(regPNDiv, regCellPNSelGrab);
						//regCellStGrab.insertBefore(regStGrab, regCellSCGrab);
						//regCellPLGrab.innerHTML = regPLGrab;
						console.log('Replaced now no 2');
					}



					//alert ('Now getting it by ID');

					console.log('Company name selected...');
					console.log(nocSelNameADiv);





					regLatAGrab = document.getElementById('regLatA');
					//regLatAGrab.value = position.coords.latitude;
					regLngAGrab = document.getElementById('regLongA');
					//regLngAGrab.value = position.coords.longitude;
					pNSelNameDiv = document.getElementById('pNSelName');
					regCompAddressAGrab = document.getElementById('regCompAddressA');
					regDFGrab = document.getElementById('regDF');
					regStGrab = document.getElementById('regSt');
					regNRNGrab = document.getElementById('regNRN');
					regPNDiv = document.getElementById('regPN');
					//regPNDiv.addEventListener('change', ProdAutoComp);

					function ProdAutoComp() {
						console.log('I have been hit/ No strength now');
						dosFormArr = [], dosFormArr2 = [];
						console.log('Product: I have been clicked. No more company');
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCADiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == (regPLGrab.nodeName == 'SELECT' ? regPLGrab.options[regPLGrab.selectedIndex].text : regPLGrab.text)) {
									console.log(regPLGrab.nodeName);
									console.log('Product: I have been clicked. ProductLine');
									console.log('Pushing product...');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');
										regSCDiv.value = xmlAuto2Det[a].getElementsByTagName('SubClass')[0].firstChild.data;
										regGenDiv.value = xmlAuto2Det[a].getElementsByTagName('Gen')[0].firstChild.data;
										dosFormArr.push(xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data);
									}
								}
							}

						}

						//Clipping Arrays
						//prodArr.sort()
						dosFormArr.sort();
						//strengthArr.sort();
						console.log('Sorting...');


						for (var b = 0; b < dosFormArr.length; b++) {
							if (dosFormArr[b] == dosFormArr[b + 1]) {
								delete dosFormArr[b];
							}
						}

						for (var d = 0; d < dosFormArr.length; d++) {
							if (dosFormArr[d] != undefined) {
								dosFormArr2.push(dosFormArr[d]);
							}
						}

						//emptying select boxes
						while (regDFGrab.length > 0) {
							regDFGrab.remove(0);
						}

						for (var b = 0; b < dosFormArr2.length; b++) {
							regDFGrab.options[b] = new Option(dosFormArr2[b]);
						}
					}

					// Determining NRN
					//regDFGrab.addEventListener ('click', ResetStrength);
					function ResetStrength() {
						strengthArr = [], strengthArr2 = [];
						console.log('I have been clicked for Strength... and NRN');
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCADiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									console.log('Product: I have been clicked. ProductLine');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');

										if (xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data == regDFGrab.value) {
											//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
											strengthArr.push(xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data)
											//regStGrab.value = xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data;
											console.log('This is ResetStrength return value1: ' + a);
											console.log('Pushed into strengthArr');
											console.log(strengthArr);


										}
									}
								}
							}

						}


						console.log('We are sorting now!');
						strengthArr.sort();

						for (var b = 0; b < strengthArr.length; b++) {
							if (strengthArr[b] == strengthArr[b + 1]) {
								delete strengthArr[b];
							}
						}
						for (var d = 0; d < strengthArr.length; d++) {
							if (strengthArr[d] != undefined) {
								strengthArr2.push(strengthArr[d]);
							}
						}
						while (regStGrab.length > 0) {
							regStGrab.remove(0);
						}
						console.log('Populating select box');
						for (var c = 0; c < strengthArr2.length; c++) {
							regStGrab.options[c] = new Option(strengthArr2[c]);
						}
					}


					//regStGrab.addEventListener ('click', ResetNRN);
					function ResetNRN() {
						console.log('Strength AUTOCOMPLETE');
						nrnArr = [], nrnArr2 = [];
						for (var a = 0; a < xmlAuto2Det.length; a++) {
							if (xmlAuto2Det[a].getAttribute('NoC') == regNoCADiv.value) {
								console.log('Product: I have been clicked. Company');
								if (xmlAuto2Det[a].getElementsByTagName('PL')[0].firstChild.data == regPLGrab.options[regPLGrab.selectedIndex].text) {
									console.log('Product: I have been clicked. ProductLine');
									if (xmlAuto2Det[a].getElementsByTagName('ProductName')[0].firstChild.data == regPNDiv.value) {
										console.log('Product: I have been clicked. Product');

										if (xmlAuto2Det[a].getElementsByTagName('DosageForm')[0].firstChild.data == regDFGrab.value) {
											//&& xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data ==regStGrab.value) 
											if (xmlAuto2Det[a].getElementsByTagName('Strength')[0].firstChild.data == regStGrab.value) {
												nrnArr.push(xmlAuto2Det[a].getElementsByTagName('NRN')[0].firstChild.data);
												console.log(nrnArr);
												console.log('Above is nrnArr: ' + nrnArr);
												regNRNGrab.value = nrnArr;
											}

										}
									}
								}
							}

						}

					}


					/*
					regPCDiv = document.getElementById('regPC');
					regSCDiv = document.getElementById('regSC');
					regGenDiv = document.getElementById('regGen');
					while (regSCDiv.length) {
						regSCDiv.remove(0);
					}
					for (var a=0;a<DERSCArr.length;a++) {
							regSCDiv.options[a] = new Option (DERSCArr[a]);
					}
					
					while (regGenDiv.length) {
						regGenDiv.remove(0);
					}
					for (var a=0;a<DERGenArr.length;a++) {
							regGenDiv.options[a] = new Option (DERGenArr[a]);
					}
					regIconDiv = document.getElementById('regIcon');
					*/

					/*
					var regSelInspTypeDiv = document.getElementById('regSelInspType');
					
					for (var a=0;a<inspTypeArr.length;a++) {
						regSelInspTypeDiv.options[a] = new Option(inspTypeArr[a]);
						regSelInspTypeDiv.options[a].value = inspTypeArr[a];
					}
					
					*/

					//Populating States






				}

				GeoInpt2();

			</script>
</body>

</html>